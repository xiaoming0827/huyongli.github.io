<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老胡</title>
  <subtitle>心若在，梦就在</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ittiger.cn/"/>
  <updated>2017-07-17T10:05:07.231Z</updated>
  <id>http://ittiger.cn/</id>
  
  <author>
    <name>老胡</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信小程序之页面数据绑定及页面跳转传参</title>
    <link href="http://ittiger.cn/weixin-xcx-data-binding-and-params-transfer.html"/>
    <id>http://ittiger.cn/weixin-xcx-data-binding-and-params-transfer.html</id>
    <published>2017-07-17T09:50:02.000Z</published>
    <updated>2017-07-17T10:05:07.231Z</updated>
    
    <content type="html"><![CDATA[<p>在写前面的小程序入门项目时，发现有两个很常用而且觉得也算比较重要的知识点，这里记录下：</p>
<h3 id="页面数据绑定"><a href="#页面数据绑定" class="headerlink" title="页面数据绑定"></a>页面数据绑定</h3><p>比如你的页面需要显示一个<code>Hello</code>字符串，这个这个字符串可能会根据某些情况会动态变化，这个时候就需要进行数据绑定展示了</p>
<p>在wxml文件布局如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在js中设置好变量如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">	data: &#123;</div><div class="line">		message: <span class="string">"Hello"</span>,</div><div class="line">		number: <span class="number">1</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>就这样data里面的message属性就可以通过view组件展示出来了，看了上面的写法，也很容易明白，组件展示数据信息时是通过<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;属性名称&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>这的写法与data里面的属性进行绑定的。</p>
<p>如果在数据信息展示出来后，后面要更新这个属性信息的展示的话，就不能简单的通过<code>this.data.message=&quot;Hello World&quot;来实现，因为这样是无法达到改变数据信息的目的的。小程序中改变数据信息要求使用函数</code>setData()<code>函数来实现。例如上面我们修改</code>message`的值的话需要进行如下操作：</p>
<!--mroe-->
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setData(&#123;</div><div class="line">	message: <span class="string">"Hello World"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通过该函数更新之后，页面上会自动的更新展示，而不需要我们去进行额外的操作，微信将数据的展示与更新进行了分离，只要你使用特定的方法修改属性值，界面就会自动更新，这样的实方式比起android中的手动通知更新要方便很多</p>
<h3 id="页面跳转参数"><a href="#页面跳转参数" class="headerlink" title="页面跳转参数"></a>页面跳转参数</h3><p>小程序中从一个页面跳转到另外一个页面有几种方式，这里我以<code>wx.navigateTo()</code>跳转进行说明：<br>我从<code>index</code>页面跳转到<code>logs</code>页面，很简单</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wx.navigateTo(&#123;</div><div class="line">	url: '../log/logs</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>那如果我在跳转的同时要向<code>logs</code>页面传递参数该怎么办呢，也很简单，直接在url后拼接相关参数即可(与http中的get请求的传参方式是一样的)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wx.navigateTo(&#123;</div><div class="line">	url: <span class="string">'../video/video?message='</span> + <span class="keyword">this</span>.data.message + <span class="string">"&amp;number="</span> + <span class="keyword">this</span>.data.number</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>参数是传过去了，那在<code>logs</code>页面中该如何获取这些参数呢？其实也很简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> message = options.message;</div><div class="line">	<span class="keyword">var</span> number = options.number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上所示，我们在新页面的<code>onLoad</code>函数中就可以直接获取到传递过来的参数信息。</p>
<h3 id="点击View传参"><a href="#点击View传参" class="headerlink" title="点击View传参"></a>点击View传参</h3><p>在我前面的文章<a href="http://ittiger.cn/weixin-xcx-first-project.html"> 微信小程序之入门项目</a>中点击视频列表中的某一项跳转到视频播放页面，而在点击列表中的某一项时，需要获取当前项的数据信息，如果我想通过点击事件就将这些数据信息作为参数传递过去该怎么做呢？代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;tab.videos&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"video"</span> <span class="attr">data-video</span>=<span class="string">"&#123;&#123;video&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"*this"</span> <span class="attr">bindtap</span>=<span class="string">"onItemClick"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的代码通过for循环实现了一个列表，并为每一项绑定了点击事件，而<code>view</code>组件实现中有一个属性是微信没有提供的：<code>data-video</code>，这个属性是我们手动添加上去的，微信中如果要在wxml中传递参数到点击事件中的话则可以通过<code>data-**</code>的形式进行传参(**号即为参数名称)，此处是将每一项数据<code>video</code>作为参数进行传递，同时参数名称为<code>video</code></p>
<p>接下来再来看看点击事件中如何获取该<code>video</code>信息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">onItemClick: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> video = event.currentTarget.dataset.video;</div><div class="line">    <span class="keyword">var</span> url = video.url;</div><div class="line">    <span class="keyword">var</span> title = video.title;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>没错，就像代码中写的，在点击事件中我们可以通过<code>event.currentTarget.dataset</code>获取传过来的<code>video</code>信息，这个参数在调试的时候也是可以通过event对象看到的</p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写前面的小程序入门项目时，发现有两个很常用而且觉得也算比较重要的知识点，这里记录下：&lt;/p&gt;
&lt;h3 id=&quot;页面数据绑定&quot;&gt;&lt;a href=&quot;#页面数据绑定&quot; class=&quot;headerlink&quot; title=&quot;页面数据绑定&quot;&gt;&lt;/a&gt;页面数据绑定&lt;/h3&gt;&lt;p&gt;比如你
    
    </summary>
    
      <category term="小程序" scheme="http://ittiger.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="小程序" scheme="http://ittiger.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序之Tab切换</title>
    <link href="http://ittiger.cn/weixin-xcx-tabbar-switch.html"/>
    <id>http://ittiger.cn/weixin-xcx-tabbar-switch.html</id>
    <published>2017-07-17T09:44:58.000Z</published>
    <updated>2017-07-17T10:06:12.830Z</updated>
    
    <content type="html"><![CDATA[<p>做过<code>android</code>的都知道在<code>android</code>里面实现<code>Tab切换</code>非常简单，使用<code>android</code>提供的<code>TabLayout+ViewPager</code>很容器就实现了<code>Tab切换</code>的效果。</p>
<p>但是小程序中是没有提供类似可以直接使用的组件，因此想要实现此功能需要我们自己去编码实现。在<a href="http://ittiger.cn/weixin-xcx-first-project.html">上一篇</a>文章中我提到的小程序练手项目就实现了<code>Tab切换</code>效果，具体效果图可以参考文章<a href="http://ittiger.cn/weixin-xcx-first-project.html">微信小程序入门项目</a>。</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>翻看小程序的文档可以发现，微信为我们提供了一个<code>swiper</code>组件，通过该组件可以实现<code>view</code>的滑动切换，它的功能与<code>android</code>中的<code>ViewPager</code>是类似的。因此实现<code>Tab切换</code>现在只需要实现头部的<code>Tabbar</code>即可，对于该功能我们可以采用多个横向排列的<code>view</code>组件构成一个<code>Tabbar</code>，每个<code>view</code>组件作为一个<code>Tab</code>项，然后再将其点击事件与<code>swiper</code>进行关联即可实现<code>Tab</code>的点击和滑动切换功能。而对于<code>Tabbar</code>的当前<code>Tab</code>项下面的指示器我们可以采用<code>border-bottom</code>样式实现，也可以单独使用一个<code>view</code>组件作为指示器，我这里采用的是第二种方式实现指示器。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>实现代码如下：</p>
<h4 id="页面布局代码"><a href="#页面布局代码" class="headerlink" title="页面布局代码"></a>页面布局代码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;tabs&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"*this"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"navbar__item &#123;&#123;activeIndex == index ? 'navbar__item_on' : ''&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"navTabClick"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"navbar__title"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">block</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"navbar__slider"</span> <span class="attr">style</span>=<span class="string">"width: &#123;&#123;sliderWidth&#125;&#125;px; transform: translateX(&#123;&#123;sliderOffset&#125;&#125;px); -webkit-transform: translateX(&#123;&#123;sliderOffset&#125;&#125;px);"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">"position: absolute;top: 68rpx;width: 100%;height:&#123;&#123;contentHeight&#125;&#125;px"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">current</span>=<span class="string">"&#123;&#123;activeIndex&#125;&#125;"</span> <span class="attr">duration</span>=<span class="string">"300"</span> <span class="attr">bindchange</span>=<span class="string">"bindChange"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>热门视频<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>比赛集锦<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>你懂专栏<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>天下足球<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="布局样式代码"><a href="#布局样式代码" class="headerlink" title="布局样式代码"></a>布局样式代码</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">view , page &#123;</div><div class="line">  padding: 0px;</div><div class="line">  margin: 0px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.page &#123;</div><div class="line">  height: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.navbar &#123;</div><div class="line">    display: flex;</div><div class="line">    position: absolute;</div><div class="line">    z-index: 500;</div><div class="line">    top: 0;</div><div class="line">    width: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.navbar__item &#123;</div><div class="line">    position: relative;</div><div class="line">    display: block;</div><div class="line">    flex: 1;</div><div class="line">    padding: 10rpx 0;</div><div class="line">    text-align: center;</div><div class="line">    font-size: 0;</div><div class="line">    height: 48rpx;</div><div class="line">    line-height: 48rpx;</div><div class="line">    &lt;!-- NavBar的总高度为：height + padding-top + padding-bottom = 68rpx --&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.navbar__item_on &#123;</div><div class="line">    color: #16B13A;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.navbar__slider &#123;</div><div class="line">    position: absolute;</div><div class="line">    display: block;</div><div class="line">    content: " ";</div><div class="line">    left: 0;</div><div class="line">    bottom: 0;</div><div class="line">    height: 3px;</div><div class="line">    background-color: #16B13A;</div><div class="line">    transition: transform .3s;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.navbar__title&#123;</div><div class="line">    display: inline-block;</div><div class="line">    font-size: 15px;</div><div class="line">    max-width: 8em;</div><div class="line">    text-align: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">swiper &#123;</div><div class="line">  height: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">swiper-item&#123;</div><div class="line">  width: 100%;</div><div class="line">  padding-top: 20rpx;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tabs = [</div><div class="line">  &#123;</div><div class="line">    name: <span class="string">"热门视频"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    name: <span class="string">"比赛集锦"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    name: <span class="string">"你懂专栏"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    name: <span class="string">"天下足球"</span></div><div class="line">  &#125;</div><div class="line">];</div><div class="line"></div><div class="line">Page(&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 页面的初始数据</div><div class="line">   */</div><div class="line">  data: &#123;</div><div class="line">    tabs: tabs,     <span class="comment">//展示的数据</span></div><div class="line">    slideOffset: <span class="number">0</span>,<span class="comment">//指示器每次移动的距离</span></div><div class="line">    activeIndex: <span class="number">0</span>,<span class="comment">//当前展示的Tab项索引</span></div><div class="line">    sliderWidth: <span class="number">96</span>,<span class="comment">//指示器的宽度,计算得到</span></div><div class="line">    contentHeight: <span class="number">0</span><span class="comment">//页面除去头部Tabbar后，内容区的总高度，计算得到</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 生命周期函数--监听页面加载</div><div class="line">   */</div><div class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    wx.getSystemInfo(&#123;</div><div class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        that.setData(&#123;</div><div class="line">        <span class="comment">//计算相关宽度</span></div><div class="line">          sliderWidth: res.windowWidth / that.data.tabs.length,</div><div class="line">          sliderOffset: res.windowWidth / that.data.tabs.length * that.data.activeIndex,</div><div class="line">          contentHeight: res.windowHeight - res.windowWidth / <span class="number">750</span> * <span class="number">68</span><span class="comment">//计算内容区高度，rpx -&gt; px计算</span></div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  bindChange: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> current = e.detail.current;</div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      activeIndex: current,</div><div class="line">      sliderOffset: <span class="keyword">this</span>.data.sliderWidth * current</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"bindChange:"</span> + current);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  navTabClick: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      sliderOffset: e.currentTarget.offsetLeft,</div><div class="line">      activeIndex: e.currentTarget.id</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"navTabClick:"</span> + e.currentTarget.id);</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面的布局代码和js代码其实写起来都不难，关键在于css样式的编写，对于不熟悉CSS的人来说调样式太痛苦了。这个效果也是我调了好半天，参考了好多代码之后写出来的，真o(╯□╰)o，看来想写好小程序还得好好学学CSS样式。</p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做过&lt;code&gt;android&lt;/code&gt;的都知道在&lt;code&gt;android&lt;/code&gt;里面实现&lt;code&gt;Tab切换&lt;/code&gt;非常简单，使用&lt;code&gt;android&lt;/code&gt;提供的&lt;code&gt;TabLayout+ViewPager&lt;/code&gt;很容器就实现
    
    </summary>
    
      <category term="小程序" scheme="http://ittiger.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="小程序" scheme="http://ittiger.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序之入门项目</title>
    <link href="http://ittiger.cn/weixin-xcx-first-project.html"/>
    <id>http://ittiger.cn/weixin-xcx-first-project.html</id>
    <published>2017-07-17T09:40:39.000Z</published>
    <updated>2017-07-17T10:06:27.872Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习微信小程序，尝试着写了一个足球视频播放的小程序，先放效果截图吧</p>
<p><img src="/img/weixin-xcx/1.jpg" width="400"></p>
<p><img src="/img/weixin-xcx/2.jpg" width="400"></p>
<p><img src="/img/weixin-xcx/3.jpg" width="400"></p>
<hr>
<p>通过这个小程序的练习熟悉小程序中网络加载，页面编写和配置，页面跳转及传参，页面展示时的数据绑定以及独立模块的引用等知识点。</p>
<p>当然写小程序最重要的一点是必须要熟悉CSS样式的编写，对于我这种对CSS不熟的人来说真是太困难了。一个界面效果都需要调上半天。</p>
<p>项目代码地址如下：<br><a href="https://github.com/huyongli/WXSoccerVideo" target="_blank" rel="external">https://github.com/huyongli/WXSoccerVideo</a></p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习微信小程序，尝试着写了一个足球视频播放的小程序，先放效果截图吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/weixin-xcx/1.jpg&quot; width=&quot;400&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/weixin-xcx/2.jpg&quot; width=&quot;
    
    </summary>
    
      <category term="小程序" scheme="http://ittiger.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="小程序" scheme="http://ittiger.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>TextSwitcher与ViewSwitcher学习笔记</title>
    <link href="http://ittiger.cn/TextSwitcher-ViewSwitcher.html"/>
    <id>http://ittiger.cn/TextSwitcher-ViewSwitcher.html</id>
    <published>2017-07-12T09:36:51.000Z</published>
    <updated>2017-07-17T10:06:06.190Z</updated>
    
    <content type="html"><![CDATA[<p><code>TextSwitcher</code>和<code>ViewSwitcher</code>是什么，有什么用呢？</p>
<p>其实大家从名字就可以看出来其大概意思，<code>TextSwitcher</code>是用来切换文本显示的，而<code>ViewSwitcher</code>是用来切换视图显示的，实际上他们也的确是用来做这个的，只不过他们在切换视图显示的时候允许添加切换的动画效果。<code>TextSwitcher</code>其实也是<code>ViewSwitcher</code>的子类实现。</p>
<h3 id="TextSwitcher使用"><a href="#TextSwitcher使用" class="headerlink" title="TextSwitcher使用"></a>TextSwitcher使用</h3><p>我们先来看看<code>TextSwitcher</code>的用法：</p>
<p>关键布局代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"change"</span>/&gt;</div><div class="line"><span class="tag">&lt;<span class="name">TextSwitcher</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/switcher"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>Java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置显示Text文本的View创建工厂</span></div><div class="line"><span class="comment">//这是通过代码的方式创建显示文本的视图，也可以直接在布局中设置显示文本的视图，这个在讲ViewSwitcher的用法的时候再说</span></div><div class="line">mTextSwitcher.setFactory(<span class="keyword">new</span> ViewSwitcher.ViewFactory() &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> View <span class="title">makeView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">         TextView t = <span class="keyword">new</span> TextView(TextSwitcherActivity.<span class="keyword">this</span>);</div><div class="line">         t.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL);</div><div class="line">         t.setTextAppearance(TextSwitcherActivity.<span class="keyword">this</span>, android.R.style.TextAppearance_Large);</div><div class="line">         <span class="keyword">return</span> t;</div><div class="line">     &#125;</div><div class="line"> &#125;);</div><div class="line"> Animation in = AnimationUtils.loadAnimation(<span class="keyword">this</span>,</div><div class="line">         android.R.anim.fade_in);</div><div class="line"> Animation out = AnimationUtils.loadAnimation(<span class="keyword">this</span>,</div><div class="line">         android.R.anim.fade_out);</div><div class="line"> mTextSwitcher.setInAnimation(in);<span class="comment">//设置文本出现动画</span></div><div class="line"> mTextSwitcher.setOutAnimation(out);<span class="comment">//设置文本消失动画</span></div><div class="line"> mTextSwitcher.setCurrentText(String.valueOf(mCount));<span class="comment">//设置初始值，初始值不显示动画</span></div><div class="line"> </div><div class="line"> <span class="keyword">int</span> mCount = <span class="number">0</span>;</div><div class="line"> mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">	    mCount++;</div><div class="line">		mTextSwitcher.setText(String.valueOf(mCount));<span class="comment">//更新文本显示值，会出现动画     </span></div><div class="line">     &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p>当你点击界面上的按钮的时候，会不断的更新<code>TextSwitcher</code>的显示值，而在更新过程中文本会出现一个淡入淡出的效果，这个效果就是通过动画产生的。</p>
<h3 id="ViewSwitcher使用"><a href="#ViewSwitcher使用" class="headerlink" title="ViewSwitcher使用"></a>ViewSwitcher使用</h3><p>接着我们再来看看<code>ViewSwitcher</code>的使用<br>布局代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">    android:id=&quot;@+id/button2&quot;</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_marginTop=&quot;20dp&quot;</div><div class="line">    android:text=&quot;change&quot;/&gt;</div><div class="line"></div><div class="line">&lt;ViewSwitcher</div><div class="line">    android:id=&quot;@+id/viewSwitcher&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:layout_width=&quot;300dp&quot;</div><div class="line">        android:layout_height=&quot;300dp&quot;</div><div class="line">        android:src=&quot;@drawable/image1&quot;/&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:layout_width=&quot;300dp&quot;</div><div class="line">        android:layout_height=&quot;300dp&quot;</div><div class="line">        android:src=&quot;@drawable/image2&quot;/&gt;</div><div class="line">&lt;/ViewSwitcher&gt;</div></pre></td></tr></table></figure>
<p>上面的布局中我们给<code>ViewSwitcher</code>添加了两个子视图，注意这里只能添加两个直接子视图，否则初始化会出现异常，至于原因后面接着说。前面说过<code>TextSwitcher</code>也可以通过布局设置文本显示视图，它的设置方式与<code>ViewSwitcher</code>其实也是一样的。</p>
<p>ok，接着上Java代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//因为我们已经通过布局的方式设置了要切换的视图，所以就不需要再设置Factory去生成切换视图了</span></div><div class="line">Animation slide_in_left = AnimationUtils.loadAnimation(<span class="keyword">this</span>,</div><div class="line">                android.R.anim.slide_in_left);</div><div class="line">Animation slide_out_right = AnimationUtils.loadAnimation(<span class="keyword">this</span>,</div><div class="line">       android.R.anim.slide_out_right);</div><div class="line">mViewSwitcher.setInAnimation(slide_in_left);<span class="comment">//设置图片出现动画</span></div><div class="line">mViewSwitcher.setOutAnimation(slide_out_right);<span class="comment">//设置图片消失动画</span></div><div class="line">mButton2.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">		mViewSwitcher.showNext();     </div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面就是<code>ViewSwitcher</code>的使用方式，其实用起来还是很简单的。通过自定义动画，我们可以为两个View切换时添加更多漂亮有趣的动画效果</p>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>在Android开发中视图切换显示还是很常见的，比如应用加载数据时显示加载动画视图数据视图隐藏，而加载成功后加载动画视图隐藏数据视图显示，这个场景使用<code>ViewSwitcher</code>来实现应该会更简单，更方便。</p>
<h3 id="源码探究"><a href="#源码探究" class="headerlink" title="源码探究"></a>源码探究</h3><ul>
<li>前面说到过<code>ViewSwitcher</code>只能存在两个直接子视图，否则会初始化失败，这是为什么呢？通过源码我们可以找到答案</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void addView(View child, int index, ViewGroup.LayoutParams params) &#123;</div><div class="line">   if (getChildCount() &gt;= 2) &#123;</div><div class="line">       throw new IllegalStateException(&quot;Can&apos;t add more than 2 views to a ViewSwitcher&quot;);</div><div class="line">   &#125;</div><div class="line">   super.addView(child, index, params);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在前面<code>ViewSwitcher</code>的使用中我们点击按钮的时候直接调用了<code>mViewSwitcher.showNext();</code>，既然只能有两个子视图，那我们每次点击都<code>showNext()</code>怎么会没出现越界异常呢？ok，我们还是看看源码中是怎么实现的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@android.view.RemotableViewMethod</div><div class="line">public void showNext() &#123;</div><div class="line">   setDisplayedChild(mWhichChild + 1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@android.view.RemotableViewMethod</div><div class="line">public void setDisplayedChild(int whichChild) &#123;</div><div class="line">    mWhichChild = whichChild;</div><div class="line">    if (whichChild &gt;= getChildCount()) &#123;</div><div class="line">        mWhichChild = 0;</div><div class="line">    &#125; else if (whichChild &lt; 0) &#123;</div><div class="line">        mWhichChild = getChildCount() - 1;</div><div class="line">    &#125;</div><div class="line">    boolean hasFocus = getFocusedChild() != null;</div><div class="line">    // This will clear old focus if we had it</div><div class="line">    showOnly(mWhichChild);</div><div class="line">    if (hasFocus) &#123;</div><div class="line">        // Try to retake focus if we had it</div><div class="line">        requestFocus(FOCUS_FORWARD);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的实现我们可以看到当其显示的child索引出现越界之后，会自动的进行循环显示，这也是为什么一直调用<code>showNext()</code>没出现越界异常的原因</p>
<h4 id="切换原理"><a href="#切换原理" class="headerlink" title="切换原理"></a>切换原理</h4><p>我们再来看看其切换显示过程中视图的显示和隐藏及动画是如何实现的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">void showOnly(int childIndex, boolean animate) &#123;</div><div class="line">    final int count = getChildCount();</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        final View child = getChildAt(i);</div><div class="line">        if (i == childIndex) &#123;</div><div class="line">            if (animate &amp;&amp; mInAnimation != null) &#123;</div><div class="line">                child.startAnimation(mInAnimation);</div><div class="line">            &#125;</div><div class="line">            child.setVisibility(View.VISIBLE);</div><div class="line">            mFirstTime = false;</div><div class="line">        &#125; else &#123;</div><div class="line">            if (animate &amp;&amp; mOutAnimation != null &amp;&amp; child.getVisibility() == View.VISIBLE) &#123;</div><div class="line">                child.startAnimation(mOutAnimation);</div><div class="line">            &#125; else if (child.getAnimation() == mInAnimation)</div><div class="line">                child.clearAnimation();</div><div class="line">            child.setVisibility(View.GONE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码实现也很简单，当显示指定索引的child时，将其设置为可见并执行<code>mInAnimation</code>，其他视图在设置为不可见并执行<code>mOutAnimation</code>动画</p>
<h4 id="Factory作用原理"><a href="#Factory作用原理" class="headerlink" title="Factory作用原理"></a>Factory作用原理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public void setFactory(ViewFactory factory) &#123;</div><div class="line">    mFactory = factory;</div><div class="line">    obtainView();</div><div class="line">    obtainView();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private View obtainView() &#123;</div><div class="line">    View child = mFactory.makeView();</div><div class="line">    LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">    if (lp == null) &#123;</div><div class="line">        lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);</div><div class="line">    &#125;</div><div class="line">    addView(child, lp);</div><div class="line">    return child;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过源码实现我们可以知道<code>mTextSwitcher.setFactory(mFactory)</code>设置完成之后，<code>ViewSwitcher</code>会立刻生成两个视图作为其子视图作为切换显示用。</p>
<p>示例代码在这里：<a href="https://github.com/huyongli/AndroidDemo/blob/master/app/src/main/java/cn/ittiger/demo/activity/TextSwitcherActivity.java" target="_blank" rel="external">https://github.com/huyongli/AndroidDemo</a></p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;TextSwitcher&lt;/code&gt;和&lt;code&gt;ViewSwitcher&lt;/code&gt;是什么，有什么用呢？&lt;/p&gt;
&lt;p&gt;其实大家从名字就可以看出来其大概意思，&lt;code&gt;TextSwitcher&lt;/code&gt;是用来切换文本显示的，而&lt;code&gt;ViewSw
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="TextSwitcher" scheme="http://ittiger.cn/tags/TextSwitcher/"/>
    
      <category term="ViewSwitcher" scheme="http://ittiger.cn/tags/ViewSwitcher/"/>
    
  </entry>
  
  <entry>
    <title>关于媒体浏览器服务(MediaBrowserService)</title>
    <link href="http://ittiger.cn/MediaBrowserService.html"/>
    <id>http://ittiger.cn/MediaBrowserService.html</id>
    <published>2017-04-30T13:45:04.000Z</published>
    <updated>2017-05-02T03:27:43.789Z</updated>
    
    <content type="html"><![CDATA[<p>今天说的这个主题与媒体播放有关，尤其是音乐播放，说到音乐播放大家应该都用过音乐App。<br>通常一个音乐App的实现主要涉及如下几点：</p>
<ol>
<li>从服务器获取音乐数据</li>
<li>播放音乐时播放器的各种播放状态以及不同状态下的UI展示</li>
<li>播放过程中通过UI界面控制播放器的各种状态</li>
<li>UI控制如何与播放服务进行关联并进行状态同步</li>
<li>如何保证后台播放过程中播放服务不被杀死</li>
</ol>
<p>对于上面的这几点，其实<code>Android</code>已经为我们提供了一套完整的解决方案，它已经很好的将这些操作进行了封装，我们只需要关注数据的获取和歌曲的播放即可。<code>Android</code>提供的这套API在<code>support-v4</code>中提供了兼容版本，因此在使用的过程中最好使用该版本以兼容低版本系统。</p>
<p>关键类主要有如下几个：</p>
<ol>
<li><code>MediaBrowserServiceCompat</code> 媒体浏览器服务</li>
<li><code>MediaBrowserCompat</code> 媒体浏览器</li>
<li><code>MediaControllerCompat</code> 媒体控制器</li>
<li><code>MediaSessionCompat</code> 媒体会话<br>我们一个个来说。</li>
</ol>
<a id="more"></a>
<h3 id="MediaBrowserServiceCompat"><a href="#MediaBrowserServiceCompat" class="headerlink" title="MediaBrowserServiceCompat"></a>MediaBrowserServiceCompat</h3><p>该类有两个作用：</p>
<ol>
<li>音乐播放后台服务</li>
<li>客户端中获取音乐数据的服务，所有的音乐数据都通过该服务与服务端进行交互获取(或者直接获取手机中的本地音乐数据)</li>
</ol>
<p>既然知道该类是<code>Service</code>的子类实现，所以说它是音乐播放的后台服务也好理解，但是该类作为一个后台播放服务却不是通过其自身直接实现的，而是通过<code>MediaSessionCompat</code>媒体会话这个类来实现的。在使用过程中媒体会话会与该服务关联起来，所有的播放操作都交由<code>MediaSessionCompat</code>实现。</p>
<p>而对于获取数据，则是通过<code>MediaBrowserServiceCompat</code>的如下两个方法来进行控制：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> BrowserRoot <span class="title">onGetRoot</span><span class="params">(@NonNull String clientPackageName, <span class="keyword">int</span> clientUid,</span></span></div><div class="line">                             Bundle rootHints) &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在返回数据之前，可以进行黑白名单控制，以控制不同客户端浏览不同的媒体资源</div><div class="line">     * */</div><div class="line">    <span class="keyword">if</span>(!PackageUtil.isCallerAllowed(<span class="keyword">this</span>, clientPackageName, clientUid)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BrowserRoot(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//此方法只在服务连接的时候调用</span></div><div class="line">    <span class="comment">//返回一个rootId不为空的BrowserRoot则表示客户端可以连接服务，也可以浏览其媒体资源</span></div><div class="line">    <span class="comment">//如果返回null则表示客户端不能流量媒体资源</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BrowserRoot(BrowserRootId.MEDIA_ID_ROOT, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadChildren</span><span class="params">(@NonNull String parentId, @NonNull Result&lt;List&lt;MediaItem&gt;&gt; result)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/***</span></div><div class="line">     * 此方法中的parentId与上面的方法onGetRoot中返回的RootId没有关系</div><div class="line">     * 客户端连接后，它可以通过重复调用MediaBrowserCompat.subscribe() 方法来发起数据获取请求。</div><div class="line">     * 而每次调用subscribe() 方法都会发送一个onLoadChildren（）回调到该service中，然后返回一个MediaBrowser.MediaItem(音乐数据) 对象列表</div><div class="line">     *</div><div class="line">     * 每个MediaItem 都有唯一的ID字符串，它其实是一个隐式的token。</div><div class="line">     * 当客户想打开子菜单或播放一个item时，它就将ID传入。</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span>(BrowserRootId.MEDIA_ID_MUSIC_LIST_REFRESH.equals(parentId)) &#123;</div><div class="line">        <span class="comment">//在当前方法执行结束返回之前必须要调用result.detach(),否则无法发起请求</span></div><div class="line">        result.detach();</div><div class="line">        MusicProvider.getInstance().requestMusic(result);</div><div class="line">        <span class="comment">//如果想要通过http请求来获取数据，则必须按照上面说的必须要先调用result.detach();方法，否则会出现异常。http请求结束之后则通过调用result.sendResult(mMetadataCompatList);将数据返回,返回的数据在注册的接口MediaBrowserCompat.SubscriptionCallback中通过回调拿到在界面上进行展示</span></div><div class="line">        <span class="comment">//而且此处返回的数据类型必须是MediaBrowser.MediaItem</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        result.detach();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="MediaBrowserCompat"><a href="#MediaBrowserCompat" class="headerlink" title="MediaBrowserCompat"></a>MediaBrowserCompat</h3><p>前面说过<code>MediaBrowserServiceCompat</code>(媒体浏览服务)是作为数据请求服务来获取数据的，因此相应的会有一个媒体浏览客户端来发起媒体数据的获取请求，该类就是这个客户端。<br>前面已经介绍过通过调用<code>MediaBrowserCompat.subscribe()</code>方法来发起数据请求，而在调用此方法之前，必须保证<code>MediaBrowserCompat</code>连接上媒体浏览服务，连接方式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过如下代码连接MediaBrowserServiceCompat，连接成功后获取媒体会话token</span></div><div class="line"><span class="comment">//通过媒体会话token创建MediaControllerCompat </span></div><div class="line"><span class="comment">//这时就将MediaControllerCompat与媒体会话MediaSessionCompat关联起来了</span></div><div class="line">MediaBrowserCompat mediaBrowser = <span class="keyword">new</span> MediaBrowserCompat(<span class="keyword">this</span>,</div><div class="line">                <span class="keyword">new</span> ComponentName(<span class="keyword">this</span>, MusicService.class), mConnectionCallback, <span class="keyword">null</span>);</div><div class="line"></div><div class="line"><span class="comment">//连接媒体浏览服务成功后的回调接口</span></div><div class="line"><span class="keyword">final</span> MediaBrowserCompat.ConnectionCallback mConnectionCallback =</div><div class="line">    <span class="keyword">new</span> MediaBrowserCompat.ConnectionCallback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnected</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">	            <span class="comment">//获取与MediaBrowserServiceCompat关联的媒体会话token</span></div><div class="line">	            MediaSessionCompat.Token token = mMediaBrowser.getSessionToken();</div><div class="line">	            <span class="comment">//通过媒体会话token创建媒体控制器并与之关联</span></div><div class="line">	            <span class="comment">//关联之后媒体控制器就可以控制播放器的各种播放状态了</span></div><div class="line">                MediaControllerCompat mediaController = <span class="keyword">new</span> MediaControllerCompat(<span class="keyword">this</span>, token);</div><div class="line">                <span class="comment">//将媒体控制器与当前上下文Context进行关联</span></div><div class="line">                <span class="comment">//此处关联之后，我们在界面上操作某些UI的时候就可以通过当前上下文Context来获取当前的MediaControllerCompat</span></div><div class="line">                <span class="comment">//MediaControllerCompat controller = MediaControllerCompat.getMediaController((Activity) context);</span></div><div class="line">		        MediaControllerCompat.setMediaController(<span class="keyword">this</span>, mediaController);</div><div class="line">		        <span class="comment">//为媒体控制器注册回调接口	        mediaController.registerCallback(mMediaControllerCallback);</span></div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                onMediaControllerConnectedFailed();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="comment">//媒体控制器控制播放过程中的回调接口</span></div><div class="line"><span class="keyword">final</span> MediaControllerCompat.Callback mMediaControllerCallback =</div><div class="line">   <span class="keyword">new</span> MediaControllerCompat.Callback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPlaybackStateChanged</span><span class="params">(@NonNull PlaybackStateCompat state)</span> </span>&#123;</div><div class="line">			<span class="comment">//播放状态发生改变时的回调</span></div><div class="line">            onMediaPlayStateChanged(state);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMetadataChanged</span><span class="params">(MediaMetadataCompat metadata)</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(metadata == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//播放的媒体数据发生变化时的回调</span></div><div class="line">            onPlayMetadataChanged(metadata);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//发起数据请求</span></div><div class="line"> <span class="comment">//先解除订阅</span></div><div class="line"> mediaBrowser.unsubscribe(BrowserRootId.MEDIA_ID_MUSIC_LIST_REFRESH);</div><div class="line"> <span class="comment">//重新对BrowserRootId进行订阅</span></div><div class="line"> <span class="comment">//调用此方法后，会接着执行MusicService中的onGetRoot方法和onLoadChildren方法</span></div><div class="line"> <span class="comment">//onGetRoot方法(只会调用一次)决定是否允许当前客户端连接服务和获取媒体数据</span></div><div class="line"> <span class="comment">//如果允许连接服务同时也允许获取媒体数据，则会接着调用onLoadChildren方法开始获取数据</span></div><div class="line"> <span class="comment">//数据获取成功后会调用订阅的回调接口将数据返回回来</span></div><div class="line"> mediaBrowser.subscribe(BrowserRootId.MEDIA_ID_MUSIC_LIST_REFRESH, mSubscriptionCallback);</div><div class="line"></div><div class="line"><span class="comment">//向媒体流量服务发起媒体浏览请求的回调接口</span></div><div class="line"><span class="keyword">final</span> MediaBrowserCompat.SubscriptionCallback mSubscriptionCallback =</div><div class="line">    <span class="keyword">new</span> MediaBrowserCompat.SubscriptionCallback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChildrenLoaded</span><span class="params">(@NonNull String parentId,</span></span></div><div class="line">                                     @NonNull List&lt;MediaBrowserCompat.MediaItem&gt; children) &#123;</div><div class="line">            <span class="comment">//数据获取成功后的回调</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull String id)</span> </span>&#123;</div><div class="line">	        <span class="comment">//数据获取失败的回调</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<h3 id="MediaSessionCompat"><a href="#MediaSessionCompat" class="headerlink" title="MediaSessionCompat"></a>MediaSessionCompat</h3><p>前面说过<code>MediaBrowserServiceCompat</code>的媒体播放其实是通过关联的<code>MediaSessionCompat</code>来实现的，而其关联方式也很简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">MediaSessionCompat mSession = <span class="keyword">new</span> MediaSessionCompat(<span class="keyword">this</span>, <span class="string">"MusicService"</span>);</div><div class="line">setSessionToken(mSession.getSessionToken());</div><div class="line">mSession.setCallback(<span class="keyword">new</span> MediaSessionCompat.Callback());</div><div class="line">mSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS | MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);</div><div class="line"></div><div class="line"><span class="comment">//MediaSessionCompat的播放控制则又全部是通过接口MediaSessionCompat.Callback来实现的</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPlay</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//点击播放按钮时触发</span></div><div class="line"><span class="comment">//通过MediaControllerCompat .getTransportControls().play();触发</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSkipToQueueItem</span><span class="params">(<span class="keyword">long</span> queueId)</span> </span>&#123;</div><div class="line">     <span class="comment">//播放指定对列媒体时触发</span></div><div class="line">     <span class="comment">//通过MediaControllerCompat .getTransportControls().onSkipToQueueItem(queueId);触发</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSeekTo</span><span class="params">(<span class="keyword">long</span> position)</span> </span>&#123;</div><div class="line">     <span class="comment">//设置到指定进度时触发</span></div><div class="line">     <span class="comment">//MediaControllerCompat.getTransportControls().seekTo(position);</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPlayFromMediaId</span><span class="params">(String mediaId, Bundle extras)</span> </span>&#123;</div><div class="line"><span class="comment">//播放指定媒体数据时触发</span></div><div class="line"><span class="comment">//MediaControllerCompat.getTransportControls().playFromMediaId(mediaItem.getMediaId(), null);        </span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//暂停时触发</span></div><div class="line"><span class="comment">//MediaControllerCompat.getTransportControls().pause();</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//停止播放时触发</span></div><div class="line"><span class="comment">//MediaControllerCompat.getTransportControls().stop();</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSkipToNext</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//跳到下一首时触发</span></div><div class="line"><span class="comment">//MediaControllerCompat.getTransportControls().skipToNext();</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSkipToPrevious</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//跳到上一首时触发</span></div><div class="line"><span class="comment">//MediaControllerCompat.getTransportControls().skipToPrevious();</span></div><div class="line"> &#125;</div><div class="line"><span class="comment">//当然还有很多回调函数，大家可以自行查看</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="MediaControllerCompat"><a href="#MediaControllerCompat" class="headerlink" title="MediaControllerCompat"></a>MediaControllerCompat</h3><p>媒体控制器在上面已经介绍了其创建和关联方式，而它控制播放器状态的方式在上面的代码注释中已经说明了，基本上都是通过<code>MediaControllerCompat.getTransportControls()</code>来进行控制的。</p>
<p>到这里媒体服务的相关使用和注意点已经介绍完了，使用这套api来实现音乐APP还是很方便很快捷的，而且我们可以很方便的切换播放器，如<code>MediaPlayer</code>,<code>ExoPlayer</code>等，如有建议和问题欢迎在博客关于页中扫码加QQ群交流。</p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天说的这个主题与媒体播放有关，尤其是音乐播放，说到音乐播放大家应该都用过音乐App。&lt;br&gt;通常一个音乐App的实现主要涉及如下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从服务器获取音乐数据&lt;/li&gt;
&lt;li&gt;播放音乐时播放器的各种播放状态以及不同状态下的UI展示&lt;/li&gt;
&lt;li&gt;播放过程中通过UI界面控制播放器的各种状态&lt;/li&gt;
&lt;li&gt;UI控制如何与播放服务进行关联并进行状态同步&lt;/li&gt;
&lt;li&gt;如何保证后台播放过程中播放服务不被杀死&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于上面的这几点，其实&lt;code&gt;Android&lt;/code&gt;已经为我们提供了一套完整的解决方案，它已经很好的将这些操作进行了封装，我们只需要关注数据的获取和歌曲的播放即可。&lt;code&gt;Android&lt;/code&gt;提供的这套API在&lt;code&gt;support-v4&lt;/code&gt;中提供了兼容版本，因此在使用的过程中最好使用该版本以兼容低版本系统。&lt;/p&gt;
&lt;p&gt;关键类主要有如下几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;MediaBrowserServiceCompat&lt;/code&gt; 媒体浏览器服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MediaBrowserCompat&lt;/code&gt; 媒体浏览器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MediaControllerCompat&lt;/code&gt; 媒体控制器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MediaSessionCompat&lt;/code&gt; 媒体会话&lt;br&gt;我们一个个来说。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Media Apps" scheme="http://ittiger.cn/categories/Media-Apps/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="MediaBrowserService" scheme="http://ittiger.cn/tags/MediaBrowserService/"/>
    
      <category term="MediaControllerCompat" scheme="http://ittiger.cn/tags/MediaControllerCompat/"/>
    
  </entry>
  
  <entry>
    <title>Behavior-UC-Main-Page</title>
    <link href="http://ittiger.cn/Behavior-UC-Main-Page.html"/>
    <id>http://ittiger.cn/Behavior-UC-Main-Page.html</id>
    <published>2017-03-30T14:34:05.000Z</published>
    <updated>2017-03-31T11:59:28.893Z</updated>
    
    <content type="html"><![CDATA[<p>老规矩，还是先上效果图<br><img src="/img/material-design/uc-main-view-behavior.gif" width="360" height="640" alt="图片名称" align="center"></p>
<p><a href="https://github.com/huyongli/UCMainViewForBehavior" target="_blank" rel="external">github地址</a></p>
<a id="more"></a>
<p>前面我也写过一篇关于UC浏览器首页滑动动画效果的文章<a href="http://ittiger.cn/UC%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A6%96%E9%A1%B5%E6%BB%91%E5%8A%A8%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0.html">UC浏览器首页滑动动画实现</a>，只不过这篇文章是通过自定义View的方式实现这个滑动效果。最近在看<code>Behavior</code>相关的东西，所以使用<code>Behavior</code>又实现了一次UC浏览器主页的滑动效果，使用<code>Behavior</code>实现相比较自定义View的实现方式还是要简单方便很多。</p>
<h3 id="View结构分析"><a href="#View结构分析" class="headerlink" title="View结构分析"></a>View结构分析</h3><p>UC首页滑动过程中可以分为四个<code>View</code>在参与滑动，具体的分析流程可以参见<a href="http://ittiger.cn/UC%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A6%96%E9%A1%B5%E6%BB%91%E5%8A%A8%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0.html">UC浏览器首页滑动动画实现</a>这篇文章的分析，这里简要罗列下：</p>
<ol>
<li><code>UCViewTitle:</code>首页标题栏视图(UC首页显示<code>UC头条</code>)</li>
<li><code>UCViewHeader:</code>首页头部导航视图(UC首页显示各个网站ICON入口)</li>
<li><code>UCViewContent:</code>首页内容视图(UC首页显示新闻内容的列表)</li>
<li><code>UCViewTab:</code>首页内容<code>Tab</code>导航视图(UC首页显示新闻分类的View)</li>
</ol>
<h3 id="Behavior"><a href="#Behavior" class="headerlink" title="Behavior"></a>Behavior</h3><p>既然已经决定通过<code>Behavior</code>实现此效果，那下面几个概念就必须要弄清楚：</p>
<ol>
<li><code>Behavior</code>必须作用于<code>CoordinatorLayout</code>直接子<code>View</code>才会生效</li>
<li><code>Behavior</code>其实是对嵌套滑动的应用，因为<code>CoordinatorLayout</code>其实是实现嵌套滑动，最终对嵌套滑动的执行交给<code>Behavior</code>来实现，所以<code>Behavior</code>的滑动处理必须要有能触发嵌套滑动的<code>子View</code>触发才会起作用</li>
</ol>
<h3 id="关于嵌套滑动"><a href="#关于嵌套滑动" class="headerlink" title="关于嵌套滑动"></a>关于嵌套滑动</h3><ol>
<li><code>Android</code>实现嵌套滑动只需要实现<code>NestedScrollingParent</code>和<code>NestedScrollingChild</code>这两个接口即可</li>
<li>在嵌套滑动过程中<code>子View(实现NestedScrollingChild接口)</code>会将自身的滑动情况通知<code>父View(实现NestedScrollingParent接口)，不一定是直接父View</code>，<code>父View</code>做完相关动作之后再通知<code>子View</code>，也就是<code>子View</code>其实是整个嵌套滑动的发起者</li>
<li><code>CoordinatorLayout</code>实现了<code>NestedScrollingParent</code>接口作为嵌套滑动的<code>父View</code>，因此如果要处理<code>Behavior</code>中对于滑动的相关处理，就需要有一个嵌套滑动的<code>子View</code>来触发这个<code>Behavior</code></li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol>
<li>上面分析UC首页时发现有个显示新闻的列表，因此我们可以用<code>RecyclerView</code>作为列表，因为<code>RecyclerView</code>实现了<code>NestedScrollingChild</code>接口，可以作为嵌套滑动的<code>子View</code></li>
<li>因为是多个视图的同时滑动处理，所以在实现<code>Behavior</code>时需要选择一个依赖，这里我选择前面说过的<code>UCViewHeader</code>作为其他视图<code>Behavior</code>的依赖</li>
<li>在看了<code>AppBarLayout</code>的源码之后，发现其子类<code>ScrollingViewBehavior</code>继承至<code>HeaderScrollingViewBehavior</code>,在查看源码之后发现如下几个类可以抽出来为我们所用<code>HeaderScrollingViewBehavior</code>,<code>ViewOffsetBehavior</code>,<code>ViewOffsetHelper</code><ol>
<li><code>HeaderScrollingViewBehavior:</code>继承该类后，应用此<code>Behavior</code>的<code>View</code>布局时会自动在其依赖<code>View</code>的下方</li>
<li><code>ViewOffsetBehavior：</code>继承该类后，应用此<code>Behavior</code>的<code>View</code>在布局时会自动进行移动处理</li>
</ol>
</li>
</ol>
<h4 id="UCViewTitleBehavior实现"><a href="#UCViewTitleBehavior实现" class="headerlink" title="UCViewTitleBehavior实现"></a>UCViewTitleBehavior实现</h4><p><code>UCViewTitle</code>在初始时是不可见的，我采用设置其<code>TopMargin</code>让其不可见，然后在滑动过程中再慢慢滑动到可见，当前完全可见时滑动结束，此时其<code>translationY</code>为0，当滑动未开始时其<code>translationY</code>为<code>-height</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UCViewTitleBehavior</span> <span class="keyword">extends</span> <span class="title">ViewOffsetBehavior</span>&lt;<span class="title">View</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLayoutChild</span><span class="params">(CoordinatorLayout parent, View child, <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</div><div class="line">        <span class="comment">//因为UCViewTitle默认是在屏幕外不可见，所以在UCViewTitle进行布局的时候设置其topMargin让其不可见</span></div><div class="line">        ((CoordinatorLayout.LayoutParams) child.getLayoutParams()).topMargin = -child.getMeasuredHeight();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onLayoutChild(parent, child, layoutDirection);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isDependOn(dependency);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> headerOffsetRange = -child.getMeasuredHeight();<span class="comment">//</span></div><div class="line">        <span class="keyword">int</span> titleOffsetRange = child.getMeasuredHeight();<span class="comment">//滑动总距离</span></div><div class="line">        <span class="keyword">if</span> (dependency.getTranslationY() == headerOffsetRange) &#123;<span class="comment">//滑动初始位置</span></div><div class="line">            child.setTranslationY(titleOffsetRange);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dependency.getTranslationY() == <span class="number">0</span>) &#123;<span class="comment">//滑动结束位置</span></div><div class="line">            child.setTranslationY(<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//滑动过程中</span></div><div class="line">            child.setTranslationY((<span class="keyword">int</span>) (dependency.getTranslationY() / (headerOffsetRange * <span class="number">1.0f</span>) * titleOffsetRange));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isDependOn</span><span class="params">(View dependency)</span> </span>&#123;</div><div class="line">	    <span class="comment">//确定UCViewHeader作为依赖</span></div><div class="line">        <span class="keyword">return</span> dependency != <span class="keyword">null</span> &amp;&amp; dependency.getId() == R.id.news_view_header_layout;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;老规矩，还是先上效果图&lt;br&gt;&lt;img src=&quot;/img/material-design/uc-main-view-behavior.gif&quot; width = &quot;360&quot; height = &quot;640&quot; alt=&quot;图片名称&quot; align=center /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/huyongli/UCMainViewForBehavior&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Material Design" scheme="http://ittiger.cn/categories/Material-Design/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="Behavior" scheme="http://ittiger.cn/tags/Behavior/"/>
    
      <category term="Material Design" scheme="http://ittiger.cn/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>Behavior实现滑动隐藏ToolBar与BottomNavigation</title>
    <link href="http://ittiger.cn/Header-Footer-scroll-hide.html"/>
    <id>http://ittiger.cn/Header-Footer-scroll-hide.html</id>
    <published>2017-03-09T07:03:31.000Z</published>
    <updated>2017-03-09T08:47:17.600Z</updated>
    
    <content type="html"><![CDATA[<h4 id="多说无益，先上效果图img-material-design"><a href="#多说无益，先上效果图img-material-design" class="headerlink" title="多说无益，先上效果图img\material-design"></a>多说无益，先上效果图img\material-design</h4><p><img src="/img/material-design/sticky_navigation.gif" width="360" height="640" alt="图片名称" align="center"></p>
<p>这个效果其实是和<code>SegmentFault</code>的首页效果是一样的。</p>
<p><a href="https://github.com/huyongli/StickyNavigation" target="_blank" rel="external">Demo github地址戳这里</a></p>
<h3 id="来由"><a href="#来由" class="headerlink" title="来由"></a>来由</h3><a id="more"></a>
<p>前几天有人问我这样的效果如何实现，有何思路，我的第一反应就是使用<code>Behavior</code>来实现这个效果，使用<code>Behavior</code>实现此效果比自定义View实现此效果绝对要简单很多，之后找时间了实现了这个效果。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>用过<code>ToolBar + CoordinatorLayout + AppBarLayout</code>的人应该知道这三者组合使用再设置合适的参数(没用过的人赶紧去看看吧，或者看我的Demo也可以哟)，就可以实现滑动隐藏显示<code>ToolBar</code>，因此这部分的效果<code>Android</code>使用<code>Behavior</code>已经替我们实现好了，没必要再去费神了，而且它的效果也蛮不错。</p>
<p>接下来我们要考虑的就是如何实现在滑动的时候也隐藏底部的<code>BottomNavigation</code>，既然前面我已经说过用<code>Behavior</code>来实现此效果，因此我们需要自定义一个<code>Behavior</code>来实现滑动隐藏<code>BottomNavigation</code>。</p>
<h3 id="撸代码"><a href="#撸代码" class="headerlink" title="撸代码"></a>撸代码</h3><p>在前面一篇文章<a href="http://ittiger.cn/Custom-Behavior-to-fast-back.html">自定义Behavior实现快速返回效果</a>(没看过的请先看看)中我已经介绍了自定义<code>Behavior</code>的相关知识，这里就不再赘述了。</p>
<p>先来看看<code>ToolBar</code>滑动隐藏的代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appBarLayout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolBar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@android:color/holo_blue_dark"</span></div><div class="line">            <span class="attr">app:title</span>=<span class="string">"ToolBar Title"</span></div><div class="line">            <span class="attr">app:titleTextColor</span>=<span class="string">"@android:color/white"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span>/&gt;</div><div class="line">            </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面属性设置中<code>app:layout_scrollFlags=&quot;scroll|enterAlways&quot;</code>这个是必须要有，否则话滑动的时候<code>ToolBar</code>是不会滑动的。</p>
<p>那滑动隐藏<code>BottomNavigation</code>的这个<code>Behavior</code>该如何实现呢？其实很简单，我们在滑动列表的时候可以看到当<code>ToolBar</code>往上滑的时候<code>BottomNavigation</code>会同时往下滑，因此这里我可以把<code>ToolBar</code>作为<code>BottomNavigation</code>的依赖，<code>ToolBar</code>往上滑动多少<code>BottomNavigation</code>就同时往下滑动多少(这里我实现时保证了两者高度一致)。</p>
<p>既然知道了依赖关系也知道了滑动方向和滑动距离，再实现<code>Behavior</code>就简单多了，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BottomNavigationViewBehavior</span> <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span>&lt;<span class="title">View</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BottomNavigationViewBehavior</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BottomNavigationViewBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLayoutChild</span><span class="params">(CoordinatorLayout parent, View child, <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</div><div class="line"></div><div class="line">        ((CoordinatorLayout.LayoutParams) child.getLayoutParams()).topMargin = parent.getMeasuredHeight() - child.getMeasuredHeight();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onLayoutChild(parent, child, layoutDirection);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//因为Behavior只对CoordinatorLayout的直接子View生效，因此将依赖关系转移到AppBarLayout</span></div><div class="line">        <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> AppBarLayout;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//得到依赖View的滑动距离</span></div><div class="line">        <span class="keyword">int</span> top = ((AppBarLayout.Behavior)((CoordinatorLayout.LayoutParams)dependency.getLayoutParams()).getBehavior()).getTopAndBottomOffset();</div><div class="line">		<span class="comment">//因为BottomNavigation的滑动与ToolBar是反向的，所以取-top值</span></div><div class="line">        ViewCompat.setTranslationY(child, -top);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码中获取依赖视图<code>AppBarLayout</code>的滑动距离时需要注意几点：</p>
<ol>
<li>通过<code>AppBarLayout.getTranslationY()</code>无法获取到正确的滑动距离</li>
<li>通过<code>AppBarLayout.getTop()</code>无法获取到正确的滑动距离</li>
<li>最后查看源码后发现通过<code>AppBarLayout.Behavior.getTopAndBottomOffset()</code>可以获得正确的滑动距离值</li>
</ol>
<p>现在<code>Behavior</code>实现了，我们再来看完整的布局文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appBarLayout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolBar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@android:color/holo_blue_dark"</span></div><div class="line">            <span class="attr">app:title</span>=<span class="string">"ToolBar Title"</span></div><div class="line">            <span class="attr">app:titleTextColor</span>=<span class="string">"@android:color/white"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tabLayout"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@android:color/holo_blue_light"</span></div><div class="line">            <span class="attr">app:tabTextColor</span>=<span class="string">"@android:color/white"</span></div><div class="line">            <span class="attr">app:tabGravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">app:tabIndicatorColor</span>=<span class="string">"@android:color/white"</span></div><div class="line">            <span class="attr">app:tabSelectedTextColor</span>=<span class="string">"@android:color/holo_red_dark"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/viewpager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@android:color/white"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.BottomNavigationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/bottomNavigationView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@android:color/holo_blue_dark"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/bottom_menus"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"cn.ittiger.stickynavigation.behavior.BottomNavigationViewBehavior"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>对于布局中的<code>ToolBar</code>和<code>BottomNavigationView</code>也可以换成其他任意<code>View</code>来实现滑动隐藏效果。</p>
<p>Demo的完整代码在这 <a href="https://github.com/huyongli/StickyNavigation" target="_blank" rel="external">github地址</a></p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;多说无益，先上效果图img-material-design&quot;&gt;&lt;a href=&quot;#多说无益，先上效果图img-material-design&quot; class=&quot;headerlink&quot; title=&quot;多说无益，先上效果图img\material-design&quot;&gt;&lt;/a&gt;多说无益，先上效果图img\material-design&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/img/material-design/sticky_navigation.gif&quot; width = &quot;360&quot; height = &quot;640&quot; alt=&quot;图片名称&quot; align=center /&gt;&lt;/p&gt;
&lt;p&gt;这个效果其实是和&lt;code&gt;SegmentFault&lt;/code&gt;的首页效果是一样的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/huyongli/StickyNavigation&quot;&gt;Demo github地址戳这里&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;来由&quot;&gt;&lt;a href=&quot;#来由&quot; class=&quot;headerlink&quot; title=&quot;来由&quot;&gt;&lt;/a&gt;来由&lt;/h3&gt;
    
    </summary>
    
      <category term="Material Design" scheme="http://ittiger.cn/categories/Material-Design/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="Behavior" scheme="http://ittiger.cn/tags/Behavior/"/>
    
      <category term="Material Design" scheme="http://ittiger.cn/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>自定义Behavior实现快速返回效果</title>
    <link href="http://ittiger.cn/Custom-Behavior-to-fast-back.html"/>
    <id>http://ittiger.cn/Custom-Behavior-to-fast-back.html</id>
    <published>2017-02-28T03:22:00.000Z</published>
    <updated>2017-03-09T07:05:36.206Z</updated>
    
    <content type="html"><![CDATA[<p>Behavior是Android Design包中出现的一个概念，Android Design包中很多控件的动画效果都是使用Behavior实现的，所以想要更好的实现Material Design风格的应用就有必要弄清楚Behavior。这篇文章从简单开始，介绍如何自定义Behavior以实现快速返回的效果。</p>
<p>还是先看下最终实现的效果<br><img src="/img/back-top-behavior.gif" width="360" height="640" alt="图片名称" align="center"></p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>先看官方介绍<a href="https://developer.android.google.cn/reference/android/support/design/widget/CoordinatorLayout.Behavior.html" target="_blank" rel="external">https://developer.android.google.cn/reference/android/support/design/widget/CoordinatorLayout.Behavior.html</a></p>
<blockquote>
<blockquote>
<p>Interaction behavior plugin for child views of CoordinatorLayout.</p>
<p>A Behavior implements one or more interactions that a user can take on a child view. These interactions may include drags, swipes, flings, or any other gestures.</p>
</blockquote>
</blockquote>
<p>上面的介绍说Behavior是CoordinatorLayout子视图的一个交互插件，它可以为子视图实现一个或多个交互，这些交互包括拖拽，滑动或其他的手势操作。</p>
<p>通过上面的介绍我们知道Behavior是作用于CoordinatorLayout子视图的，而CoordinatorLayout我们可以把它看做一个FrameLayout。</p>
<p>根据我的理解来说Behavior其实就是一系列手势操作行为的回调，通过这些回调来处理CoordinatorLayout子视图的手势操作。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>用过Android Design库中AppBarLayout与NestedScrollView这两个类的同学应该知道，这两个类一起使用会产生很漂亮的滑动效果，这也是Android库中对Behavior的一个很典型的应用。而对于Behavior的使用，也可以参考这两个类的两种使用方式：</p>
<ol>
<li>为CoordinatorLayout的直接子View设置app:layout_behavior=“behavior完全类名”</li>
<li>为CoordinatorLayout的某个子View设置默认Behavior，设置方式是在该View的类声明上添加注解<code>@CoordinatorLayout.DefaultBehavior(Behavior类.class)</code></li>
</ol>
<h2 id="Behavior相关方法"><a href="#Behavior相关方法" class="headerlink" title="Behavior相关方法"></a>Behavior相关方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackTopBehavior</span> <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        <span class="comment">//必须实现此构造方法，因为CoordinatorLayout中初始化Behavior时是通过反射调用此构造来进行初始化的</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.layoutDependsOn(parent, child, dependency);</div><div class="line">        <span class="comment">//判断视图child进行layout布局时是否依赖于某个特定的View dependency</span></div><div class="line">        <span class="comment">//child是指应用此Behavior的View，dependency是触发执行此Behavior的视图并与child进行相关交互，也就是上面所说的是child的依赖</span></div><div class="line">        <span class="comment">//此方法在CoordinatorLayout进行request layout时至少会调用一次</span></div><div class="line">        <span class="comment">//如果返回true，CoordinatorLayout会总是在依赖视图dependency layout完成之后对child视图进行layout布局</span></div><div class="line">        <span class="comment">//同时如果依赖视图dependency的layout或position发生变化，CoordinatorLayout会调用onDependentViewChanged</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onDependentViewChanged(parent, child, dependency);</div><div class="line">        <span class="comment">//此方法的调用时机参考上面的方法layoutDependsOn的说明</span></div><div class="line">        <span class="comment">//当child的依赖视图dependency发生layout变化后，如果想对child布局(child's size or position)做出相应变化则返回true否则返回false，具体对child如何update则需要在onLayoutChild中进行实现</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDependentViewRemoved</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.onDependentViewRemoved(parent, child, dependency);</div><div class="line">        <span class="comment">//当child的依赖视图dependency从其parent中remove掉后会调用此方法</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMeasureChild</span><span class="params">(CoordinatorLayout parent, View child, <span class="keyword">int</span> parentWidthMeasureSpec, <span class="keyword">int</span> widthUsed, <span class="keyword">int</span> parentHeightMeasureSpec, <span class="keyword">int</span> heightUsed)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onMeasureChild(parent, child, parentWidthMeasureSpec, widthUsed, parentHeightMeasureSpec, heightUsed);</div><div class="line">        <span class="comment">//当测量CoordinatorLayout的子视图child时调用此方法</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLayoutChild</span><span class="params">(CoordinatorLayout parent, View child, <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onLayoutChild(parent, child, layoutDirection);</div><div class="line">        <span class="comment">//当对CoordinatorLayout的子视图child进行layout布局时会调用此方法</span></div><div class="line">        <span class="comment">//当child的依赖视图layout结束之后，会调用此方法对child进行layout布局</span></div><div class="line">        <span class="comment">//如果onDependentViewChanged中返回了true，则需要在此方法中对child视图进行update</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);</div><div class="line">        <span class="comment">//滑动开始调用，返回true表示此Behavior接收此滑动，才会有后续的滑动处理</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View target)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.onStopNestedScroll(coordinatorLayout, child, target);</div><div class="line">        <span class="comment">//滑动结束调用</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed, <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</div><div class="line">        <span class="comment">//滑动过程中调用</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View target, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);</div><div class="line">       <span class="comment">//滑动过程中，在child自身消费掉此次滑动的distance之前调用此方法</span></div><div class="line">       <span class="comment">//onNestedPreScroll is called each time the nested scroll is updated by the nested scrolling child</span></div><div class="line">       <span class="comment">// before the nested scrolling child has consumed the scroll distance itself</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNestedFling</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY, <span class="keyword">boolean</span> consumed)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onNestedFling(coordinatorLayout, child, target, velocityX, velocityY, consumed);</div><div class="line">        <span class="comment">//快速滑动时调用此方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面就是Behavior中比较常用比较重要的一些方法。</p>
<h2 id="自定义Behavior"><a href="#自定义Behavior" class="headerlink" title="自定义Behavior"></a>自定义Behavior</h2><p>我要实现的是在在列表上滑时，显示快速返回按钮，列表下滑时隐藏快速返回按钮，当快速返回按钮显示时，点击该按钮，列表会自动滑动到顶部。</p>
<p>快速返回按钮我用的是<code>Android Design</code>中的<code>FloatingActionButton</code>,其实在<code>FloatingActionButton</code>中设置了默认的<code>Behavior</code>，但是这个默认的<code>Behavior</code>是与<code>SnackBar</code>结合使用的，因此我可以直接继承<code>FloatingActionButton.Behavior</code>复写其中的相关方法实现我们所要的效果，这样可以减少很多工作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackTopBehavior</span> <span class="keyword">extends</span> <span class="title">FloatingActionButton</span>.<span class="title">Behavior</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BackTopBehavior"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackTopBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, FloatingActionButton child, View directTargetChild, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL;<span class="comment">//垂直方向滑动</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, FloatingActionButton child, View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed, <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dyConsumed &gt; <span class="number">0</span> &amp;&amp; dyUnconsumed == <span class="number">0</span>) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"上滑中。。。"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dyConsumed == <span class="number">0</span> &amp;&amp; dyUnconsumed &gt; <span class="number">0</span>) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"到边界了还在上滑。。。"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dyConsumed &lt; <span class="number">0</span> &amp;&amp; dyUnconsumed == <span class="number">0</span>) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"下滑中。。。"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dyConsumed == <span class="number">0</span> &amp;&amp; dyUnconsumed &lt; <span class="number">0</span>) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"到边界了，还在下滑。。。"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((dyConsumed &gt; <span class="number">0</span> &amp;&amp; dyUnconsumed == <span class="number">0</span>) || (dyConsumed == <span class="number">0</span> &amp;&amp; dyUnconsumed &gt; <span class="number">0</span>) &amp;&amp; child.getVisibility() != View.VISIBLE) &#123;</div><div class="line">            child.show();<span class="comment">//上滑的时候显示按钮</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>((dyConsumed &lt; <span class="number">0</span> &amp;&amp; dyUnconsumed == <span class="number">0</span>) || (dyConsumed == <span class="number">0</span> &amp;&amp; dyUnconsumed &lt; <span class="number">0</span>) &amp;&amp; child.getVisibility() != View.GONE) &#123;</div><div class="line">            child.hide();<span class="comment">//下滑的时候因此按钮</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样实现起来是不是感觉很简单，如果不用<code>Behavior</code>的话，需要自己自定义View，并对滑动事件进行处理，实现起来肯定比<code>Behavior</code>方式要费劲。</p>
<p>剩下的布局和Activity代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackTopBehaviorActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    CommonRecyclerView mRecyclerView;</div><div class="line">    LinearLayoutManager mLayoutManager;</div><div class="line">    FloatingActionButton mFloatingActionButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_backtop_behavior);</div><div class="line">        mFloatingActionButton = (FloatingActionButton) findViewById(R.id.floatingActionButton);</div><div class="line">        mFloatingActionButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                mLayoutManager.smoothScrollToPosition(mRecyclerView, <span class="keyword">null</span> , <span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        initRecyclerView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRecyclerView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        mRecyclerView = (CommonRecyclerView) findViewById(R.id.recyclerView);</div><div class="line">        mLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">        mRecyclerView.setLayoutManager(mLayoutManager);</div><div class="line">        mRecyclerView.addItemDecoration(<span class="keyword">new</span> SpacesItemDecoration(<span class="number">5</span>));</div><div class="line"></div><div class="line">        List&lt;String&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i ++) &#123;</div><div class="line">            data.add(<span class="string">"数据"</span> + (i + <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        StringListAdapter mAdapter = <span class="keyword">new</span> StringListAdapter(<span class="keyword">this</span>, data);</div><div class="line">        mRecyclerView.setAdapter(mAdapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">app:title</span>=<span class="string">"@string/app_name"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">app:titleTextColor</span>=<span class="string">"@android:color/white"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">cn.ittiger.demo.ui.CommonRecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recyclerView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span></div><div class="line">        <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/floatingActionButton"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/d_15"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@android:drawable/stat_sys_upload_done"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"cn.ittiger.demo.behavior.BackTopBehavior"</span></div><div class="line">        <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways|snap"</span></div><div class="line">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Demo的完整代码戳这里"><a href="#Demo的完整代码戳这里" class="headerlink" title="Demo的完整代码戳这里"></a>Demo的完整代码<a href="https://github.com/huyongli/AndroidDemo/blob/master/app/src/main/java/cn/ittiger/demo/behavior/BackTopBehaviorActivity.java" target="_blank" rel="external">戳这里</a></h4><hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Behavior是Android Design包中出现的一个概念，Android Design包中很多控件的动画效果都是使用Behavior实现的，所以想要更好的实现Material Design风格的应用就有必要弄清楚Behavior。这篇文章从简单开始，介绍如何自定义Behavior以实现快速返回的效果。&lt;/p&gt;
&lt;p&gt;还是先看下最终实现的效果&lt;br&gt;&lt;img src=&quot;/img/back-top-behavior.gif&quot; width = &quot;360&quot; height = &quot;640&quot; alt=&quot;图片名称&quot; align=center /&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Material Design" scheme="http://ittiger.cn/categories/Material-Design/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="Behavior" scheme="http://ittiger.cn/tags/Behavior/"/>
    
      <category term="Material Design" scheme="http://ittiger.cn/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>自定义实现微信通讯录效果View</title>
    <link href="http://ittiger.cn/Imitate-WeiXin-contact-view.html"/>
    <id>http://ittiger.cn/Imitate-WeiXin-contact-view.html</id>
    <published>2016-12-30T04:01:04.000Z</published>
    <updated>2016-12-30T10:51:30.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用App过程中，经常会有使用到联系人或城市列表的场景，其实这两种效果是一样的，都是右边有个索引列表，点击索引列表可跳转到指定字母开头的联系人或城市上去，同时向上滑动过程中头部会有个显示当前联系人首字母的界面固定不动。下面我以微信通讯录的效果作为例子，介绍我是如何实现一个这样效果自定义View的思路和过程。</p>
<h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>下面是我实现的最终效果图(GIF录制的不太好)，想看源代码的同学戳这里<a href="https://github.com/huyongli/IndexStickyView" target="_blank" rel="external">https://github.com/huyongli/IndexStickyView</a><br><img src="/img/indexStickyView_contact.gif" width="360" height="640" alt=""></p>
<a id="more"></a>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>既然要高仿实现微信通讯录的效果，那我们来先看看微信通讯录的效果<br><img src="/img/WeiXin_Contact.jpg" width="360" height="640" alt=""></p>
<h3 id="微信通讯录效果分析"><a href="#微信通讯录效果分析" class="headerlink" title="微信通讯录效果分析"></a>微信通讯录效果分析</h3><p>通过对微信通讯的效果进行分析之后，得出如下几点：</p>
<ol>
<li>通讯录展示分为两部分：<ol>
<li>主体：联系人列表</li>
<li>索引条：右边字母索引条</li>
</ol>
</li>
<li>主体联系人列表又分为三部分：<ol>
<li>联系人姓名和头像展示</li>
<li>根据联系人姓名的首字母进行分组，每组开头都会显示组名称(首字母)，并按字母顺序排序</li>
<li>列表开头的四个菜单，可以看成是一个特殊组数据，但是无组名称展示</li>
</ol>
</li>
<li>索引条中的内容与联系人列表中的所有组字母一样，同时点击索引条中的字母会将列表定位到当前字母所代表的联系人组，因此索引条的每个字母会与该字母所代表联系人组的位置有个一一对应关系</li>
<li>点击索引条中的<code>↑</code>会定位到列表头部的四个菜单上，因此可以将<code>↑</code>与四个菜单作为一组对应关系，只是该菜单组无组名称</li>
<li>点击索引条的某个字母时，列表中间会有该字母的提示显示</li>
<li>列表向上滑动时当前组的组名称固定在列表头部显示不动，直到下一组组名称滑动到顶部时，原来固定不动的组名称视图开始往上滑出，下一组组名称顶替上去</li>
</ol>
<h3 id="实现思路分析"><a href="#实现思路分析" class="headerlink" title="实现思路分析"></a>实现思路分析</h3><ol>
<li>既然要展示联系人列表，所以我采用<code>RecyclerView</code></li>
<li>滑动过程中顶部会有个视图固定不动，而<code>RecyclerView</code>滑动时不可能有子视图固定不动，因此我采用一个独立的视图<code>View</code>来作为这个固定不动的顶部视图显示组名称，在滑动过程中控制该<code>View</code>的显示和隐藏及其内容的变化，显然这个时候就需要父视图将<code>RecyclerView</code>和这个头部视图<code>View</code>包装起来</li>
<li>索引条因为是一个字母索引列表，因此我采用自定义<code>View</code>来绘制这些字母，在绘制过程中每个字母在索引条中要水平居中，而当列表头部有固定显示某个组名称(字母)时，索引条中对应的字母会有一个红色的圆作为该字母的背景，同时字母在圆中居中显示</li>
<li>点击索引条的字母时，列表中间出现的字母提示也采用一个独立的<code>View</code>显示，并将该<code>View</code>放到与<code>RecyclerView</code>所处的同一父视图。</li>
<li>索引条中的每个字母都需要与列表中对应组所在的位置索引有个一一对应的关系</li>
<li>因为微信通讯录中顶部的四个菜单与其他联系人具有不同的行为和展示方式，因此最终实现的<code>View</code>需要支持自定义显示不同的头部视图及对应的索引字母</li>
</ol>
<h1 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h1><p>下面我介绍下我在实现过程中的一些要点</p>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="用户数据"><a href="#用户数据" class="headerlink" title="用户数据"></a>用户数据</h3><p>一般应用在实现过程中，拿到的只有具体的联系人数据，而没有联系人对应的首字母，如果说我们自定义的<code>View</code>需要开发者将联系人对应的首字母也传进来，那这个自定义<code>View</code>写的也太lower了，对开发者太不友好了。因此我们最终实现的<code>View</code>所需要的数据就是开发者能拿到的联系人数据即可，这样的话就需要我们在实现<code>View</code>的过程中将开发者传递过来的联系人数据进行处理，然后得到我们在<code>RecyclerView</code>中展示的实际数据(联系人+字母索引)。</p>
<p>既然要对联系人数据进行处理得到该联系人的首字母，所以我定义了一个实体接口，所有的联系人数据实体必须实现这个接口以便告知我们需要对那个数据字段进行处理得到其索引首字母，具体接口如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseEntity</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 要索引的字段数据信息，例如联系人中对姓名进行索引，则此处返回姓名字段值</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">getIndexField</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="展示数据"><a href="#展示数据" class="headerlink" title="展示数据"></a>展示数据</h3><p>列表在展示过程中有两种类型数据，一种是联系人数据，一种是联系人所在组的组名称(索引值)，所以最终在<code>RecyclerView</code>中进行展示时使用用户数据实体<code>BaseEntity</code>是无法达到这种展示效果的，因此我定义了一个<code>RecyclerView</code>实际展示数据的实体类，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexStickyEntity</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前数据项的类型，自动转换赋值</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mItemType = ItemType.ITEM_TYPE_CONTENT;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前数据的索引值，自动转换赋值(索引条中显示的文字)</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String mIndexValue;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 索引视图显示的索引名称（组名称）</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String mIndexName;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 原始数据，用户实际展示的数据,用于视图的绑定</div><div class="line">     * 当次值为null时，则表示此实体代表一个Index数据</div><div class="line">     * T extends BaseEntity</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> T mOriginalData;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前数据项的拼音</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String mPinYin;</div><div class="line"></div><div class="line">	...  setter &amp; getter</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemType</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 列表中普通数据项类型，例如联系人列表中的：联系人信息项</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM_TYPE_CONTENT = <span class="number">1000000</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 列表中索引项类型，例如联系人列表中的：A,B,C...等索引数据</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM_TYPE_INDEX = <span class="number">2000000</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 列表中增加头部索引数据(如自定义的常用联系人)</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM_TYPE_INDEX_HEADER = <span class="number">3000000</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 列表中增加底部索引数据</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM_TYPE_INDEX_FOOTER = <span class="number">4000000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="用户数据-–-gt-展示数据"><a href="#用户数据-–-gt-展示数据" class="headerlink" title="用户数据 –&gt;展示数据"></a>用户数据 –&gt;展示数据</h3><p>在拿到用户的联系人数据后，进行转换处理得到真实展示数据，实现如下，代码中注释比较清晰，就不一一解释其实现逻辑了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertHelper</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 转换过程中，如果待索引字段信息为非字母串，则将其索引值设为：#</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDEX_SPECIAL = <span class="string">"#"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	    <span class="comment">//转换后得到的实际展示数据列表，包括联系人数据+组名称数据(索引名称)</span></div><div class="line">        <span class="keyword">private</span> List&lt;IndexStickyEntity&lt;T&gt;&gt; mIndexStickyEntities = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">//索引条中展示的数据列表</span></div><div class="line">        <span class="keyword">private</span> List&lt;String&gt; mIndexValueList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">//索引条中展示数据与对应组在列表中位置索引的一一映射</span></div><div class="line">        <span class="keyword">private</span> Map&lt;String, Integer&gt; mIndexValuePositionMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">public</span> List&lt;IndexStickyEntity&lt;T&gt;&gt; getIndexStickyEntities() &#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> mIndexStickyEntities;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getIndexValueList</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> mIndexValueList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getIndexValuePositionMap</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> mIndexValuePositionMap;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//拿到数据后调用此方法进行数据转换处理</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">ConvertResult&lt;T&gt; <span class="title">transfer</span><span class="params">(List&lt;T&gt; list)</span> </span>&#123;</div><div class="line"></div><div class="line">        ConvertResult&lt;T&gt; convertResult = <span class="keyword">new</span> ConvertResult&lt;T&gt;();</div><div class="line">		<span class="comment">//使用TreeMap自动按照Key(字母索引值)进行排序</span></div><div class="line">        TreeMap&lt;String, List&lt;IndexStickyEntity&lt;T&gt;&gt;&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;&gt;(ComparatorFactory.indexValueComparator());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</div><div class="line">            IndexStickyEntity&lt;T&gt; entity = originalEntityToIndexEntity(list.get(i));</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(treeMap.containsKey(entity.getIndexValue())) &#123;<span class="comment">//Map中已存在此索引值</span></div><div class="line">                treeMap.get(entity.getIndexValue()).add(entity);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                List&lt;IndexStickyEntity&lt;T&gt;&gt; indexStickyEntities = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                indexStickyEntities.add(entity);</div><div class="line">                treeMap.put(entity.getIndexValue(), indexStickyEntities);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(String indexValue : treeMap.keySet()) &#123;</div><div class="line">	        <span class="comment">//创建组名称展示数据实体</span></div><div class="line">            IndexStickyEntity&lt;T&gt; indexValueEntity = createIndexEntity(indexValue, indexValue);</div><div class="line"></div><div class="line">            <span class="comment">//将索引值添加到索引值列表中</span></div><div class="line">            convertResult.getIndexValueList().add(indexValue);</div><div class="line">            <span class="comment">//按顺序将索引实体添加到列表中</span></div><div class="line">            convertResult.getIndexStickyEntities().add(indexValueEntity);</div><div class="line">            <span class="comment">//将索引值与索引值在结果列表中的位置进行映射</span></div><div class="line">            convertResult.getIndexValuePositionMap().put(indexValue, convertResult.getIndexStickyEntities().size() - <span class="number">1</span>);</div><div class="line"></div><div class="line">            <span class="comment">//得到当前索引值下的索引数据实体</span></div><div class="line">            List&lt;IndexStickyEntity&lt;T&gt;&gt; indexStickyEntities = treeMap.get(indexValue);</div><div class="line">            <span class="comment">//对数据实体按自然进行排序</span></div><div class="line">            Collections.sort(indexStickyEntities, ComparatorFactory.&lt;T&gt;indexEntityComparator());</div><div class="line">            <span class="comment">//将排序后的实体列表按顺序加入到结果列表中</span></div><div class="line">            convertResult.getIndexStickyEntities().addAll(indexStickyEntities);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> convertResult;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 原始数据转换成展示的索引数据</div><div class="line">     * <span class="doctag">@param</span> originalEntity</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">IndexStickyEntity&lt;T&gt; <span class="title">originalEntityToIndexEntity</span><span class="params">(T originalEntity)</span> </span>&#123;</div><div class="line"></div><div class="line">        IndexStickyEntity&lt;T&gt; entity = <span class="keyword">new</span> IndexStickyEntity&lt;&gt;();</div><div class="line">        T item = originalEntity;</div><div class="line">        String indexFieldName = item.getIndexField();</div><div class="line">        String pinyin = PinYinHelper.getPingYin(indexFieldName);</div><div class="line">        String indexValue;</div><div class="line">        <span class="keyword">if</span>(PinYinHelper.isLetter(pinyin)) &#123;<span class="comment">//首字符是否为字母</span></div><div class="line">            indexValue = pinyin.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//非字母以#代替</span></div><div class="line">            indexValue = INDEX_SPECIAL;</div><div class="line">        &#125;</div><div class="line">        entity.setPinYin(pinyin);</div><div class="line">        entity.setOriginalData(item);</div><div class="line">        entity.setIndexValue(indexValue);</div><div class="line">        entity.setIndexName(indexValue);</div><div class="line">        <span class="keyword">return</span> entity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据索引值创建索引实体对象</div><div class="line">     * <span class="doctag">@param</span> indexValue</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends BaseEntity&gt; <span class="function">IndexStickyEntity&lt;T&gt; <span class="title">createIndexEntity</span><span class="params">(String indexValue, String indexName)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//根据索引值创建索引实体对象</span></div><div class="line">        IndexStickyEntity&lt;T&gt; indexValueEntity = <span class="keyword">new</span> IndexStickyEntity&lt;&gt;();</div><div class="line">        indexValueEntity.setIndexValue(indexValue);</div><div class="line">        indexValueEntity.setPinYin(indexValue);</div><div class="line">        indexValueEntity.setIndexName(indexName);</div><div class="line">        indexValueEntity.setItemType(ItemType.ITEM_TYPE_INDEX);</div><div class="line">        <span class="keyword">return</span> indexValueEntity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="SideBar实现"><a href="#SideBar实现" class="headerlink" title="SideBar实现"></a>SideBar实现</h1><h3 id="SideBar绘制"><a href="#SideBar绘制" class="headerlink" title="SideBar绘制"></a>SideBar绘制</h3><ol>
<li>初始化<code>SideBar</code>相关绘制参数</li>
<li>根据索引列表计算<code>SideBar</code>的实际高度，并得到<code>SideBar</code>的最终高度</li>
<li>根据<code>SideBar</code>高度计算其每项的高度</li>
<li>绘制所有的索引值到视图上，并根据选中情况绘制当前选项的圆形背景</li>
</ol>
<p>关键代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> height = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    <span class="keyword">if</span> (mValueList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//计算SideBar的实际高度</span></div><div class="line">        mCalViewHeight = (<span class="keyword">int</span>) (((mValueList.size() - <span class="number">1</span>) * mTextPaint.getTextSize() + mFocusTextPaint.getTextSize()) + (mValueList.size() + <span class="number">1</span>) * mTextSpace);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (mCalViewHeight &gt; height) &#123;<span class="comment">//实际高度超过可用高度</span></div><div class="line">        mCalViewHeight = height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(mCalViewHeight, MeasureSpec.EXACTLY));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    <span class="keyword">if</span>(mValueList.size() == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//计算每项的高度</span></div><div class="line">    mItemHeight = ((<span class="keyword">float</span>) getHeight()) / mValueList.size();</div><div class="line"></div><div class="line">    <span class="keyword">float</span> radius = Math.min(getWidth() / <span class="number">2</span>, mItemHeight / <span class="number">2</span>);<span class="comment">//选中状态时圆形背景半径</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mValueList.size(); i++) &#123;</div><div class="line">        <span class="keyword">if</span>(mSelectPosition == i) &#123;</div><div class="line">	        <span class="comment">//计算文本垂直居中的基准线</span></div><div class="line">            <span class="keyword">float</span> baseline = mItemHeight / <span class="number">2</span> + (mFocusTextPaint.getFontMetrics().descent - mFocusTextPaint.getFontMetrics().ascent) / <span class="number">2</span> - mFocusTextPaint.getFontMetrics().descent;</div><div class="line">            canvas.drawCircle(getWidth() / <span class="number">2</span>, mItemHeight / <span class="number">2</span> + mItemHeight * i, radius, mFocusTextBgPaint);</div><div class="line">            canvas.drawText(mValueList.get(i), getWidth() / <span class="number">2</span>, baseline + mItemHeight * i, mFocusTextPaint);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">float</span> baseline = mItemHeight / <span class="number">2</span> + (mTextPaint.getFontMetrics().descent - mTextPaint.getFontMetrics().ascent) / <span class="number">2</span> - mTextPaint.getFontMetrics().descent;</div><div class="line">            canvas.drawText(mValueList.get(i), getWidth() / <span class="number">2</span>, baseline + mItemHeight * i, mTextPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="点击SideBar选中"><a href="#点击SideBar选中" class="headerlink" title="点击SideBar选中"></a>点击SideBar选中</h3><p><code>SideBar</code>绘制成功后，在使用过程中还有一个重要的场景需要实现，那就是我们点击<code>SideBar</code>的时候要知道我们当前点击的是<code>SideBar</code>中的哪个选项，具体实现思路是这样的：根据当前触摸的y坐标(其实是相对于视图坐标系)和每个选项的高度计算当前触摸点在哪个选项内，具体实现代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="keyword">int</span> touchPosition = getPositionForPointY(event.getY());</div><div class="line">    <span class="keyword">if</span>(touchPosition &lt; <span class="number">0</span> || touchPosition &gt;= mValueList.size()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(mOnSideBarTouchListener != <span class="keyword">null</span>) &#123;</div><div class="line">	    <span class="comment">//此接口监听主要用于列表跳转到对应的组</span></div><div class="line">        mOnSideBarTouchListener.onSideBarTouch(v, event, touchPosition);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">            <span class="keyword">if</span>(touchPosition != mSelectPosition) &#123;</div><div class="line">                setSelectPosition(touchPosition);<span class="comment">//设置选中</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据点击的y坐标计算得到当前选中的是哪个选项</div><div class="line"> * <span class="doctag">@param</span> pointY</div><div class="line"> * <span class="doctag">@return</span>      没选中则返回-1</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getPositionForPointY</span><span class="params">(<span class="keyword">float</span> pointY)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(mValueList.size() &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//根据手按下的纵坐标与每个选项的高度计算当前所在项的索引</span></div><div class="line">    <span class="keyword">int</span> position = (<span class="keyword">int</span>) (pointY / mItemHeight);</div><div class="line">    <span class="keyword">if</span>(position &lt; <span class="number">0</span>) &#123;</div><div class="line">        position = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(position &gt; mValueList.size() - <span class="number">1</span>) &#123;</div><div class="line">        position = mValueList.size() - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> position;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="点击SideBar某项时跳转列表到对应组"><a href="#点击SideBar某项时跳转列表到对应组" class="headerlink" title="点击SideBar某项时跳转列表到对应组"></a>点击SideBar某项时跳转列表到对应组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSideBarTouch</span><span class="params">(View v, MotionEvent event, <span class="keyword">int</span> touchPosition)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">            <span class="keyword">if</span>(touchPosition != mSideBar.getSelectPosition()) &#123;</div><div class="line">                <span class="keyword">if</span>(touchPosition == <span class="number">0</span>) &#123;</div><div class="line">                    mLinearLayoutManager.scrollToPosition(<span class="number">0</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">int</span> recyclerViewPosition = getScrollPositionBySideBarSelectPosition(touchPosition);</div><div class="line">                    mLinearLayoutManager.scrollToPositionWithOffset(recyclerViewPosition, <span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="固定头部视图处理"><a href="#固定头部视图处理" class="headerlink" title="固定头部视图处理"></a>固定头部视图处理</h1><h3 id="头部显示逻辑"><a href="#头部显示逻辑" class="headerlink" title="头部显示逻辑"></a>头部显示逻辑</h3><ol>
<li>因为固定不动的头部视图(暂且叫做<code>mStickyHeaderView</code>其视图实现与组名称视图完全一样)是在<code>RecyclerView</code>的上面，所以当其显示时会遮盖掉<code>RecyclerView</code>的第一个可见项。<font color="red">——这个点很重要</font></li>
<li>获取<code>RecyclerView</code>的第一个可见项的实体数据<code>IndexStickyEntity</code><ol>
<li>如果当前数据的组名称为空，则不显示头部视图<code>mStickyHeaderView</code>，要注意的是前面我在转换数据的时候会给所有普通联系人实体对象都会设置组名称(如果存在)</li>
<li>如果当前数据的组名称不为空，则显示头部视图<code>mStickyHeaderView</code>并同时更新其显示内容</li>
</ol>
</li>
<li>滚动过程中获取<code>RecyclerView</code>列表中的第二个可见项的实体数据<code>IndexStickyEntity</code>，比如叫做：<code>secondVisibleEntity</code><ol>
<li>如果<code>secondVisibleEntity.getItemType() == ItemType.ITEM_TYPE_INDEX</code>,即为组名称视图(索引视图)，此时说明第二组数据已经滚动上来了，需要将固定在头部的<code>mStickyHeaderView</code>视图随着滚动操作慢慢的滑出界面变成不可见，同时<code>secondVisibleEntity</code>则会慢慢滚动到<code>mStickyHeaderView</code>原来所在的位置，此时在界面上看着就像是第二组的组名称视图慢慢的替换了固定在顶部的<code>mStickyHeaderView</code></li>
<li>如果<code>secondVisibleEntity.getItemType() != ItemType.ITEM_TYPE_INDEX</code>则需要将<code>mStickyHeaderView</code>恢复到初始位置。因为当<code>secondVisibleEntity</code>滚动到<code>mStickyHeaderView</code>原来所在的位置后，此时第一个可见项变成了<code>secondVisibleEntity</code>，而此时的第二个可见项则变成了普通的联系人视图比如叫<code>mContactView</code>，而此时列表还会继续往上滚动，随着滚动<code>secondVisibleEntity</code>会慢慢的变成不可见，而<code>mStickyHeaderView</code>已经滑出界面不可见了，所以当<code>secondVisibleEntity.getItemType() != ItemType.ITEM_TYPE_INDEX</code>则需要将<code>mStickyHeaderView</code>恢复到初始位置显示新的组名称。</li>
</ol>
</li>
<li>列表滚动过程中还需要根据第一个可见项的索引值更新索引条<code>SideBar</code>的选中项</li>
</ol>
<h3 id="滚动时头部显示逻辑实现"><a href="#滚动时头部显示逻辑实现" class="headerlink" title="滚动时头部显示逻辑实现"></a>滚动时头部显示逻辑实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewScrollListener</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">OnScrollListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</div><div class="line">        <span class="keyword">int</span> firstVisiblePosition = mLinearLayoutManager.findFirstVisibleItemPosition();</div><div class="line">        <span class="keyword">if</span>(firstVisiblePosition &lt; <span class="number">0</span> || firstVisiblePosition &gt;= mAdapter.getItemCount()) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        IndexStickyEntity entity = mAdapter.getItem(firstVisiblePosition);</div><div class="line">        mSideBar.setSelectPosition(mSideBar.getPosition(entity.getIndexValue()));</div><div class="line">        <span class="keyword">if</span>(TextUtils.isEmpty(entity.getIndexName()) &amp;&amp; mStickyHeaderView.itemView.getVisibility() == VISIBLE) &#123;</div><div class="line">            <span class="comment">//如果当前第一个可见项的索引值为空，则当前项可能是普通视图，非索引视图，因此此时需要将mStickyHeaderView进行隐藏</span></div><div class="line">            mStickyIndexValue = <span class="keyword">null</span>;</div><div class="line">            mStickyHeaderView.itemView.setVisibility(INVISIBLE);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//第一个可见项为索引视图，则需要显示头部固定的索引提示视图</span></div><div class="line">            showStickyHeaderView(entity.getIndexName(), firstVisiblePosition);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(firstVisiblePosition + <span class="number">1</span> &gt;= mAdapter.getItemCount()) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//获取第二个可见项实体对象</span></div><div class="line">        IndexStickyEntity secondVisibleEntity = mAdapter.getItem(firstVisiblePosition + <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(secondVisibleEntity.getItemType() == ItemType.ITEM_TYPE_INDEX) &#123;</div><div class="line">            <span class="comment">//第二个可见项是索引值视图</span></div><div class="line">            View secondVisibleItemView = mLinearLayoutManager.findViewByPosition(firstVisiblePosition + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(secondVisibleItemView.getTop() &lt;= mStickyHeaderView.itemView.getHeight() &amp;&amp; mStickyIndexValue != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//当secondVisibleItemView距顶部的距离 &lt;= mStickyHeaderView的高度时，mStickyHeaderView开始往上滑出</span></div><div class="line">                mStickyHeaderView.itemView.setTranslationY(secondVisibleItemView.getTop() - mStickyHeaderView.itemView.getHeight());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//第二个可见项不是索引值视图</span></div><div class="line">            <span class="keyword">if</span>(mStickyHeaderView.itemView.getTranslationY() != <span class="number">0</span>) &#123;<span class="comment">//有偏移</span></div><div class="line">                mStickyHeaderView.itemView.setTranslationY(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是我在模仿微信通讯录实现过程中的实现思路和关键点代码，具体实现细节和使用方式请看码：<a href="https://github.com/huyongli/IndexStickyView" target="_blank" rel="external">https://github.com/huyongli/IndexStickyView</a></p>
<p>喜欢的同学欢迎Star和fork</p>
<p>write by laohu<br>2016年12月30日</p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用App过程中，经常会有使用到联系人或城市列表的场景，其实这两种效果是一样的，都是右边有个索引列表，点击索引列表可跳转到指定字母开头的联系人或城市上去，同时向上滑动过程中头部会有个显示当前联系人首字母的界面固定不动。下面我以微信通讯录的效果作为例子，介绍我是如何实现一个这样效果自定义View的思路和过程。&lt;/p&gt;
&lt;h1 id=&quot;实现效果&quot;&gt;&lt;a href=&quot;#实现效果&quot; class=&quot;headerlink&quot; title=&quot;实现效果&quot;&gt;&lt;/a&gt;实现效果&lt;/h1&gt;&lt;p&gt;下面是我实现的最终效果图(GIF录制的不太好)，想看源代码的同学戳这里&lt;a href=&quot;https://github.com/huyongli/IndexStickyView&quot;&gt;https://github.com/huyongli/IndexStickyView&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/img/indexStickyView_contact.gif&quot; width = &quot;360&quot; height = &quot;640&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="IndexStickyView" scheme="http://ittiger.cn/tags/IndexStickyView/"/>
    
  </entry>
  
  <entry>
    <title>Android资源应用与适配标准</title>
    <link href="http://ittiger.cn/Android-resources-adapter.html"/>
    <id>http://ittiger.cn/Android-resources-adapter.html</id>
    <published>2016-11-19T07:28:31.000Z</published>
    <updated>2017-02-28T03:04:29.522Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容来自<code>Android</code>官网对<code>Android</code>开发过程中资源使用、资源适配、资源选择原理的介绍和建议。</p>
<a id="more"></a>
<h2 id="Android资源类型"><a href="#Android资源类型" class="headerlink" title="Android资源类型"></a>Android资源类型</h2><h3 id="Android项目结构"><a href="#Android项目结构" class="headerlink" title="Android项目结构"></a>Android项目结构</h3><p>一个<code>Android</code>项目有多重资源类型，我们一般都会将各种资源放入项目 <code>res/</code>目录的特定子目录下。例如，以下是一个简单项目的文件层次结构：<br><img src="/img/android-resource-adapter/resource_type.png" alt=""></p>
<p>正如我们在此示例中所看到的那样，<code>res/</code>目录包含所有资源（在子目录下）：一个图像资源、两个布局资源、启动器图标的 <code>mipmap/</code> 目录以及一个字符串资源文件。资源目录名称非常重要，将在<code>表 1</code> 中进行介绍。</p>
<blockquote>
<p><strong>注</strong>：如需了解有关使用 <code>mipmap</code><br>文件夹的详细信息，请参阅<a href="https://developer.android.com/tools/projects/index.html#mipmap" target="_blank" rel="external">管理项目概览</a>。</p>
</blockquote>
<h3 id="Android支持的资源类型"><a href="#Android支持的资源类型" class="headerlink" title="Android支持的资源类型"></a>Android支持的资源类型</h3><p><strong>表 1.</strong> 项目 <code>res/</code> 目录内支持的资源目录。</p>
<table>
<thead>
<tr>
<th>目录</th>
<th style="text-align:left">资源类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>animator/</code></td>
<td style="text-align:left">用于定义<a href="https://developer.android.com/guide/topics/graphics/prop-animation.html" target="_blank" rel="external">属性动画</a>的 XML文件。</td>
</tr>
<tr>
<td><code>anim/</code></td>
<td style="text-align:left">定义<a href="https://developer.android.com/guide/topics/graphics/view-animation.html#tween-animation" target="_blank" rel="external">渐变动画</a>的 XML 文件。（属性动画也可以保存在此目录中，但是为了区分这两种类型，属性动画首选 <code>animator/</code> 目录。）</td>
</tr>
<tr>
<td><code>color/</code></td>
<td style="text-align:left">用于定义颜色状态列表的 XML 文件。请参阅<a href="https://developer.android.com/guide/topics/resources/color-list-resource.html" target="_blank" rel="external">颜色状态列表资源</a></td>
</tr>
<tr>
<td><code>drawable/</code></td>
<td style="text-align:left">位图文件（<code>.png</code>、<code>.9.png</code>、<code>.jpg</code>、<code>.gif</code>）或编译为以下可绘制对象资源子类型的 XML 文件：<br>位图文件<br>九宫格（9-Patch）<br>状态列表<br>形状<br>动画可绘制对象<br>其他可绘制对象<br>请参阅<a href="https://developer.android.com/guide/topics/resources/drawable-resource.html" target="_blank" rel="external">可绘制对象资源</a></td>
</tr>
<tr>
<td><code>mipmap/</code></td>
<td style="text-align:left">适用于不同启动器图标密度的可绘制对象文件。如需了解有关使用 <code>mipmap/</code> 文件夹管理启动器图标的详细信息，请参阅<a href="https://developer.android.com/tools/projects/index.html#mipmap" target="_blank" rel="external">管理项目概览</a>。</td>
</tr>
<tr>
<td><code>layout/</code></td>
<td style="text-align:left">用于定义用户界面布局的 XML 文件。请参阅<a href="https://developer.android.com/guide/topics/resources/layout-resource.html" target="_blank" rel="external">布局资源</a></td>
</tr>
<tr>
<td><code>menu/</code></td>
<td style="text-align:left">用于定义应用菜单（如选项菜单、上下文菜单或子菜单）的 XML文件。请参阅<a href="https://developer.android.com/guide/topics/resources/menu-resource.html" target="_blank" rel="external">菜单资源</a>。</td>
</tr>
<tr>
<td><code>raw/</code></td>
<td style="text-align:left"><p>要以原始形式保存的任意文件。要使用原始<a href="https://developer.android.com/reference/java/io/InputStream.html" target="_blank" rel="external">InputStream</a>打开这些资源，请使用资源 ID（即 <code>R.raw.&lt;em&gt;filename&lt;/em&gt;</code>）调用 <a href="https://developer.android.com/reference/android/content/res/Resources.html#openRawResource(int" target="_blank" rel="external">Resources.openRawResource()</a>)<br>但是，如需访问原始文件名和文件层次结构，则可以考虑将某些资源保存在<code>assets/</code> 目录下（而不是 <code>res/raw/</code>）。<code>assets/</code> 中的文件没有资源 ID，因此您只能使用 <a href="https://developer.android.com/reference/android/content/res/AssetManager.html" target="_blank" rel="external">AssetManager</a> 读取这些文件。</p></td>
</tr>
<tr>
<td><code>values/</code></td>
<td style="text-align:left">包含字符串、整型数和颜色等简单值的 XML 文件。<br>其他 <code>res/</code> 子目录中的 XML资源文件是根据XML文件名定义单个资源，而 <code>values/</code> 目录中的文件可描述多个资源。对于此目录中的文件，<code>&lt;resources&gt;</code> 元素的每个子元素均定义一个资源。例如，<code>&lt;string&gt;</code> 元素创建<code>R.string</code> 资源，<code>&lt;color&gt;</code> 元素创建 <code>R.color</code>资源。<br>由于每个资源均用其自己的 XML元素定义，因此您可以根据自己的需要命名文件，并将不同的资源类型放在一个文件中。但是，为了清晰起见，您可能需要将独特的资源类型放在不同的文件中。<br>例如，对于可在此目录中创建的资源，下面给出了相应的文件名约定：<br>arrays.xml，用于资源数组（<a href="https://developer.android.com/guide/topics/resources/more-resources.html#TypedArray" target="_blank" rel="external">类型化数组</a>）。<br>colors.xml：<a href="https://developer.android.com/guide/topics/resources/more-resources.html#Color" target="_blank" rel="external">颜色值</a>。<br>dimens.xml：<a href="https://developer.android.com/guide/topics/resources/more-resources.html#Dimension" target="_blank" rel="external">尺寸值</a>。<br>strings.xml：<a href="https://developer.android.com/guide/topics/resources/string-resource.html" target="_blank" rel="external">字符串值</a>。<br>styles.xml：<a href="https://developer.android.com/guide/topics/resources/style-resource.html" target="_blank" rel="external">样式</a><br>请参阅<a href="https://developer.android.com/guide/topics/resources/string-resource.html" target="_blank" rel="external">字符串资源</a>、<a href="https://developer.android.com/guide/topics/resources/style-resource.html" target="_blank" rel="external">样式资源</a>和<a href="https://developer.android.com/guide/topics/resources/more-resources.html" target="_blank" rel="external">更多资源类型</a>。</td>
</tr>
<tr>
<td><code>xml/</code></td>
<td style="text-align:left">可以在运行时通过调用 <a href="https://developer.android.com/reference/android/content/res/Resources.html#getXml(int" target="_blank" rel="external">Resources.getXML()</a>) 读取的任意 XML 文件。各种 XML配置文件（如<a href="https://developer.android.com/guide/topics/search/searchable-config.html" target="_blank" rel="external">可搜索配置</a>）都必须保存在此处。</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>注意</strong>：切勿将资源文件直接保存在<code>res/</code>目录内，这会导致出现编译错误。</p>
</blockquote>
<p>如需了解有关某些资源类型的详细信息，请参阅<a href="https://developer.android.com/guide/topics/resources/available-resources.html" target="_blank" rel="external">资源类型</a>文档。</p>
<p>保存在<code>表 1</code>中定义的子目录下的资源是“默认”资源。即，这些资源定义应用的默认设计和内容。但是，采用<code>Android</code>技术的不同设备类型可能需要不同类型的资源。例如，如果设备的屏幕尺寸大于标准屏幕，则应提供不同的布局资源，以充分利用额外的屏幕空间。 或者，如果设备的语言设置不同，则应提供不同的字符串资源，以转换用户界面中的文本。 要为不同的设备配置提供这些不同资源，除了默认资源以外，您还需要提供备用资源。</p>
<h2 id="为项目提供备用资源"><a href="#为项目提供备用资源" class="headerlink" title="为项目提供备用资源"></a>为项目提供备用资源</h2><p><img src="/img/android-resource-adapter/resource_devices_diagram2.png" alt=""><br><strong>图 1</strong>. 两种不同的设备，均使用不同的布局资源。</p>
<p>几乎每个应用都应提供备用资源以支持特定的设备配置。 例如，对于不同的屏幕密度和语言，您应分别包括备用可绘制对象资源和备用字符串资源。 在运行时，<code>Android</code>会检测当前设备配置并为应用加载合适的资源。</p>
<p>为一组资源指定特定于配置的备用资源：</p>
<ol>
<li><p>在 <code>res/</code>中创建一个以<code>&lt;resources_name&gt;-&lt;config_qualifier&gt;</code>形式命名的新目录。</p>
<ul>
<li><code>&lt;resources_name&gt;</code> 是相应默认资源的目录名称（如<code>表 1</code>中所定义）。</li>
<li><code>&lt;qualifier&gt;</code> 是指定要使用这些资源的各个配置的名称（如<code>表 2</code>中所定义）。<br>您可以追加多个 <code>&lt;qualifier&gt;</code>。以短划线将其分隔。<blockquote>
<p><strong>注意</strong>：追加多个限定符时，必须按照<code>表 2</code> 中列出的相同顺序放置它们。如果限定符的顺序错误，则该资源将被忽略。  </p>
</blockquote>
</li>
</ul>
</li>
<li><p>将相应的备用资源保存在此新目录下。这些资源文件的名称必须与默认资源文件完全一样。</p>
</li>
</ol>
<p>例如，以下是一些默认资源和备用资源：<br><img src="/img/android-resource-adapter/resource_default.png" alt=""></p>
<p><code>hdpi</code>限定符表示该目录中的资源适用于屏幕密度较高的设备。其中每个可绘制对象目录中的图像已针对特定的屏幕密度调整大小，但是文件名完全相同。 这样一来，用于引用 <code>icon.png</code> 或<code>background.png</code> 图像的资源 ID 始终相同，但是 <code>Android</code> 会通过将设备配置信息与资源目录名称中的限定符进行比较，选择最符合当前设备的各个资源版本。</p>
<p>Android 支持若干配置限定符，您可以通过使用短划线分隔每个限定符，向一个目录名称添加多个限定符。表 2 按优先顺序列出了有效的配置限定符；如果对资源目录使用多个限定符，则必须按照表中列出的顺序将它们添加到目录名称。</p>
<h2 id="Android资源限定符"><a href="#Android资源限定符" class="headerlink" title="Android资源限定符"></a>Android资源限定符</h2><p><strong>表 2</strong>. 配置限定符名称。</p>
<table>
<thead>
<tr>
<th>配置</th>
<th style="text-align:center">限定符值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>MCC 和 MNC</td>
<td style="text-align:center">示例：<br> <code>mcc310</code><br> <code>&lt;nobr&gt;mcc310-mnc004&lt;/nobr&gt;</code><br> <code>mcc208-mnc00</code><br>等等</td>
<td style="text-align:left">移动国家代码 (MCC)，（可选）后跟设备 SIM卡中的移动网络代码 (MNC)。例如，<code>mcc310</code> 是指美国的任一运营商，<code>mcc310-mnc004</code> 是指美国的 Verizon公司，<code>mcc208-mnc00</code> 是指法国的 Orange公司。<br><br>如果设备使用无线电连接（GSM 手机），则 MCC 和 MNC 值来自 SIM卡。<br>也可以单独使用MCC（例如，将国家/地区特定的合法资源包括在应用中）。如果只需根据语言指定，则改用“语言和区域”<em></em>限定符（稍后进行介绍）。如果决定使用 MCC 和MNC 限定符，请谨慎执行此操作并测试限定符是否按预期工作。 <br><br>另请参阅配置字段 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#mcc" target="_blank" rel="external">mcc</a>和 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#mnc" target="_blank" rel="external">mnc</a>，这两个字段分别表示当前的移动国家代码和移动网络代码。</td>
</tr>
<tr>
<td>语言和区域</td>
<td style="text-align:center">示例：<br><code>en</code><br> <code>fr</code><br> <code>en-rUS</code><br> <code>fr-rFR</code><br> <code>fr-rCA</code><br>等等</td>
<td style="text-align:left">语言通过由两个字母组成的 <a href="http://www.loc.gov/standards/iso639-2/php/code_list.php" target="_blank" rel="external">ISO639-1</a> 语言代码定义，可以选择后跟两个字母组成的<a href="http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html" target="_blank" rel="external">ISO3166-1-alpha-2</a> 区域码（前带小写字母“<code>r</code>”）。<br><br>这些代码不区分大小写；<code>r</code>前缀用于区分区域码。<em></em>不能单独指定区域。<br><br>如果用户更改系统设置中的语言，它有可能在应用生命周期中发生改变。如需了解这会在运行期间给应用带来哪些影响，请参阅<a href="https://developer.android.com/guide/topics/resources/runtime-changes.html" target="_blank" rel="external">处理运行时变更</a>。<br><br>有关针对其他语言本地化应用的完整指南，请参阅<a href="https://developer.android.com/guide/topics/resources/localization.html" target="_blank" rel="external">本地化</a>。<br><br>另请参阅 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#locale" target="_blank" rel="external">locale</a> 配置字段，该字段表示当前的语言区域。</td>
</tr>
<tr>
<td>布局方向</td>
<td style="text-align:center"><code>ldrtl</code><br> <code>ldltr</code><br></td>
<td style="text-align:left">应用的布局方向。<code>ldrtl</code> 是指“布局方向从右到左”。<code>ldltr</code>是指“布局方向从左到右”，这是默认的隐式值。<br><br>它适用于布局、图片或值等任何资源。<br><br>例如，若要针对阿拉伯语提供某种特定布局，并针对任何其他“从右到左”语言（如波斯语或希伯来语）提供某种通用布局，则可编码如下：<img src="/img/android-resource-adapter/resource_default2.png" alt=""><br><br><strong>注</strong>：要为应用启用从右到左的布局功能，必须将<a href="https://developer.android.com/guide/topics/manifest/application-element.html#supportsrtl" target="_blank" rel="external">supportsRtl</a> 设置为 <code>&quot;true&quot;</code>，并将 <a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element.html#target" target="_blank" rel="external">targetSdkVersion</a> 设置为 17 或更高版本。<br><br><em>此项为 API 级别 17 中新增配置。</em></td>
</tr>
<tr>
<td>smallestWidth</td>
<td style="text-align:center"><code>sw&lt;N&gt;dp</code><br><br> 示例：<br><code>sw320dp</code><br><code>sw600dp</code><br><code>sw20dp</code><br>等等</td>
<td style="text-align:left">屏幕的基本尺寸，由可用屏幕区域的最小尺寸指定。具体来说，设备的 <code>smallestWidth</code>是屏幕可用高度和宽度的最小尺寸（您也可以将其视为屏幕的“最小可能宽度”）。无论屏幕的当前方向如何，您均可使用此限定符确保应用UI 的可用宽度至少为<code>&lt;N&gt;dp</code>。<br><br>例如，如果布局要求屏幕区域的最小尺寸始终至少为<code>600dp</code>，则可使用此限定符创建布局资源 <code>res/layout-sw600dp/</code>。仅当可用屏幕的最小尺寸至少为<code>600dp</code> 时，系统才会使用这些资源，而不考虑<code>600dp</code>所代表的边是用户所认为的高度还是宽度。<code>smallestWidth</code>是设备的固定屏幕尺寸特性；<strong>设备的 <code>smallestWidth</code>不会随屏幕方向的变化而改变</strong>。<br><br>设备的 <code>smallestWidth</code> 将屏幕装饰元素和系统 UI 考虑在内。例如，如果设备的屏幕上有一些永久性 UI 元素占据沿<code>smallestWidth</code>轴的空间，则系统会声明 <code>smallestWidth</code> 小于实际屏幕尺寸，因为这些屏幕像素不适用于您的 UI。<br><br>因此，使用的值应该是<em>布局所需要</em>的实际最小尺寸（通常，无论屏幕的当前方向如何，此值都是布局支持的“最小宽度”）。<br><br>以下是一些可用于普通屏幕尺寸的值：<br>320，适用于屏幕配置如下的设备：<br>240x320 ldpi（QVGA 手机）<br>320x480 mdpi（手机）<br>480x800 hdpi（高密度手机）<br>480，适用于 480x800 mdpi 之类的屏幕（平板电脑/手机）。<br>600，适用于 600x1024 mdpi 之类的屏幕（7 英寸平板电脑）。<br>720，适用于 720x1280 mdpi 之类的屏幕（10 英寸平板电脑）。<br><br>应用为多个资源目录提供不同的 smallestWidth 限定符值时，系统会使用最接近（但未超出）设备smallestWidth 的值。 <br><br><em>此项为 API 级别 13 中新增配置。</em> <br> <br>另请参阅 <a href="https://developer.android.com/guide/topics/manifest/supports-screens-element.html#requiresSmallest" target="_blank" rel="external">android:requiresSmallestWidthDp</a> 属性和 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#smallestScreenWidthDp" target="_blank" rel="external">smallestScreenWidthDp</a> 配置字段，前者声明与应用兼容的最小 smallestWidth；后者存放设备的 smallestWidth 值。<br><br>如需了解有关设计不同屏幕和使用此限定符的详细信息，请参阅<a href="https://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="external">支持多种屏幕</a>开发者指南。</td>
</tr>
<tr>
<td>可用宽度</td>
<td style="text-align:center"><code>w&lt;N&gt;dp</code><br><br>示例：<br><code>w720dp</code><br><code>w1024dp</code><br> 等等</td>
<td style="text-align:left">指定资源应该使用的最小可用屏幕宽度，以 <code>dp</code>为单位，由 <code>&amp;lt;N&amp;gt;</code> 值定义。在横向和纵向之间切换时，为了匹配当前实际宽度，此配置值也会随之发生变化。<br>br/&gt;应用为多个资源目录提供不同的此配置值时，系统会使用最接近（但未超出）设备当前屏幕宽度的值。此处的值考虑到了屏幕装饰元素，因此如果设备显示屏的左边缘或右边缘上有一些永久性 UI元素，考虑到这些 UI元素，它会使用小于实际屏幕尺寸的宽度值，这样会减少应用的可用空间。<br><br><em>此项为 API 级别 13 中新增配置。</em><br> <br>另请参阅<a href="https://developer.android.com/reference/android/content/res/Configuration.html#screenWidthDp" target="_blank" rel="external">screenWidthDp</a> 配置字段，该字段存放当前屏幕宽度。<br><br>如需了解有关设计不同屏幕和使用此限定符的详细信息，请参阅<a href="https://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="external">支持多种屏幕</a>开发者指南。</td>
</tr>
<tr>
<td>可用高度</td>
<td style="text-align:center"><code>h&lt;N&gt;dp</code><br><br> 示例：<br><code>h720dp</code><br> <code>h1024dp</code><br>等等</td>
<td style="text-align:left">指定资源应该使用的最小可用屏幕高度，以“dp”为单位，由 <code>&lt;N&gt;</code> 值定义。在横向和纵向之间切换时，为了匹配当前实际高度，此配置值也会随之发生变化。<br><br>应用为多个资源目录提供不同的此配置值时，系统会使用最接近（但未超出）设备当前屏幕高度的值。此处的值考虑到了屏幕装饰元素，因此如果设备显示屏的上边缘或下边缘有一些永久性 UI元素，考虑到这些 UI 元素，同时为减少应用的可用空间，它会使用小于实际屏幕尺寸的高度值。非固定的屏幕装饰元素（例如，全屏时可隐藏的手机状态栏）并不<em></em>在考虑范围内，标题栏或操作栏等窗口装饰也不在考虑范围内，因此应用必须准备好处理稍小于其所指定值的空间。<br><br><em>此项为 API 级别 13 中新增配置。</em><br><br>另请参阅<a href="https://developer.android.com/reference/android/content/res/Configuration.html#screenHeightDp" target="_blank" rel="external">screenHeightDp</a> 配置字段，该字段存放当前屏幕宽度。<br><br>如需了解有关设计不同屏幕和使用此限定符的详细信息，请参阅<a href="https://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="external">支持多种屏幕</a>开发者指南。</td>
</tr>
<tr>
<td>屏幕尺寸</td>
<td style="text-align:center"><code>small</code><br><code>normal</code><br> <code>large</code><br> <code>xlarge</code></td>
<td style="text-align:left"><code>small</code>：尺寸类似于低密度QVGA 屏幕的屏幕。小屏幕的最小布局尺寸约为320x426 dp 单位。例如，QVGA 低密度屏幕和WVGA高密度屏幕。<br><br><code>normal</code>：尺寸类似于中等密度HVGA 屏幕的屏幕。标准屏幕的最小布局尺寸约为320x470 dp 单位。例如，WQVGA低密度屏幕、HVGA 中等密度屏幕、WVGA高密度屏幕。<br><br><code>large</code>：尺寸类似于中等密度WVGA 屏幕的屏幕。大屏幕的最小布局尺寸约为 480x640 dp 单位。 例如，VGA 和 WVGA 中等密度屏幕。<br><br><code>xlarge</code>：明显大于传统中等密度HVGA 屏幕的屏幕。超大屏幕的最小布局尺寸约为720x960 dp 单位。在大多数情况下，屏幕超大的设备体积过大，不能放进口袋，最常见的是平板式设备。<em>API 级别 9 中的新增配置。</em><br><br><strong>注：使用尺寸限定符并不表示资源仅<em></em>适用于该尺寸的屏幕。如果没有为备用资源提供最符合当前设备配置的限定符，则系统可能使用其中最匹配的资源。</strong><br><br><strong>注意：如果所有资源均使用大于<em></em>当前屏幕的尺寸限定符，则系统<strong>不</strong>会使用这些资源，并且应用在运行时将会崩溃（例如，如果所有布局资源均用 <code>xlarge</code> 限定符标记，但设备是标准尺寸的屏幕）。</strong><br><br><em>此项为 API 级别 4 中新增配置。</em><br><br>如需了解详细信息，请参阅<a href="https://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="external">支持多种屏幕</a>。<br><br>另请参阅 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#screenLayout" target="_blank" rel="external">screenLayout</a> 配置字段，该字段表示屏幕是小尺寸、标准尺寸还是大尺寸。</td>
</tr>
<tr>
<td>屏幕纵横比</td>
<td style="text-align:center"><code>long</code><br><code>notlong</code></td>
<td style="text-align:left"><code>long</code>：宽屏，如 WQVGA、WVGA、FWVGA<br><code>notlong</code>：非宽屏，如 QVGA、HVGA 和 VGA<br><br><em>此项为 API 级别 4 中新增配置。</em><br><br>它完全基于屏幕的纵横比（宽屏较宽），而与屏幕方向无关。<br><br>另请参阅 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#screenLayout" target="_blank" rel="external">screenLayout</a> 配置字段，该字段指示屏幕是否为宽屏。</td>
</tr>
<tr>
<td>圆形屏幕</td>
<td style="text-align:center"><code>round</code><br><code>notround</code></td>
<td style="text-align:left"><code>round</code>：圆形屏幕，例如圆形可穿戴式设备<br><code>notround</code>：方形屏幕，例如手机或平板电脑<br><br><em>此项为 API 级别 23 中新增配置。</em><br> <br>另请参阅 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#isScreenRound(" target="_blank" rel="external">isScreenRound()</a>) 配置方法，其指示屏幕是否为宽屏。</td>
</tr>
<tr>
<td>屏幕方向</td>
<td style="text-align:center"><code>port</code><br><code>land</code></td>
<td style="text-align:left"><code>port</code>：设备处于纵向（垂直）<br><code>land</code>：设备处于横向（水平）<br><br>如果用户旋转屏幕，它有可能在应用生命周期中发生改变。如需了解这会在运行期间给应用带来哪些影响，请参阅<a href="https://developer.android.com/guide/topics/resources/runtime-changes.html" target="_blank" rel="external">处理运行时变更</a>。<br><br>另请参阅 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#orientation" target="_blank" rel="external">orientation</a> 配置字段，该字段指示当前的设备方向。</td>
</tr>
<tr>
<td>UI 模式</td>
<td style="text-align:center"><code>car</code><br> <code>desk</code><br> <code>television&lt;br/&gt;</code>appliance<code>`watch</code></td>
<td style="text-align:left"><code>car</code>：设备正在车载手机座上显示<br><code>desk</code>：设备正在桌面手机座上显示<br><code>television</code>：设备正在电视上显示，为用户提供“十英尺”体验，其UI 位于远离用户的大屏幕上，主要面向方向键或其他非指针式交互<br><code>appliance</code>：设备用作不带显示屏的装置<br><code>watch</code>：设备配有显示屏，戴在手腕上<br> <br><em>此项为 API 级别 8 中新增配置，API 13 中新增电视配置，API 20 中新增手表配置。</em><br> <br>如需了解应用在设备插入手机座或从中移除时的响应方式，请阅读<a href="https://developer.android.com/training/monitoring-device-state/docking-monitoring.html" target="_blank" rel="external">确定并监控插接状态和类型</a>。<br><br>如果用户将设备放入手机座中，它有可能在应用生命周期中发生改变。可以使用 <a href="https://developer.android.com/reference/android/app/UiModeManager.html&quot;&gt;UiModeManager" target="_blank" rel="external"></a> 启用或禁用其中某些模式。如需了解这会在运行期间给应用带来哪些影响，请参阅<a href="https://developer.android.com/guide/topics/resources/runtime-changes.html" target="_blank" rel="external">处理运行时变更</a>。</td>
</tr>
<tr>
<td>夜间模式</td>
<td style="text-align:center"><code>night</code><br> <code>notnight</code></td>
<td style="text-align:left"><code>night</code>：夜间<br><code>notnight</code>：白天<br> <br><em>此项为 API 级别 8 中新增配置。</em><br><br>如果夜间模式停留在自动模式（默认），它有可能在应用生命周期中发生改变。在这种情况下，该模式会根据当天的时间进行调整。可以使用<a href="https://developer.android.com/reference/android/app/UiModeManager.html" target="_blank" rel="external">UiModeManager</a> 启用或禁用此模式。如需了解这会在运行期间给应用带来哪些影响，请参阅<a href="https://developer.android.com/guide/topics/resources/runtime-changes.html" target="_blank" rel="external">处理运行时变更</a>。</td>
</tr>
<tr>
<td>屏幕像素密度 (dpi)</td>
<td style="text-align:center"><code>ldpi</code><br><code>mdpi</code><br><code>hdpi</code><br><code>xhdpi</code><br><code>xxhdpi</code><br><code>xxxhdpi</code><br> <code>nodpi</code><br> <code>tvdpi</code><br><code>anydpi</code></td>
<td style="text-align:left"><code>ldpi</code>：低密度屏幕；约为120dpi。<br><code>mdpi</code>：中等密度（传统 HVGA）屏幕；约为160dpi。<br><code>hdpi</code>：高密度屏幕；约为 240dpi。<br><code>xhdpi</code>：超高密度屏幕；约为 320dpi。<em>此项为 API级别 8 中新增配置</em><br><code>xxhdpi</code>：超超高密度屏幕；约为 480dpi。<em>此项为 API级别 16 中新增配置</em><br><code>xxxhdpi</code>：超超超高密度屏幕使用（仅限启动器图标，请参阅“支持多种屏幕”中的<a href="https://developer.android.com/guide/practices/screens_support.html#xxxhdpi-note" target="_blank" rel="external">注释</a>）；约为640dpi。<em>此项为 API级别 18 中新增配置</em><br><code>nodpi</code>：它可用于您不希望缩放以匹配设备密度的位图资源。<br><code>tvdpi</code>：密度介于 mdpi 和 hdpi 之间的屏幕；约为 213dpi。它并不是“主要”密度组，主要用于电视，而大多数应用都不需要它。对于大多数应用而言，提供 mdpi 和hdpi资源便已足够，系统将根据需要对其进行缩放。<em>此项为 API 级别 13 中新增配置</em><br><code>anydpi</code>：此限定符适合所有屏幕密度，其优先级高于其他限定符。这对于<a href="https://developer.android.com/training/material/drawables.html#VectorDrawables" target="_blank" rel="external">矢量可绘制对象</a>很有用。<em>此项为 API 级别 21 中新增配置</em> <br><br>六个主要密度之间的缩放比为 3:4:6:8:12:16（忽略tvdpi 密度）。因此，9x9 (ldpi) 位图相当于 12x12 (mdpi)、18x18 (hdpi)、24x24 (xhdpi) 位图，依此类推。 <br><br>如果您认为图像资源在电视或其他某些设备上呈现的效果不够好，而想尝试使用 tvdpi 资源，则缩放比例为1.33*mdpi。例如，mdpi屏幕的 100px x 100px 图像应该相当于 tvdpi 的133px x 133px。 <br> <br><strong>注：使用密度限定符并不表示资源仅适用于该密度的屏幕。如果没有为备用资源提供最符合当前设备配置的限定符，则系统可能使用其中<a href="">#BestMatch”&gt;最匹配</a>的资源。</strong><br><br>如需了解有关如何处理不同屏幕密度以及 Android 如何缩放位图以适应当前密度的详细信息，请参阅<a href="https://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="external">支持多种屏幕</a>。</td>
</tr>
<tr>
<td>触摸屏类型</td>
<td style="text-align:center"><code>notouch</code><br><code>finger</code></td>
<td style="text-align:left"><code>notouch</code>：设备没有触摸屏。<br><code>finger</code>：设备有一个专供用户通过手指直接与其交互的触摸屏。<br> <br>另请参阅 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#touchscreen" target="_blank" rel="external">touchscreen</a> 配置字段，该字段指示设备上的触摸屏类型。</td>
</tr>
<tr>
<td>键盘可用性</td>
<td style="text-align:center"><code>keysexposed</code><br> <code>keyshidden</code><br> <code>keyssoft</code></td>
<td style="text-align:left"><code>keysexposed</code>：设备具有可用的键盘。如果设备启用了软键盘（不无可能），那么即使硬键盘没有展示给用户，哪怕设备没有硬键盘，也可以使用此限定符。如果没有提供或已经禁用软键盘，则只有在显示硬键盘时才会使用此限定符。<br><code>keyshidden</code>：设备具有可用的硬键盘，但它处于隐藏状态，且设备没有启用软键盘。<br><code>keyssoft</code>：设备已经启用软键盘（无论是否可见）。<br><br>如果提供了 <code>keysexposed</code> 资源，但未提供 <code>keyssoft</code>资源，那么只要系统已经启用软键盘，就会使用<code>keysexposed</code> 资源，而不考虑键盘是否可见。<br><br>如果用户打开硬键盘，它有可能在应用生命周期中发生改变。如需了解这会在运行期间给应用带来哪些影响，请参阅<a href="https://developer.android.com/guide/topics/resources/runtime-changes.html" target="_blank" rel="external">处理运行时变更</a>。<br><br>另请参阅配置字段 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#hardKeyboardHidden" target="_blank" rel="external">hardKeyboardHidden</a>和<a href="https://developer.android.com/reference/android/content/res/Configuration.html#keyboardHidden" target="_blank" rel="external">keyboardHidden</a>，这两个字段分别指示硬键盘的可见性和任何一种键盘（包括软键盘）的可见性。</td>
</tr>
<tr>
<td>主要文本输入法</td>
<td style="text-align:center"><code>nokeys</code><br><code>qwerty</code><br> <code>12key</code></td>
<td style="text-align:left"><code>nokeys</code>：设备没有用于文本输入的硬按键。<br><code>qwerty</code>：设备具有标准硬键盘（无论是否对用户可见）。<br><code>12key</code>：设备具有 12 键硬键盘（无论是否对用户可见）。<br><br>另请参阅 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#keyboard" target="_blank" rel="external">keyboard</a> 配置字段，该字段指示可用的主要文本输入法。</td>
</tr>
<tr>
<td>导航键可用性</td>
<td style="text-align:center"><code>navexposed</code><br> <code>navhidden</code></td>
<td style="text-align:left"><code>navexposed</code>：导航键可供用户使用。<br><code>navhidden</code>：导航键不可用（例如，位于密封盖子后面）。<br> <br>如果用户显示导航键，它有可能在应用生命周期中发生改变。如需了解这会在运行期间给应用带来哪些影响，请参阅<a href="https://developer.android.com/guide/topics/resources/runtime-changes.html" target="_blank" rel="external">处理运行时变更</a>。<br><br>另请参阅<a href="https://developer.android.com/reference/android/content/res/Configuration.html#navigationHidden" target="_blank" rel="external">navigationHidden</a> 配置字段，该字段指示导航键是否处于隐藏状态。</td>
</tr>
<tr>
<td>主要非触摸导航方法</td>
<td style="text-align:center"><code>nonav</code><br><code>dpad</code><br> <code>trackball</code><br> <code>wheel</code></td>
<td style="text-align:left"><code>nonav</code>：除了使用触摸屏以外，设备没有其他导航设施。<br><code>dpad</code>：设备具有用于导航的方向键。<br><code>trackball</code>：设备具有用于导航的轨迹球。<br><code>wheel</code>：设备具有用于导航的方向盘（不常见）。<br><br>另请参阅 <a href="https://developer.android.com/reference/android/content/res/Configuration.html#navigation" target="_blank" rel="external">navigation</a>配置字段，该字段指示可用的导航方法类型。</td>
</tr>
<tr>
<td>平台版本（API 级别）</td>
<td style="text-align:center">示例：<br><code>v3</code><br><code>v4</code><br><code>v7</code><br>等等</td>
<td style="text-align:left">设备支持的 API 级别。例如，<code>v1</code> 对应于 API 级别1（带有 Android 1.0 或更高版本系统的设备），<code>v4</code> 对应于 API 级别 4（带有 Android1.6 或更高版本系统的设备）。如需了解有关这些值的详细信息，请参阅<a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels" target="_blank" rel="external">Android API 级别</a>文档。</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>注</strong>：有些配置限定符是从 <code>Android 1.0</code> 才开始添加，因此并非所有版本的<code>Android</code>系统都支持所有限定符。使用新限定符会隐式添加平台版本限定符，因此较旧版本系统的设备必然会忽略它。 例如，使用 <code>w600dp</code> 限定符会自动包括 v13 限定符，因为可用宽度限定符是 API 级别 13 中的新增配置。为了避免出现任何问题，请始终包含一组默认资源（一组“不带限定符”的资源）。 如需了解详细信息，请参阅利用资源提供最佳设备兼容性部分</p>
</blockquote>
<h2 id="限定符命名规则"><a href="#限定符命名规则" class="headerlink" title="限定符命名规则"></a>限定符命名规则</h2><p>以下是一些关于使用配置限定符名称的规则：</p>
<ul>
<li>您可以为单组资源指定多个限定符，并使用短划线分隔。例如，<code>drawable-en-rUS-land</code> 适用于横排美国英语设备。</li>
<li>这些限定符必须遵循表 2 中列出的顺序。例如：<ul>
<li>错误：<code>drawable-hdpi-port/</code></li>
<li>正确：<code>drawable-port-hdpi/</code></li>
</ul>
</li>
<li>不能嵌套备用资源目录。例如，您不能拥有 <code>res/drawable/drawable-en/</code>。</li>
<li>值不区分大小写。在处理之前，资源编译器会将目录名称转换为小写，以避免不区分大小写的文件系统出现问题。 名称中使用的任何大写字母只是为了便于认读。</li>
<li>对于每种限定符类型，仅支持一个值。例如，若要对西班牙语和法语使用相同的可绘制对象文件，则您肯定不能拥有名为<code>drawable-rES-rFR/</code> 的目录，而是需要两个包含相应文件的资源目录，如 <code>drawable-rES/</code> 和 <code>drawable-rFR/</code>。然而，实际上您无需将相同的文件都复制到这两个位置。相反，您可以创建指向资源的别名。 请参阅下面的<strong><code>创建别名资源</code></strong>。</li>
</ul>
<p>将备用资源保存到以这些限定符命名的目录中之后，Android 会根据当前设备配置在应用中自动应用这些资源。 每次请求资源时，Android 都会检查备用资源目录是否包含所请求的资源文件，然后找到最匹配资源（下文进行介绍）。 如果没有与特定设备配置匹配的备用资源，则 Android 会使用相应的默认资源（一组用于不含配置限定符的特定资源类型的资源）</p>
<h2 id="创建别名资源"><a href="#创建别名资源" class="headerlink" title="创建别名资源"></a>创建别名资源</h2><p>如果您想将某一资源用于多种设备配置（但是不想作为默认资源提供），则无需将同一资源放入多个备用资源目录中。 相反，您可以（在某些情况下）创建备用资源，充当保存在默认资源目录下的资源的别名。</p>
<blockquote>
<p><strong> 注</strong>：并非所有资源都会提供相应机制让您创建指向其他资源的别名。 特别是，xml/ 目录中的动画资源、菜单资源、原始资源以及其他未指定资源均不提供此功能。</p>
</blockquote>
<p>例如，假设您有一个应用图标 <code>icon.png</code>，并且需要不同语言区域的独特版本。 但是，加拿大英语和加拿大法语这两种语言区域需要使用同一版本。 您可能会认为需要将相同的图像复制到加拿大英语和加拿大法语对应的资源目录中，但事实并非如此。 相反，您可以将用于二者的图像另存为<code>icon_ca.png</code>（除 <code>icon.png</code> 以外的任何名称），并将其放入默认<code>res/drawable/</code>目录中。然后，在<code>res/drawable-en-rCA/</code> 和 <code>res/drawable-fr-rCA/</code> 中创建<code>icon.xml</code>文件，使用 <code>&lt;bitmap&gt;</code> 元素引用 <code>icon_ca.png</code>资源。这样，您只需存储 PNG 文件的一个版本和两个指向该版本的小型 XML 文件。（XML 文件示例如下。）</p>
<h3 id="可绘制对象"><a href="#可绘制对象" class="headerlink" title="可绘制对象"></a>可绘制对象</h3><p>要创建指向现有可绘制对象的别名，请使用<code>&lt;bitmap&gt;</code>元素。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">bitmap</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:src</span>=<span class="string">"@drawable/icon_ca"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>如果将此文件另存为<code>icon.xml</code>（例如，在备用资源目录中，另存为<code>res/drawable-en-rCA/</code>），则会编译到可作为 <code>R.drawable.icon</code> 引用的资源中，但实际上它是 <code>R.drawable.icon_ca</code>资源（保存在<code>res/drawable/</code>中）的别名。</p>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>要创建指向现有布局的别名，请使用包装在<code>&lt;merge&gt;</code>中的<code>&lt;include&gt;</code>元素。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">merge</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/main_ltr"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果将此文件另存为 <code>main.xml</code>，则会编译到可作为 <code>R.layout.main</code> 引用的资源中，但实际上它是 <code>R.layout.main_ltr</code> 资源的别名。</p>
<h3 id="字符串和其他简单值"><a href="#字符串和其他简单值" class="headerlink" title="字符串和其他简单值"></a>字符串和其他简单值</h3><p>要创建指向现有字符串的别名，只需将所需字符串的资源 ID 用作新字符串的值即可。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hello"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hi"</span>&gt;</span>@string/hello<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>R.string.hi</code>资源现在是 <code>R.string.hello</code>的别名。</p>
<p>其他简单值的原理相同。 例如，颜色：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"red"</span>&gt;</span>#f00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"highlight"</span>&gt;</span>@color/red<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="利用资源提供最佳设备兼容性"><a href="#利用资源提供最佳设备兼容性" class="headerlink" title="利用资源提供最佳设备兼容性"></a>利用资源提供最佳设备兼容性</h2><p>要使应用支持多种设备配置，则务必为应用使用的每种资源类型提供默认资源，这一点非常重要。</p>
<p>例如，如果应用支持多种语言，请始终包含不带语言和区域限定符的 values/ 目录（用于保存字符串）。相反，如果您将所有字符串放入带有语言和区域限定符的目录中，则在语言设置不支持您的字符串的设备上运行应用时，应用将会崩溃。 但是，只要提供默认 values/ 资源，应用就会正常运行（即使用户不理解该语言，这也总比崩溃要好）。</p>
<p>同样，如果您根据屏幕方向提供不同的布局资源，则应选择一个方向作为默认方向。 例如，不要在 layout-land/ 和 layout-port/ 中分别提供横向和纵向的布局资源，而是保留其中之一作为默认设置，例如：layout/ 用于横向，layout-port/ 用于纵向。</p>
<p>提供默认资源至关重要，这不仅仅因为应用可能在超出预期的配置上运行，也因为新版 Android 有时会添加旧版本不支持的配置限定符。若要使用新的资源限定符，又希望维持对旧版 Android 的代码兼容性，则当旧版 Android 运行应用时，如果不提供默认资源，应用将会崩溃，这是因为它无法使用以新限定符命名的资源。例如，如果将 <code>minSdkVersion</code> 设置为 4，并使用<code>夜间模式</code>（night 或 notnight，API 级别 8 中新增配置）限定所有可绘制对象资源，则 API 级别 4 设备无法访问可绘制对象资源，而且会崩溃。在这种情况下，您可能希望 notnight 成为默认资源，为此，您应排除该限定符，使可绘制对象资源位于<code>drawable/</code> 或 <code>drawable-night/</code> 中。</p>
<p>因此，为了提供最佳设备兼容性，请始终为应用正确运行所必需的资源提供默认资源。 然后，使用配置限定符为特定的设备配置创建备用资源。</p>
<p>这条规则有一个例外：如果应用的 <code>minSdkVersion</code> 为 4 或更高版本，则在提供带屏幕密度限定符的备用可绘制对象资源时，不需要默认可绘制对象资源。 即使没有默认可绘制对象资源，Android 也可以从备用屏幕密度中找到最佳匹配项并根据需要缩放位图。 但是，为了在所有类型的设备上提供最佳体验，您应该为所有三种类型的密度提供备用可绘制对象。</p>
<h2 id="Android-如何找到最匹配资源"><a href="#Android-如何找到最匹配资源" class="headerlink" title="Android 如何找到最匹配资源"></a>Android 如何找到最匹配资源</h2><p>当您请求要为其提供备用资源的资源时，Android 会根据当前的设备配置选择要在运行时使用的备用资源。为演示 Android 如何选择备用资源，假设以下可绘制对象目录分别包含相同图像的不同版本：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">drawable/</div><div class="line">drawable-en/</div><div class="line">drawable-fr-rCA/</div><div class="line">drawable-en-port/</div><div class="line">drawable-en-notouch-<span class="number">12</span>key/</div><div class="line">drawable-port-ldpi/</div><div class="line">drawable-port-notouch-<span class="number">12</span>key/</div></pre></td></tr></table></figure></p>
<p>同时，假设设备配置如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">语言区域 = en-GB </div><div class="line">屏幕方向 = port </div><div class="line">屏幕像素密度 = hdpi </div><div class="line">触摸屏类型 = notouch </div><div class="line">主要文本输入法 = <span class="number">12</span>key</div></pre></td></tr></table></figure></p>
<p>通过将设备配置与可用的备用资源进行比较，Android 从 <code>drawable-en-port</code> 中选择可绘制对象。</p>
<p>系统使用以下逻辑决定要使用的资源：</p>
<ol>
<li><p>淘汰与设备配置冲突的资源文件。<br> <code>drawable-fr-rCA/</code> 目录与<code>en-GB</code>语言区域冲突，因而被淘汰。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">drawable/</div><div class="line">drawable-en/</div><div class="line">drawable-fr-rCA/ ---&gt;<span class="comment">//被淘汰</span></div><div class="line">drawable-en-port/</div><div class="line">drawable-en-notouch-<span class="number">12</span>key/</div><div class="line">drawable-port-ldpi/</div><div class="line">drawable-port-notouch-<span class="number">12</span>key/</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>例外</strong>：屏幕像素密度是唯一一个未因冲突而被淘汰的限定符。 尽管设备的屏幕密度为 hdpi，但是 drawable-port-ldpi/ 未被淘汰，因为此时每个屏幕密度均视为匹配。如需了解详细信息，请参阅支持多种屏幕文档。</p>
</blockquote>
</li>
<li>选择列表（<code>表 2</code>）中（下一个）优先级最高的限定符。（先从 <code>MCC</code>开始，然后下移。）</li>
<li>是否有资源目录包括此限定符？<ul>
<li>若无，请返回到第 2 步，看看下一个限定符。（在该示例中，除非达到语言限定符，否则答案始终为“否”。）</li>
<li>若有，请继续执行第 4 步。</li>
</ul>
</li>
<li><p>淘汰不含此限定符的资源目录。在该示例中，系统会淘汰所有不含语言限定符的目录。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">	drawable/  ---&gt;<span class="comment">//被淘汰</span></div><div class="line">drawable-en/</div><div class="line">drawable-en-port/</div><div class="line">drawable-en-notouch-<span class="number">12</span>key/</div><div class="line">drawable-port-ldpi/        ---&gt;<span class="comment">//被淘汰</span></div><div class="line">drawable-port-notouch-<span class="number">12</span>key/   ---&gt;<span class="comment">//被淘汰</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>例外</strong>：如果涉及的限定符是屏幕像素密度，则 Android 会选择最接近设备屏幕密度的选项。通常，Android 倾向于缩小大型原始图像，而不是放大小型原始图像。请参阅支持多种屏幕。</p>
</blockquote>
</li>
<li><p>返回并重复第 2 步、第 3 步和第 4 步，直到只剩下一个目录为止。在此示例中，屏幕方向是下一个判断是否匹配的限定符。因此，未指定屏幕方向的资源被淘汰：</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	drawable-en/  ---&gt;<span class="comment">//被淘汰</span></div><div class="line">drawable-en-port/</div><div class="line">drawable-en-notouch-<span class="number">12</span>key/  ---&gt;<span class="comment">//被淘汰</span></div></pre></td></tr></table></figure>
</code></pre><p> 剩下的目录是<code>drawable-en-port</code>。</p>
</li>
</ol>
<p>尽管对所请求的每个资源均执行此程序，但是系统仍会对某些方面做进一步优化。 例如，系统一旦知道设备配置，即会淘汰可能永远无法匹配的备用资源。 比如说，如果配置语言是英语（“en”），则系统绝不会将语言限定符设置为非英语的任何资源目录包含在选中的资源池中（不过，仍会将不带语言限定符的资源目录包含在该池中）。</p>
<p>根据屏幕尺寸限定符选择资源时，如果没有更好的匹配资源，则系统将使用专为小于当前屏幕的屏幕而设计的资源（例如，如有必要，大尺寸屏幕将使用标准尺寸的屏幕资源）。 但是，如果唯一可用的资源大于当前屏幕，则系统不会使用这些资源，并且如果没有其他资源与设备配置匹配，应用将会崩溃（例如，如果所有布局资源均用 xlarge 限定符标记，但设备是标准尺寸的屏幕）。</p>
<blockquote>
<p><strong>注</strong>：限定符的优先顺序（表 2 中）比与设备完全匹配的限定符数量更加重要。例如，在上面的第 4 步中，列表剩下的最后选项包括三个与设备完全匹配的限定符（方向、触摸屏类型和输入法），而 <code>drawable-en</code> 只有一个匹配参数（语言）。但是，语言的优先顺序高于其他两个限定符，因此<code>drawable-port-notouch-12key</code> 被淘汰。</p>
</blockquote>
<p>write by laohu<br>2016年11月19日</p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文内容来自&lt;code&gt;Android&lt;/code&gt;官网对&lt;code&gt;Android&lt;/code&gt;开发过程中资源使用、资源适配、资源选择原理的介绍和建议。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="资源适配" scheme="http://ittiger.cn/tags/%E8%B5%84%E6%BA%90%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android基础之9-Patch(9.PNG)与padding</title>
    <link href="http://ittiger.cn/Nine-Patch-Affect-Padding-Principle.html"/>
    <id>http://ittiger.cn/Nine-Patch-Affect-Padding-Principle.html</id>
    <published>2016-11-18T04:30:00.000Z</published>
    <updated>2017-02-28T03:04:29.631Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章<a href="http://ittiger.cn/My-9.png-hold-the-fat-lady-tour.html">记一次9.png的填坑之旅</a>最后，我留了两个个问题：</p>
<ol>
<li>为什么使用<code>9.PNG</code>设置背景之后会改变控件的<code>padding</code>属性值</li>
<li>在我所遇到的问题中<code>9.PNG</code>明明改变的是<code>padding</code>值为什么却产生了<code>margin</code>的效果   </li>
</ol>
<p>这篇文章就来解答这两个问题以及<code>9.PNG</code>使用过程中需要注意的地方。</p>
<p>各位同学如果没看过<a href="http://ittiger.cn/My-9.png-hold-the-fat-lady-tour.html">记一次9.png的填坑之旅</a>这篇文章可以先去看看，因为我下面所讲的内容都是根据这篇文章中的问题来讲的。</p>
<a id="more"></a>
<h2 id="问题9-Patch图"><a href="#问题9-Patch图" class="headerlink" title="问题9-Patch图"></a>问题9-Patch图</h2><p>还是先来看下我所使用的<code>9.PNG</code>的图<br><img src="/img/View_9_PNG_3.png" alt=""><br>从图中可以看出中间那一片白色区域是内容区，而内容区到底部的黑边线之间还一段<font color="red"><strong>透明的区域</strong></font>，这段区域是不会显示内容的。</p>
<h2 id="结论猜想"><a href="#结论猜想" class="headerlink" title="结论猜想"></a>结论猜想</h2><p>看到这个透明区域联想到我上面遇到的问题</p>
<blockquote>
<p>明明改变的是<code>padding</code>却产生了<code>margin</code>的效果</p>
</blockquote>
<p>大家是不是会出现一个猜想，难道上篇文章中<code>padding</code>改变却出现<code>margin</code>效果是因为这个透明的区域导致的？</p>
<p>恭喜你，答对了，我前面遇到的问题中<code>padding</code>改变却产生<code>margin</code>效果就是因为这个透明区域导致的。</p>
<p>你可能又要接着问了，这是为什么呢？</p>
<p>不要走开，下面我就来说说其中的原因。</p>
<h2 id="一探setBackgroundResource"><a href="#一探setBackgroundResource" class="headerlink" title="一探setBackgroundResource"></a>一探setBackgroundResource</h2><p>我们来看看布局设置背景图片的方法<code>setBackgroundResource(int resid)</code>是如何实现的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackgroundResource</span><span class="params">(<span class="keyword">int</span> resid)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (resid != <span class="number">0</span> &amp;&amp; resid == mBackgroundResource) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    Drawable d = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (resid != <span class="number">0</span>) &#123;</div><div class="line">        d = mContext.getDrawable(resid);</div><div class="line">    &#125;</div><div class="line">    setBackground(d);</div><div class="line">    mBackgroundResource = resid;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码可以看到调用了<code>setBackground(Drawable drawable)</code>这个方法，我们接着看<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackground</span><span class="params">(Drawable background)</span> </span>&#123;</div><div class="line">    setBackgroundDrawable(background);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们接着看<code>setBackgroundDrawable(Drawable drawable)</code>这个方法的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackgroundDrawable</span><span class="params">(Drawable background)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (background != <span class="keyword">null</span>) &#123;</div><div class="line">        Rect padding = sThreadLocal.get();</div><div class="line">        <span class="keyword">if</span> (padding == <span class="keyword">null</span>) &#123;</div><div class="line">            padding = <span class="keyword">new</span> Rect();</div><div class="line">            sThreadLocal.set(padding);</div><div class="line">        &#125;</div><div class="line">        resetResolvedDrawables();</div><div class="line">        background.setLayoutDirection(getLayoutDirection());</div><div class="line">        <span class="keyword">if</span> (background.getPadding(padding)) &#123;</div><div class="line">            resetResolvedPadding();</div><div class="line">            <span class="keyword">switch</span> (background.getLayoutDirection()) &#123;</div><div class="line">                <span class="keyword">case</span> LAYOUT_DIRECTION_RTL:</div><div class="line">                    mUserPaddingLeftInitial = padding.right;</div><div class="line">                    mUserPaddingRightInitial = padding.left;</div><div class="line">                    internalSetPadding(padding.right, padding.top, padding.left, padding.bottom);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> LAYOUT_DIRECTION_LTR:</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    mUserPaddingLeftInitial = padding.left;</div><div class="line">                    mUserPaddingRightInitial = padding.right;</div><div class="line">                    internalSetPadding(padding.left, padding.top, padding.right, padding.bottom);</div><div class="line">            &#125;</div><div class="line">            mLeftPaddingDefined = <span class="keyword">false</span>;</div><div class="line">            mRightPaddingDefined = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码很明显可以看到当<code>background.getPadding(padding)</code>返回<code>true</code>的时候当前布局视图会通过<code>internalSetPadding(padding.left, padding.top, padding.right, padding.bottom)</code>给当前视图设置相应的<code>padding</code>值</p>
<h2 id="NinePatchDrawable"><a href="#NinePatchDrawable" class="headerlink" title="NinePatchDrawable"></a>NinePatchDrawable</h2><p>因为我们使用的是<code>9-Patch</code>，所以生成的<code>Drawable</code>对象是<code>NinePatchDrawable</code>实例，我们接着上面的源码流程继续查看<code>NinePatchDrawable.getPadding(Rect padding)</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getPadding</span><span class="params">(Rect padding)</span> </span>&#123;</div><div class="line"> <span class="keyword">final</span> Rect scaledPadding = mPadding;</div><div class="line">    <span class="keyword">if</span> (scaledPadding != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (needsMirroring()) &#123;</div><div class="line">            padding.set(scaledPadding.right, scaledPadding.top,</div><div class="line">                    scaledPadding.left, scaledPadding.bottom);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            padding.set(scaledPadding);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (padding.left | padding.top | padding.right | padding.bottom) != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的方法很明显可以看出，如果当前<code>9-Patch</code>图存在<code>Padding</code>值的话，它会将该值设置到参数<code>Rect</code>中，而在前面<code>setBackgroundDrawable(Drawable drawable)</code>方法实现中方法<code>internalSetPadding(padding.left, padding.top, padding.right, padding.bottom)</code>里所传的参数<code>padding</code>就是这个地方的<code>Rect</code>参数实例。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>总结成一句话就是<font color="red">如果我们使用的<code>9-Patch</code>图生成的<code>NinePatchDrawable</code>对象存在<code>Padding</code>值，那么这些<code>Padding</code>值将会同时设置给使用该<code>9-Patch</code>作为背景图的<code>View</code>的<code>Padding</code>属性上</font></p>
<p>看了上面的结论，大家可能又会有一个疑问？？？</p>
<blockquote>
<p>我们使用的<code>9-Patch</code>图时，系统为我们生成<code>NinePatchDrawable</code>对象时产生的<code>Padding</code>是根据什么依据得来的呢？</p>
</blockquote>
<h2 id="9-Patch官方定义"><a href="#9-Patch官方定义" class="headerlink" title="9-Patch官方定义"></a>9-Patch官方定义</h2><p>OK，我们来看看<code>Google</code>官方对<code>9-Patch</code>图的定义和介绍<br><a href="https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch" target="_blank" rel="external">https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch</a></p>
<blockquote>
<p>The border is used to define the stretchable and static areas of the image. You indicate a stretchable section by drawing one (or more) 1-pixel-wide black line(s) in the left and top part of the border (the other border pixels should be fully transparent or white). You can have as many stretchable sections as you want: their relative size stays the same, so the largest sections always remain the largest.</p>
<p>You can also define an optional drawable section of the image (effectively, the padding lines) by drawing a line on the right and bottom lines. <font color="red">If a View object sets the NinePatch as its background and then specifies the View’s text, it will stretch itself so that all the text fits inside only the area designated by the right and bottom lines (if included). </font>If the padding lines are not included, Android uses the left and top lines to define this drawable area.</p>
<p>To clarify the difference between the different lines, the left and top lines define which pixels of the image are allowed to be replicated in order to stretch the image. The bottom and right lines define the relative area within the image that the contents of the View are allowed to lie within</p>
</blockquote>
<p><img src="/img/ninepatch_raw.png" alt=""></p>
<blockquote>
<p>This NinePatch defines one stretchable area with the left and top lines and the drawable area with the bottom and right lines. In the top image, the dotted grey lines identify the regions of the image that will be replicated in order to stretch the image. The pink rectangle in the bottom image identifies the region in which the contents of the View are allowed. If the contents don’t fit in this region, then the image will be stretched so that they do.</p>
</blockquote>
<p>上面这段几段文字是我引用的<code>Android</code>官方的介绍说明，里面介绍了<code>9-Patch</code>图的使用方式和要点。</p>
<h2 id="9-Patch图Padding的由来"><a href="#9-Patch图Padding的由来" class="headerlink" title="9-Patch图Padding的由来"></a>9-Patch图Padding的由来</h2><p>大家注意看段落中我标红的那一句话，这句话就是说：如果你使用<code>9-Patch</code>图给某个<code>View</code>设置<code>background</code>之后，这个<code>View</code>的所有内容仅仅适配显示在内容区域里，而内容区域范围是由<code>9-Patch</code>图<code>right and bottom lines</code>决定的。而<code>9-Patch</code>图内容区以外的部分是不可能无故消失的，所以就作为其<code>Padding</code>了，因此在我们使用<code>9-Patch</code>图作为背景图时，系统为我们生成的<code>NinePatchDrawable</code>对象的<code>Padding</code>值就是根据这得来的。</p>
<h2 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h2><p>知道上面的结论之后，我们再回过头来看我所遇到的问题，我们再看一遍我所使用的<code>9-Patch</code>图<br><img src="/img/View_9_PNG_3.png" alt=""><br>根据上面的结论可以发现这个图底部有一块透明的非内容区，因此我所使用的这个<code>9-Patch</code>图会产生一个<code>paddingBottom</code>值，而刚好这块区域又是透明，所以在使用的时候这块区域在视图上其实也是透明的，因此这块透明区域看到的效果其实是其父容器视图的内容，所以就造成了<code>margin</code>的效果。</p>
<p>讲到这里，我所遇到的那个问题就得到了完美的解答。</p>
<p>另外大家在使用<code>9-Patch</code>图的时候一定要注意其内容区域，如果<code>9-Patch</code>图制作不合适会产生一些莫名其妙的布局问题。</p>
<p>write by laohu<br>2016年11月18日</p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇文章&lt;a href=&quot;http://ittiger.cn/My-9.png-hold-the-fat-lady-tour.html&quot;&gt;记一次9.png的填坑之旅&lt;/a&gt;最后，我留了两个个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么使用&lt;code&gt;9.PNG&lt;/code&gt;设置背景之后会改变控件的&lt;code&gt;padding&lt;/code&gt;属性值&lt;/li&gt;
&lt;li&gt;在我所遇到的问题中&lt;code&gt;9.PNG&lt;/code&gt;明明改变的是&lt;code&gt;padding&lt;/code&gt;值为什么却产生了&lt;code&gt;margin&lt;/code&gt;的效果   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这篇文章就来解答这两个问题以及&lt;code&gt;9.PNG&lt;/code&gt;使用过程中需要注意的地方。&lt;/p&gt;
&lt;p&gt;各位同学如果没看过&lt;a href=&quot;http://ittiger.cn/My-9.png-hold-the-fat-lady-tour.html&quot;&gt;记一次9.png的填坑之旅&lt;/a&gt;这篇文章可以先去看看，因为我下面所讲的内容都是根据这篇文章中的问题来讲的。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="9.png" scheme="http://ittiger.cn/tags/9-png/"/>
    
  </entry>
  
  <entry>
    <title>TextView之SpannableStringBuilder使用总结</title>
    <link href="http://ittiger.cn/TextView-SpannableStringBuilder-usage-summary.html"/>
    <id>http://ittiger.cn/TextView-SpannableStringBuilder-usage-summary.html</id>
    <published>2016-11-05T12:11:52.000Z</published>
    <updated>2016-11-07T10:07:51.073Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中碰到一个<code>TextView</code>的显示问题，想了各种办法之后，最后还是用<code>SpannableStringBuilder</code>解决的。这篇文章就记录下我的问题的解决过程，同时总结下<code>SpannableStringBuilder</code>在<code>TextView</code>中的不同用法。</p>
<a id="more"></a>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目中<code>GridView</code>有两列，每个<code>Item</code>视图都有一个<code>TextView</code>(设置了最大显示行数)，项目业务要求每列的<code>TextView</code>展示高度相同，但是因为显示的文本你不知道有多少行，所以在布局的时候不能设置固定高度，而是设置为<code>wrap_content</code>，所以为了保证两列的<code>TextView</code>高度一致，只需要保证他们展示内容的行数一致就行。</p>
<p>而上面的问题只需要在内容行数达不到最大显示行数时，为其手动补齐行数即可。</p>
<p><em><font color="red">这里有个问题就是如何计算当前要展示的文本在此<code>TextView</code>中能展示多少行，这个地方直接通过<code>textView.getLineCount()</code>是不行的，我是通过<code>StaticLayout</code>计算当前文本能显示的行数，对于<code>StaticLayout</code>的使用这篇文章就不介绍了，不会的同学可以去google下，后面的文章我会专门介绍<code>StaticLayout</code>的使用</font></em></p>
<p>有了上面的解决方法之后，我在行数不足时我手动添加了换行符<code>\n</code>补齐行数，但是运行之后，发现达不到效果，因为虽然手动换行，但是通过换行符<code>\n</code>换行之后的高度达不到实际文本行显示的高度，因此这种方式还是没法保证两边<code>TextView</code>高度一致。</p>
<p>既然单纯的换行无法达到我们想要的效果，那我就在换行之后再添加几个文字，有了这几个文字就可以让其真正达到多行文本的效果了。但是多的这几个字会显示在界面上，所以我们只需要让这几个文字不显示出来或者让这几个文字完全透明即可。</p>
<p>将<code>TextView</code>的部分文本设置为透明色，最后查询之后发现<code>SpannableStringBuilder</code>可以实现这样的效果，下面我就总结下<code>SpannableStringBuilder</code>结合<code>TextView</code>的使用方法。</p>
<h2 id="SpannableStringBuilder使用总结"><a href="#SpannableStringBuilder使用总结" class="headerlink" title="SpannableStringBuilder使用总结"></a>SpannableStringBuilder使用总结</h2><p>我们来看下<code>SpannableStringBuilder</code>的官方介绍</p>
<blockquote>
<p>This is the class for text whose content and markup can both be changed</p>
</blockquote>
<p>通过上面的介绍可以看出<code>SpannableStringBuilder</code>是一个内容和标记都可以更改的类，它其实是<code>CharSequence</code>的子类。</p>
<h3 id="SpannableStringBuilder使用效果"><a href="#SpannableStringBuilder使用效果" class="headerlink" title="SpannableStringBuilder使用效果"></a>SpannableStringBuilder使用效果</h3><p><img src="/img/SpannableStringBuilder.png" alt=""></p>
<h3 id="文本高亮"><a href="#文本高亮" class="headerlink" title="文本高亮"></a>文本高亮</h3><p>使用<code>ForegroundColorSpan</code>为<code>TextView</code>的部分文本添加指定颜色，使这部分文本高亮显示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SpannableStringBuilder builder = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">"普通文本"</span>);</div><div class="line"><span class="keyword">int</span> start = builder.length();<span class="comment">//高亮的开始位置</span></div><div class="line">builder.append(<span class="string">"文本高亮"</span>);</div><div class="line"><span class="keyword">int</span> end = builder.length();<span class="comment">//高亮的结束位置</span></div><div class="line">builder.setSpan(<span class="keyword">new</span> ForegroundColorSpan(Color.RED), start, end, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">mTextView.setText(builder);</div></pre></td></tr></table></figure></p>
<ul>
<li><code>ForegroundColorSpan</code>代表设置文本高亮的颜色</li>
<li><code>Spanned.SPAN_INCLUSIVE_EXCLUSIVE</code>这个常量表示高亮开始位置但不包含结束位置的字符，还有几个类似的常量，这几个常量与<code>Stirng.subString()</code>方法的参数代表的意思是类似的。</li>
<li>上面我的解决办法中需要文本完全透明，只需要将高亮的颜色设置为100%透明即可</li>
</ul>
<h3 id="URL超链接效果"><a href="#URL超链接效果" class="headerlink" title="URL超链接效果"></a>URL超链接效果</h3><p>使用<code>URLSpan</code>为<code>TextView</code>的部分文本添加超链接效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">SpannableStringBuilder builder = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">"普通文本"</span>);</div><div class="line"><span class="keyword">int</span> start = builder.length();<span class="comment">//URL文本开始位置</span></div><div class="line">builder.append(<span class="string">"URL连接"</span>);</div><div class="line"><span class="keyword">int</span> end = builder.length();<span class="comment">//URL文本结束位置</span></div><div class="line">builder.setSpan(<span class="keyword">new</span> URLSpan(<span class="string">"www.baidu.com"</span>) &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</div><div class="line">	     <span class="comment">//URLSpan点击响应</span></div><div class="line">         UIUtil.showToast(context, <span class="string">"URLSpan点击"</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;, start, end, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">mTextView.setText(builder);</div><div class="line"><span class="comment">//必须设置下面的方法，否则URLSpan点击事件无法响应</span></div><div class="line">mTextView.setMovementMethod(LinkMovementMethod.getInstance());</div></pre></td></tr></table></figure></p>
<ul>
<li>使用<code>URLSpan</code>即可将<code>TextView</code>的部分文本设置为超链接显示样式，同时还可以实现点击响应，但是必须调用<code>TextView.setMovementMethod(LinkMovementMethod.getInstance());</code>点击响应才会有效</li>
</ul>
<h3 id="设置文本背景色"><a href="#设置文本背景色" class="headerlink" title="设置文本背景色"></a>设置文本背景色</h3><p>使用<code>BackgroundColorSpan</code>为<code>TextView</code>的部分文本添加背景色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SpannableStringBuilder builder = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">"普通文本"</span>);</div><div class="line"><span class="keyword">int</span> start = builder.length();<span class="comment">//设置背景色的开始位置</span></div><div class="line">builder.append(<span class="string">"设置背景色"</span>);</div><div class="line"><span class="keyword">int</span> end = builder.length();<span class="comment">//设置背景色的结束位置</span></div><div class="line">builder.setSpan(<span class="keyword">new</span> BackgroundColorSpan(Color.BLUE), start, end, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">mTextView.setText(builder);</div></pre></td></tr></table></figure></p>
<ul>
<li><code>BackgroundColorSpan</code>可以将<code>TextView</code>的部分文本添加背景色，与<code>ForegroundColorSpan</code>的使用方式相同，只需要设置颜色即可</li>
</ul>
<h3 id="添加文本下划线"><a href="#添加文本下划线" class="headerlink" title="添加文本下划线"></a>添加文本下划线</h3><p>使用<code>UnderlineSpan</code>为<code>TextView</code>的部分文本添加下划线<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SpannableStringBuilder builder = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">"普通文本"</span>);</div><div class="line"><span class="keyword">int</span> start = builder.length();<span class="comment">//设置下划线的开始位置</span></div><div class="line">builder.append(<span class="string">"下划线文本"</span>);</div><div class="line"><span class="keyword">int</span> end = builder.length();<span class="comment">//设置下划线的结束位置</span></div><div class="line">builder.setSpan(<span class="keyword">new</span> UnderlineSpan(), start, end, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">mTextView.setText(builder);</div></pre></td></tr></table></figure></p>
<h3 id="文本添加删除线"><a href="#文本添加删除线" class="headerlink" title="文本添加删除线"></a>文本添加删除线</h3><p>使用<code>StrikethroughSpan</code>为<code>TextView</code>的部分文本添加删除线<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SpannableStringBuilder builder = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">"普通文本"</span>);</div><div class="line"><span class="keyword">int</span> start = builder.length();<span class="comment">//设置删除线的开始位置</span></div><div class="line">builder.append(<span class="string">"删除线文本"</span>);</div><div class="line"><span class="keyword">int</span> end = builder.length();<span class="comment">//设置删除线的结束位置</span></div><div class="line">builder.setSpan(<span class="keyword">new</span> StrikethroughSpan(), start, end, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">mTextView.setText(builder);</div></pre></td></tr></table></figure></p>
<h3 id="图片替换文本"><a href="#图片替换文本" class="headerlink" title="图片替换文本"></a>图片替换文本</h3><p>使用<code>ImageSpan</code>为<code>TextView</code>的部分文本替换为图片<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">SpannableStringBuilder builder = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">"普通文本"</span>);</div><div class="line"><span class="keyword">int</span> start = builder.length();<span class="comment">//替换为图片的开始位置</span></div><div class="line">builder.append(<span class="string">"图片替换文本"</span>);</div><div class="line"><span class="keyword">int</span> end = builder.length();<span class="comment">//替换为图片的结束位置</span></div><div class="line">Drawable drawable = getResources().getDrawable(R.mipmap.ic_launcher);</div><div class="line">drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>);<span class="comment">//设置图片为50px大小</span></div><div class="line">builder.setSpan(<span class="keyword">new</span> ImageSpan(drawable, ImageSpan.ALIGN_BOTTOM), start, end, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">mTextView.setText(builder);</div></pre></td></tr></table></figure></p>
<h3 id="设置部分粗体"><a href="#设置部分粗体" class="headerlink" title="设置部分粗体"></a>设置部分粗体</h3><p>使用<code>StyleSpan</code>为<code>TextView</code>的部分文本设置为粗体<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SpannableStringBuilder builder = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">"普通文本"</span>);</div><div class="line"><span class="keyword">int</span> start = builder.length();<span class="comment">//设置粗体的开始位置</span></div><div class="line">builder.append(<span class="string">"粗体文本"</span>);</div><div class="line"><span class="keyword">int</span> end = builder.length();<span class="comment">//设置粗体的结束位置</span></div><div class="line">builder.setSpan(<span class="keyword">new</span> StyleSpan(Typeface.BOLD), start, end, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">mTextView.setText(builder);</div></pre></td></tr></table></figure></p>
<h3 id="为任意文本添加点击响应"><a href="#为任意文本添加点击响应" class="headerlink" title="为任意文本添加点击响应"></a>为任意文本添加点击响应</h3><p>使用<code>ClickableSpan</code>为<code>TextView</code>的任意文本添加点击响应<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">SpannableStringBuilder builder = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">"普通文本"</span>);</div><div class="line"><span class="keyword">int</span> start = builder.length();<span class="comment">//设置删除线的开始位置</span></div><div class="line">builder.append(<span class="string">"单击响应文本"</span>);</div><div class="line"><span class="keyword">int</span> end = builder.length();<span class="comment">//设置删除线的结束位置</span></div><div class="line">builder.setSpan(<span class="keyword">new</span> ClickableSpan() &#123;<span class="comment">//将任意文本设置为可点击</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</div><div class="line">        UIUtil.showToast(StyleTextViewActivity.<span class="keyword">this</span>, <span class="string">"ClickableSpan"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;</div><div class="line">        <span class="comment">//此方法的默认实现会出现下划线效果，去掉其默认实现</span></div><div class="line">    &#125;</div><div class="line">  &#125;, start, end, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">mTextView.setText(builder);</div><div class="line">mTextView.setMovementMethod(LinkMovementMethod.getInstance());</div></pre></td></tr></table></figure></p>
<h3 id="组合使用各效果"><a href="#组合使用各效果" class="headerlink" title="组合使用各效果"></a>组合使用各效果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SpannableStringBuilder builder = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">"普通文本"</span>);</div><div class="line"><span class="keyword">int</span> start = builder.length();<span class="comment">//设置组合使用的开始位置</span></div><div class="line">builder.append(<span class="string">"组合使用"</span>);</div><div class="line"><span class="keyword">int</span> end = builder.length();<span class="comment">//设置组合使用的结束位置</span></div><div class="line">builder.setSpan(<span class="keyword">new</span> ForegroundColorSpan(Color.WHITE), start, end, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">builder.setSpan(<span class="keyword">new</span> BackgroundColorSpan(Color.RED), start, end, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">mTextView.setText(builder);</div></pre></td></tr></table></figure>
<p>上面这些就是<code>SpannableStringBuilder</code>结合<code>TextView</code>的一些使用方法，其实使用起来还是很简单的。</p>
<p>具体使用示例代码请参考：<a href="https://github.com/huyongli/AndroidDemo/blob/master/app/src/main/java/cn/ittiger/demo/StyleTextViewActivity.java" target="_blank" rel="external">https://github.com/huyongli/AndroidDemo</a></p>
<p>write by laohu<br>2016年11月5日21:45:48</p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中碰到一个&lt;code&gt;TextView&lt;/code&gt;的显示问题，想了各种办法之后，最后还是用&lt;code&gt;SpannableStringBuilder&lt;/code&gt;解决的。这篇文章就记录下我的问题的解决过程，同时总结下&lt;code&gt;SpannableStringBuilder&lt;/code&gt;在&lt;code&gt;TextView&lt;/code&gt;中的不同用法。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="SpannableStringBuilder" scheme="http://ittiger.cn/tags/SpannableStringBuilder/"/>
    
      <category term="TextView" scheme="http://ittiger.cn/tags/TextView/"/>
    
  </entry>
  
  <entry>
    <title>记一次9.png的填坑之旅</title>
    <link href="http://ittiger.cn/My-9.png-hold-the-fat-lady-tour.html"/>
    <id>http://ittiger.cn/My-9.png-hold-the-fat-lady-tour.html</id>
    <published>2016-11-05T04:26:42.000Z</published>
    <updated>2016-11-07T10:07:51.041Z</updated>
    
    <content type="html"><![CDATA[<p>最近在项目中进行界面调整时遇到了一个<code>9.PNG</code>图引起的<code>View</code>的<code>padding</code>值不正常导致UI显示不符合预期结果的问题。这篇文章就来记录我当时遇到的问题的表现形式，以及如何根据问题找到产生问题的原因，及其最后的解决办法。</p>
<a id="more"></a>
<h2 id="问题表现形式"><a href="#问题表现形式" class="headerlink" title="问题表现形式"></a>问题表现形式</h2><p>不多说，直接上出现问题的视图表现形式的截图：<br><img src="/img/View_9_PNG_1.png" alt=""></p>
<h2 id="我的实现"><a href="#我的实现" class="headerlink" title="我的实现"></a>我的实现</h2><p>上图中我实现的是一个<code>ListView</code>，同时自定义实现一个视图<code>Png9View extends FrameLayout</code>作为<code>ListView</code>的<code>item</code>视图，为每个<code>item</code>设置灰色背景色。<code>Png9View</code>视图中的白色部分是一个线性布局，并为线性布局顶部添加了一个蓝色的分割线，其底部添加了一个红色的分割线，中间是一个<code>TextView</code>。</p>
<p>大家可以看下<code>item</code>视图实现代码如下，整个<code>Demo</code>的代码在这里<a href="https://github.com/huyongli/AndroidDemo/blob/master/app/src/main/java/cn/ittiger/demo/Png9Activity.java" target="_blank" rel="external">https://github.com/huyongli/AndroidDemo</a>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Png9View</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> LinearLayout mContainer;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Png9View</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Png9View</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Png9View</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        LayoutInflater.from(context).inflate(R.layout.png_9_view, <span class="keyword">this</span>, <span class="keyword">true</span>);</div><div class="line">        mContainer = (LinearLayout) findViewById(R.id.root);</div><div class="line">        setBackgroundColor(getResources().getColor(android.R.color.darker_gray));</div><div class="line">        mContainer.setBackgroundResource(R.drawable.bg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>png_9_view</code>布局代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/root"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"1dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@android:color/holo_blue_dark"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorAccent"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"测试视图标题"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"1dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@android:color/holo_red_dark"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>ListView</code>的布局如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/listView"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:dividerHeight</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">android:divider</span>=<span class="string">"@null"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h2><p>通过上面的效果截图我们很容易发现在第一个<code>Png9View</code>的底部红色分割线和第二个<code>Png9View</code>的顶部蓝色分割线中还有一小段灰色的间隔，而这个灰色间隔显然与我的期望效果不一样，那这个灰色间隔是哪里来的呢？我的代码里好像没有任何设置会出现这样的效果啊。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>出现上面的问题后我第一个想到的就是打开开发者模式中显示布局边界，结果竟然发现这个灰色间隔是<code>Png9View</code>的一部分，而其颜色也刚好与<code>Png9View</code>的背景色相同，但我并没有为<code>LinearLayout</code>视图设置过<code>margin</code>啊，<code>ListView</code>也没有设置过<code>divider</code>，所以看到这个现象时感到很奇怪。想了会也没想出个所以然来，很是费解啊~~~</p>
<p>后来想到在<code>Android Studio 2.2.2</code>中有个新工具<code>Layout Inspector</code>(该工具在<code>Tools -&gt; Android -&gt; Layout Inspector</code>)可以进行<code>UI</code>分析，于是用该工具对界面进行分析最后发现了问题的原因，大家看下我对上面的界面进行分析的截图：<br><img src="/img/View_9_PNG_2.png" alt=""></p>
<p>上面的图中，我选中的是<code>Png9View</code>的布局文件中的<code>id为root的LinearLayout</code>(左边圈中的)，右边圈的是该布局的相关属性值信息，可以看到该线性布局有的<code>paddingBottom</code>属性值为<code>5</code>，而我也并没有为该<code>LinearLayout</code>设置过<code>margin</code>属性值，那这个值是怎么来的呢？</p>
<p>这个时候我就只能想到该线性布局设置的背景图片<code>bg.9.png</code>了这个地方了。于是我就猜想难道是因为设置了这个<code>.9图</code>才导致了这个问题？为了验证我的猜想，于是我就直接将背景换成了一个颜色作为背景，结果发现就正常了。到这里基本上就可以肯定这个问题就是<code>9.png</code>图干的好事了。</p>
<p>给大家看下我设置的这个图片是什么样的<br><img src="/img/View_9_PNG_3.png" alt=""></p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>因为我们项目中这个<code>.9</code>图本身就是为了达到白色的效果，所以我直接用背景颜色代替图片作为背景图解决了我的这个问题，这样还可以减少图片资源。</p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>看了上面的分析之后，可能大家会问另外一个问题，既然这个<code>paddingBottom</code>值是属于<code>LinearLayout</code>的，那为什么会产生<code>margin</code>的效果呢？<code>padding</code>应该是当前布局的内容距离当前布局的边距，那也应该是白色啊，怎么这个<code>padding</code>区域显示的却是其父布局<code>Png9View</code>的背景色呢，怎么就产生了<code>margin</code>的效果呢？</p>
<p>大家伙别急，原因且待下篇分解。。。</p>
<p>write by laohu<br>2016年11月5日15:14:09</p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在项目中进行界面调整时遇到了一个&lt;code&gt;9.PNG&lt;/code&gt;图引起的&lt;code&gt;View&lt;/code&gt;的&lt;code&gt;padding&lt;/code&gt;值不正常导致UI显示不符合预期结果的问题。这篇文章就来记录我当时遇到的问题的表现形式，以及如何根据问题找到产生问题的原因，及其最后的解决办法。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="9.png" scheme="http://ittiger.cn/tags/9-png/"/>
    
  </entry>
  
  <entry>
    <title>RxJava学习之基本使用</title>
    <link href="http://ittiger.cn/RxJava-Basic-Use.html"/>
    <id>http://ittiger.cn/RxJava-Basic-Use.html</id>
    <published>2016-10-27T13:46:42.000Z</published>
    <updated>2016-11-07T10:07:51.069Z</updated>
    
    <content type="html"><![CDATA[<p><code>RxJava</code>现在在Android开发中越来越流行，作为一个<code>Android</code>开发者我也必须紧跟步伐学习学习<code>RxJava</code>，这篇文章就记录了<code>RxJava</code>中我认为比较常用的一些场景。</p>
<p>也给大伙推荐篇比较好的<code>RxJava</code>文章</p>
<ul>
<li><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></li>
</ul>
<h2 id="RxJava基础"><a href="#RxJava基础" class="headerlink" title="RxJava基础"></a>RxJava基础</h2><p>大家都知道<code>JDK</code>中提供了观察者模式的实现，它主要两个重要元素：</p>
<ul>
<li>被观察者 <code>Observable</code></li>
<li>观察者 <code>Observer</code></li>
</ul>
<p>至于<code>Java</code>中观察者模式的使用，大家可以自行Google下。</p>
<p>而<code>RxJava</code>中也有两个重要的元素：</p>
<ul>
<li>被观察者(事件源) <code>Observable</code></li>
<li>观察者(事件订阅者) <code>Subscriber</code></li>
</ul>
<p>因此<code>RxJava</code>的设计看起来也有点类似<code>JDK</code>中的观察者模式，都有被观察者和观察者。<br><code>JDK</code>观察者模式中当有操作需要时是由被观察者通知观察者来进行更新操作<br><code>RxJava</code>中是由被观察者<code>Observable</code>发出事件给观察者<code>Subscriber</code>接收，然后观察者<code>Subscriber</code>调用<code>noNext()</code>进行处理，直到调用<code>onComplete)()</code>或<code>onError()</code>结束</p>
<a id="more"></a>
<h2 id="Gradle依赖"><a href="#Gradle依赖" class="headerlink" title="Gradle依赖"></a>Gradle依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'io.reactivex:rxjava:1.0.1'</span></div><div class="line">compile <span class="string">'io.reactivex:rxandroid:1.0.1'</span></div></pre></td></tr></table></figure>
<h2 id="基础方式创建Observable和Subscriber"><a href="#基础方式创建Observable和Subscriber" class="headerlink" title="基础方式创建Observable和Subscriber"></a>基础方式创建Observable和Subscriber</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用Observable.create()方式创建一个Observable事件源</span></div><div class="line">Observable&lt;String&gt; observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="string">"hello world"</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//创建一个观察者Subscriber</span></div><div class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">		Log.d(<span class="string">"RxJava"</span> <span class="string">"onComplete"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">	    Log.d(<span class="string">"RxJava"</span> <span class="string">"onError"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"RxJava"</span> s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//观察者订阅事件源</span></div><div class="line">observable.subscribe(subscriber);</div></pre></td></tr></table></figure>
<p>上面是<code>RxJava</code>的基础使用方式，这种方式使用起来和观察者模式还是比较像的，首先创建一个被观察者<code>Observable</code>，再创建一个观察者<code>Subscriber</code>，然后观察者订阅这个被观察者，一旦订阅之后<code>Observable</code>就会执行上面的<code>call(Subscriber subscriber)</code>方法(参数里面的<code>Subscriber</code>参数就是我们创建的观察者实例)，通过该方法我们手动调用<code>Subscriber</code>方法的<code>onNext和onCompleted</code>方法。这里有个要注意的就是我们必须自己手动调用<code>onNext和onCompleted</code>方法，否则不会自己执行。</p>
<h2 id="简化创建Observable和Subscriber"><a href="#简化创建Observable和Subscriber" class="headerlink" title="简化创建Observable和Subscriber"></a>简化创建Observable和Subscriber</h2><p>上面提到的<code>Observable</code>和<code>Subscriber</code>创建方式是<code>RxJava</code>中最基本的方式，但是上面的方式使用起来还是感觉有点繁琐，必须按部就班的来。</p>
<p><code>RxJava</code>中也提供了简单的创建方式，比如：<code>Observable.just()</code>方式创建<code>Observable</code>，完整是示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个只发出一个事件就结束的对象</span></div><div class="line">Observable&lt;String&gt; observable = Observable.just(<span class="string">"hello world"</span>);</div><div class="line"><span class="comment">//创建一个只关心onNext处理的subscriber</span></div><div class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">		Log.d(<span class="string">"RxJava"</span> s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//此方法有重载版本，可以传递处理onError,onComplete的Action</span></div><div class="line">observable.subscribe(onNextAction);</div></pre></td></tr></table></figure></p>
<p>上面的方法中使用<code>Observable.just()</code>方法可以快速的创建一个发送<code>hello world</code>事件的事件源，而如果我们只关心观察者对事件的处理，而不关心事件处理结束和事件发生错误时的处理，我们则可以创建<code>Action1</code>对象来替代<code>Subscriber</code>进行事件处理。</p>
<p>上面<code>observable.subscribe(onNextAction)</code>一旦订阅事件，就会自动的执行<code>Action1</code>中的<code>call</code>方法，该方法的作用等同于<code>Subscriber</code>中的<code>onNext</code>方法的作用，至于为什么一旦订阅就会自动执行<code>call</code>方法，而前面的一个例子中我们却需要手动调用<code>Subscriber</code>中的<code>onNext</code>方法，这个原因大家可以去源码实现中找答案，我就不介绍了。</p>
<p>当然如果你除了处理事件外，也需要对事件结束和事件错误时进行其他处理，则可以使用<code>observable.subscribe(Action1)</code>另一个重载方法<code>observable.subscribe(Action1,Action1,Action1)</code>分别接收对应<code>onNext</code>,<code>onCompleted</code>,<code>onError</code>.</p>
<p><code>Action1</code>中的<code>call</code>方法只能接收一个参数，<code>RxJava</code>中也提供了很多其他的几种<code>Action</code>，从<code>Action0</code>到<code>Action9</code>分表代表其<code>call</code>方法能接收0个参数到9个参数，另外还有一个<code>ActionN</code>其能接收N个参数。</p>
<p><code>RxJava</code>其实是支持链式写法 的，所以上面的写法可以适用如下的方式实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"hello world"</span>)</div><div class="line">          .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">				  Log.d(<span class="string">"RxJava"</span> s);</div><div class="line">              &#125;</div><div class="line">          &#125;);</div></pre></td></tr></table></figure></p>
<p>上面介绍了<code>RxJava</code>的基本使用，下面接着介绍<code>RxJava</code>中一些比较常用的功能函数。</p>
<h2 id="事件变换map"><a href="#事件变换map" class="headerlink" title="事件变换map"></a>事件变换map</h2><p>这个<code>map</code>是干什么用的呢？我举个例子：比如说我们有一个<code>Observable</code>对象，这个对象发送的事件是一串用户密码字符串，但是<code>Subscriber</code>进行处理的时候需要的是一个包含加密后的密码串，这个时候我们就可以使用<code>map</code>操作符将一个<code>Observable</code>对象发送的事件修改成另一个事件，下面的代码里通过map将<code>hello world</code>转换成其<code>hashCode</code>值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"hello world"</span>)</div><div class="line"><span class="comment">//map操作将一个事件变换为另外一个事件，只会影响到当前的subscriber</span></div><div class="line"><span class="comment">//此处将Observable的String事件转换成Integer事件，所以事件是可用改变的</span></div><div class="line">.map(<span class="keyword">new</span> Func1&lt;String, Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s.hashCode();</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">.subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer hashCode)</span> </span>&#123;</div><div class="line">		<span class="comment">//这里的值就是hello world的hash值</span></div><div class="line">		Log.d(<span class="string">"RxJava"</span> s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>例子中<code>map(Func1&lt;source, target&gt;)</code>操作符通过<code>Func1&lt;source, target&gt;</code>类将<code>source</code>事件转换修改成<code>target</code>事件</p>
<p>通过上面的介绍可以看出map是用来变换修改<code>Observable</code>所发出的事件</p>
<h2 id="Observable变换flatMap"><a href="#Observable变换flatMap" class="headerlink" title="Observable变换flatMap"></a>Observable变换flatMap</h2><p><code>map</code>是用来变换<code>Observable</code>所发出的事件，而<code>flatMap</code>就更强大，它可以将<code>Observable</code>转换成一个全新的<code>Observable</code>，依旧上例子代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"laohu"</span>)</div><div class="line">    <span class="comment">//将一个事件数据变换为另一种事件输出的Observable</span></div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;User&gt;&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;User&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Observable.just(<span class="keyword">new</span> User(s));</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;User&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">			Log.d(<span class="string">"RxJava"</span> user.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>上面的例子中通过<code>flatMap</code>操作符将一个发送<code>laohu</code>事件的<code>Observable</code>转换成一个发送<code>User</code>对象的<code>Observable</code>，该变化是完全生成一个新的<code>Observable</code></p>
<h2 id="Observable-from"><a href="#Observable-from" class="headerlink" title="Observable.from"></a>Observable.from</h2><p>在我们开发过程中经常需要对一个数组或是一个集合数据进行处理，比如我通过班级编号可以查出这个班的所有学生，查询出来后需要打印出每个学生的名字，那么我们使用上面介绍的方式该怎么做呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;Student&gt; students= ...</div><div class="line">Observable.just(students)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;List&lt;Student&gt;&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</div><div class="line">	        <span class="keyword">for</span>(User user : users) &#123;</div><div class="line">		        Log.d(<span class="string">"RxJava"</span> students.getName());</div><div class="line">	        &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>上面的做法中，很明显我们是在<code>Subscriber</code>中对列表进行循环打印出每个学生的名字，这种方法是不是感觉很多余，我既然都拿到列表了我干嘛还要多次一举使用<code>RxJava</code>去进行循环处理。这时使用<code>Observable.from</code>就可以解决这个问题，该方法可以将集合或数组进行循环处理，每次发送一个事件元素给<code>Subscriber</code>进行处理，在<code>Subscriber</code>中只需要针对单个<code>Student</code>进行姓名打印就可以了，改进之后的写法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;Student&gt; students= ...</div><div class="line">Observable.from(students)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Student&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line">		    Log.d(<span class="string">"RxJava"</span> student.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>改进之后的写法看着是不是很简单，<code>from</code>配合<code>flatMap</code>可以实现很多很复杂的操作，后面我们再举例</p>
<h2 id="事件过滤filter"><a href="#事件过滤filter" class="headerlink" title="事件过滤filter"></a>事件过滤filter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>  </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">String[] array = &#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王麻子"</span>, <span class="string">"赵六"</span>&#125;;</div><div class="line">Observable.from(array)</div><div class="line">        <span class="comment">//将一个事件数据变换为另一种事件输出的Observable</span></div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;User&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;User&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> age = <span class="number">20</span>;</div><div class="line">                <span class="keyword">if</span>(s.length() &gt; <span class="number">2</span>) &#123;<span class="comment">//名字长度大于2的年龄设为10</span></div><div class="line">                    age = <span class="number">10</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> Observable.just(<span class="keyword">new</span> User(s, age));</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">//将age &lt;= 10的事件过滤掉</span></div><div class="line">        .filter(<span class="keyword">new</span> Func1&lt;User, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> user.getAge() &gt; <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;User&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">	             Log.d(<span class="string">"RxJava"</span> user.getName());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>上面的例子中，会将年龄小于等于10的用户数据过滤掉不进行处理，因此在<code>filter</code>的<code>call</code>方法中进行判断，年龄小于等于10的数据返回false即可将该数据过滤掉。</p>
<h2 id="选取指定数量数据take"><a href="#选取指定数量数据take" class="headerlink" title="选取指定数量数据take()"></a>选取指定数量数据take()</h2><p>上面的例子中如果我只想对符合条件的前两个数据进行处理该怎么做呢，这时我们可以使用<code>take()</code>操作符来实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">String[] array = &#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王麻子"</span>, <span class="string">"赵六"</span>&#125;;</div><div class="line">Observable.from(array)</div><div class="line">        <span class="comment">//将一个事件数据变换为另一种事件输出的Observable</span></div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;User&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;User&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> age = <span class="number">20</span>;</div><div class="line">                <span class="keyword">if</span>(s.length() &gt; <span class="number">2</span>) &#123;</div><div class="line">                    age = <span class="number">10</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> Observable.just(<span class="keyword">new</span> User(s, age));</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">//将age &lt;= 10的事件过滤掉</span></div><div class="line">        .filter(<span class="keyword">new</span> Func1&lt;User, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> user.getAge() &gt; <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">//只取符合条件的前两个结果</span></div><div class="line">        .take(<span class="number">2</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;User&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">	            Log.d(<span class="string">"RxJava"</span> user.getName());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h2 id="doOnNext"><a href="#doOnNext" class="headerlink" title="doOnNext"></a>doOnNext</h2><p>上面的例子中如果我们取到前两个符合条件的数据进行处理之前，我们要先进行缓存处理，这个时候我们就可以使用<code>doOnNext</code>操作符进行处理，实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">String[] array = &#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王麻子"</span>, <span class="string">"赵六"</span>&#125;;</div><div class="line">Observable.from(array)</div><div class="line">        <span class="comment">//将一个事件数据变换为另一种事件输出的Observable</span></div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;User&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;User&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> age = <span class="number">20</span>;</div><div class="line">                <span class="keyword">if</span>(s.length() &gt; <span class="number">2</span>) &#123;</div><div class="line">                    age = <span class="number">10</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> Observable.just(<span class="keyword">new</span> User(s, age));</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">//将age &lt;= 10的事件过滤掉</span></div><div class="line">        .filter(<span class="keyword">new</span> Func1&lt;User, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> user.getAge() &gt; <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">//只取符合条件的前两个结果</span></div><div class="line">        .take(<span class="number">2</span>)</div><div class="line">        <span class="comment">//在subscribe执行之前进行额外的操作，比如将数据保存到磁盘上</span></div><div class="line">        .doOnNext(<span class="keyword">new</span> Action1&lt;User&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">                save(user);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;User&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">	            Log.d(<span class="string">"RxJava"</span> user.getName());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><p>比如我们有一个同步请求网络数据的服务，在<code>Android</code>中使用<code>RxJava</code>进行处理该怎么做呢？我们可以使用<code>subscribeOn()</code>指定被观察者(事件)的运行线程，使用<code>observeOn()</code>指定观察者(订阅者)的运行线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"查询条件"</span>)</div><div class="line">    .subscribeOn(Schedulers.io())<span class="comment">//在子线程中进行查询操作</span></div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;Result&gt;&gt;() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> Observable&lt;Result&gt; <span class="title">call</span><span class="params">(String whereClause)</span> </span>&#123;</div><div class="line">             Result result = queryResult(whereClause);</div><div class="line">             <span class="keyword">return</span> Observable.just(result);</div><div class="line">         &#125;</div><div class="line">     &#125;)</div><div class="line">    .observeOn(AndroidSchedulers.mainThread())<span class="comment">//在UI线程中处理结果</span></div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Result&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(<span class="keyword">final</span> Result result)</span> </span>&#123;</div><div class="line">	        Log.d(<span class="string">"RxJava"</span> result.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>上面这些是我目前使用<code>RxJava</code>用到的一些功能函数和操作符，后面学习了其他操作符之后，我会用另外的一篇博文记录下来。</p>
<p>write by 老胡<br>    2016年10月30日</p>
<p>本文章发表在 <a href="ittiger.cn">独立博客 ittiger.cn</a> 和 <a href="http://blog.csdn.net/huyongl1989" target="_blank" rel="external">个人CSDN博客</a></p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;RxJava&lt;/code&gt;现在在Android开发中越来越流行，作为一个&lt;code&gt;Android&lt;/code&gt;开发者我也必须紧跟步伐学习学习&lt;code&gt;RxJava&lt;/code&gt;，这篇文章就记录了&lt;code&gt;RxJava&lt;/code&gt;中我认为比较常用的一些场景。&lt;/p&gt;
&lt;p&gt;也给大伙推荐篇比较好的&lt;code&gt;RxJava&lt;/code&gt;文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083&quot;&gt;给 Android 开发者的 RxJava 详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;RxJava基础&quot;&gt;&lt;a href=&quot;#RxJava基础&quot; class=&quot;headerlink&quot; title=&quot;RxJava基础&quot;&gt;&lt;/a&gt;RxJava基础&lt;/h2&gt;&lt;p&gt;大家都知道&lt;code&gt;JDK&lt;/code&gt;中提供了观察者模式的实现，它主要两个重要元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被观察者 &lt;code&gt;Observable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;观察者 &lt;code&gt;Observer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于&lt;code&gt;Java&lt;/code&gt;中观察者模式的使用，大家可以自行Google下。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;RxJava&lt;/code&gt;中也有两个重要的元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被观察者(事件源) &lt;code&gt;Observable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;观察者(事件订阅者) &lt;code&gt;Subscriber&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此&lt;code&gt;RxJava&lt;/code&gt;的设计看起来也有点类似&lt;code&gt;JDK&lt;/code&gt;中的观察者模式，都有被观察者和观察者。&lt;br&gt;&lt;code&gt;JDK&lt;/code&gt;观察者模式中当有操作需要时是由被观察者通知观察者来进行更新操作&lt;br&gt;&lt;code&gt;RxJava&lt;/code&gt;中是由被观察者&lt;code&gt;Observable&lt;/code&gt;发出事件给观察者&lt;code&gt;Subscriber&lt;/code&gt;接收，然后观察者&lt;code&gt;Subscriber&lt;/code&gt;调用&lt;code&gt;noNext()&lt;/code&gt;进行处理，直到调用&lt;code&gt;onComplete)()&lt;/code&gt;或&lt;code&gt;onError()&lt;/code&gt;结束&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="RxJava" scheme="http://ittiger.cn/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>透过Retrofit使用看其源码设计模式</title>
    <link href="http://ittiger.cn/Retrofit-Source-Design-Pattern.html"/>
    <id>http://ittiger.cn/Retrofit-Source-Design-Pattern.html</id>
    <published>2016-10-13T08:43:42.000Z</published>
    <updated>2016-10-14T06:49:38.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章我将从Retrofit的基本用法出发，透过其使用步骤，一步步的探究Retrofit的实现原理及其源码的设计模式。这篇文章可能会将Retrofit中用到的设计模式和其实现原理穿插着写，所以各位同学也可以选择性的阅读。而对于Retrofit具体使用还不太清楚的同学可以去看的另一篇文章<a href="http://ittiger.cn/2016/08/29/Retrofit2%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/">Retrofit2的使用介绍</a></p>
<a id="more"></a>
<h2 id="Retrofit基本用法"><a href="#Retrofit基本用法" class="headerlink" title="Retrofit基本用法"></a>Retrofit基本用法</h2><p>我以用户登录作为示例：</p>
<h3 id="声明接口"><a href="#声明接口" class="headerlink" title="声明接口"></a>声明接口</h3><p>首先我们先定义一个登录服务接口<code>LoginService</code>，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginService</span> </span>&#123;</div><div class="line">    <span class="meta">@FormUrlEncoded</span></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"login"</span>)</div><div class="line">    <span class="function">Call&lt;String&gt; <span class="title">login</span><span class="params">(@Field(<span class="string">"username"</span>)</span> String name, @<span class="title">Field</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建Retrofit对象"><a href="#创建Retrofit对象" class="headerlink" title="创建Retrofit对象"></a>创建Retrofit对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">    .baseUrl(<span class="string">"http://ittiger.cn"</span>)</div><div class="line">    .addConverterFactory(GsonConverterFactory.create())</div><div class="line">    .build();</div></pre></td></tr></table></figure>
<h3 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LoginService service = retrofit.create(LoginService.class);</div><div class="line">Call&lt;User&gt; call = service.login(<span class="string">"user"</span>, <span class="string">"pwd"</span>);</div><div class="line">call.execute()或call.enqueue()</div></pre></td></tr></table></figure>
<h2 id="Retrofit关键类"><a href="#Retrofit关键类" class="headerlink" title="Retrofit关键类"></a>Retrofit关键类</h2><p>在讲Retrofit实现原理之前，我先说下Retrofit里面涉及到几个关键类都是干什么用的</p>
<ol>
<li><code>Retorift：</code> 负责配置请求过程中的基本参数，如：请求地址，结果转换器，自定义OKHttpClient等，同时还会生成请求接口对象</li>
<li><code>Call：</code> 网络请求执行者(<code>Retrofit.Call</code>)，比如：上面示例中最后调用<code>login</code>方法得到的<code>Call</code>对象就是此接口的实例</li>
<li><code>OkHttpCall：</code> 此类是<code>Retrofit.Call</code>接口的实现，示例中最后调用<code>login</code>方法得到的<code>Call</code>对象就是此类的实例。但是其底层网络请求执行都是通过<code>OkHttp.Call</code>接口间接执行的，也就是说<code>OkHttpCall</code>是对<code>OkHttp.Call</code>网络请求功能的封装。</li>
<li><code>Converter &amp; Converter.Factory：</code> 分别负责网络请求结果转换以及生成<code>Converter</code>转换器</li>
<li><code>CallAdapter &amp; CallAdapter.Factory：</code> 分别负责对<code>Retrofit.Call实例(OkHttpCall)</code>进行适配及生成<code>CallAdapter</code>适配器</li>
<li><code>Platform：</code> 确定<code>Retrofit</code>当前运行平台，以及确定当前平台默认的的<code>CallAdapter.Factory</code>和<code>Executor</code></li>
<li><code>ExecutorCallAdapterFactory：</code> Android平台下的默认<code>CallAdapter.Factory</code>实现</li>
<li><code>ServiceMethod：</code> 解析接口服务所有注解、生成请求对象<code>Request</code>、解析请求结果<code>Response</code></li>
<li><code>ParameterHandler：</code> 服务接口方法(<code>login()</code>)参数解析处理器，配合<code>ServiceMethod</code>进行服务接口参数注解解析</li>
<li><code>RequestBuilder：</code> 根据参数和<code>URL</code>构造请求需要的<code>OkHttp.Request</code>对象</li>
</ol>
<p>以上就是Retrofit源码实现中比较关键的10个类及其相关作用</p>
<h2 id="使用流程-gt-gt-实现-gt-gt-设计模式"><a href="#使用流程-gt-gt-实现-gt-gt-设计模式" class="headerlink" title="使用流程 &gt;&gt; 实现 &gt;&gt; 设计模式"></a>使用流程 &gt;&gt; 实现 &gt;&gt; 设计模式</h2><h2 id="Builder模式创建Retrofit"><a href="#Builder模式创建Retrofit" class="headerlink" title="Builder模式创建Retrofit"></a>Builder模式创建Retrofit</h2><h3 id="Retrofit场景"><a href="#Retrofit场景" class="headerlink" title="Retrofit场景"></a>Retrofit场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">    .baseUrl(<span class="string">"http://ittiger.cn"</span>)</div><div class="line">    .addConverterFactory(GsonConverterFactory.create())</div><div class="line">    .build();</div></pre></td></tr></table></figure>
<p>上面代码的对象创建方式看着是不是似曾相识，看着很眼熟，没错，Android里面的Dialog的创建就是使用的这种方式：<code>Builder模式</code></p>
<h3 id="Builder模式定义"><a href="#Builder模式定义" class="headerlink" title="Builder模式定义"></a>Builder模式定义</h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建可以创建不同的表示</p>
<h3 id="Builder模式使用场景"><a href="#Builder模式使用场景" class="headerlink" title="Builder模式使用场景"></a>Builder模式使用场景</h3><ol>
<li>相同的方法不同的执行顺序产生不同的结果</li>
<li>多个部件都可以装配到一个对象中，但是产生的结果不同</li>
</ol>
<h3 id="Builder模式类图"><a href="#Builder模式类图" class="headerlink" title="Builder模式类图"></a>Builder模式类图</h3><p><img src="/img/design_builder.bmp" alt=""></p>
<h3 id="Retrofit中的Builder模式"><a href="#Retrofit中的Builder模式" class="headerlink" title="Retrofit中的Builder模式"></a>Retrofit中的Builder模式</h3><ol>
<li><code>Retrofit</code>中的<code>Builder模式</code>是简化版的<code>Builder模式</code>，省略了抽象建造者和指挥者</li>
<li>不同的配置会对<code>Retrofit</code>产生不同的影响，如果通过<code>addCallAdapterFactory()</code>配置<code>CallAdapterFactory</code>和不配置<code>CallAdapterFactory</code>会对<code>Retrofit</code>产生完全不同的影响。</li>
<li>如果<code>Retrofit</code>中使用构造方法的方式创建对象，则需要实现多个不同参数的构造方法，而使用构造方法创建对象时如果参数太多，很多时候参数代表的意思是不太理解的，总归来说就是创建过程不直观。</li>
</ol>
<h3 id="Builder模式优缺点"><a href="#Builder模式优缺点" class="headerlink" title="Builder模式优缺点"></a>Builder模式优缺点</h3><ul>
<li>优点：<ol>
<li>不需要知道产品内部的组成细节，产品与创建过程解耦</li>
<li>分步组装产品，使得产品的创建过程更精细更清晰</li>
<li>容易扩展，新产品只需要新建一个建造者即可</li>
</ol>
</li>
<li>缺点：<ol>
<li>Builder模式创建的产品差异性小，使用范围受限制</li>
<li>不同的产品会产生多个建造者和指挥者</li>
</ol>
</li>
</ul>
<h2 id="Retrofit创建流程-gt-gt-Platform"><a href="#Retrofit创建流程-gt-gt-Platform" class="headerlink" title="Retrofit创建流程 &gt;&gt; Platform"></a>Retrofit创建流程 &gt;&gt; Platform</h2><p>在创建Retrofit过程中有这样一行代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">...</div><div class="line">.build();</div></pre></td></tr></table></figure></p>
<p>从代码可以看到在创建<code>Retrofit</code>时得先根据<code>Retrofit.Builder</code>内部类的默认构造方法<code>Retrofit.Builder()</code>创建一个<code>Builder</code>对象，所以我们来看看这个默认构造方法里都做了些什么事：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>(Platform.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>OK，我们再来看看我们前面说到的<code>Platform</code>这个平台类的静态方法<code>get()</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//静态实例对象，类加载就确定了</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Platform PLATFORM = findPlatform();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">static</span> Platform <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> PLATFORM;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Platform <span class="title">findPlatform</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Class.forName(<span class="string">"android.os.Build"</span>);</div><div class="line">      <span class="keyword">if</span> (Build.VERSION.SDK_INT != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Android();</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ignored) &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Class.forName(<span class="string">"java.util.Optional"</span>);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Java8();</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ignored) &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Class.forName(<span class="string">"org.robovm.apple.foundation.NSObject"</span>);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> IOS();</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ignored) &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Platform();</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过上面的代码我们可以很明确的知道，在<code>Platform</code>类加载的时候它就通过反射的机制确定了当前运行的平台是属于哪一个，是<code>Android</code>，是<code>Java8</code>还是<code>IOS</code>，并生成对应的平台类的实例，<code>get()</code>方法是用来获取当前的平台类的实例。</p>
<p>目前，我们只关注<code>Android</code>平台下的<code>Platform</code>实例，我们也来看看<code>Android</code>平台类中做了些什么：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">Platform</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Executor <span class="title">defaultCallbackExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MainThreadExecutor();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> CallAdapter.<span class="function">Factory <span class="title">defaultCallAdapterFactory</span><span class="params">(Executor callbackExecutor)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallAdapterFactory(callbackExecutor);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MainThreadExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">      <span class="keyword">private</span> <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        handler.post(r);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到<code>Android</code>类中重写了<code>Platform</code>类的两个方法<code>defaultCallbackExecutor()</code>和<code>defaultCallAdapterFactory(Executor callbackExecutor)</code></p>
<ol>
<li>前者就是用来返回当前平台下默认的<code>Executor</code>，这<code>Android</code>平台下就是<code>MainThreadExecutor</code>这个类的实例，可以看到这个执行器主要就是用来进行线程切换的，因为我们知道安卓平台下所有的UI操作都必须在UI线程中执行。</li>
<li>后者就是用来返回当前平台下默认的<code>CallAdapter.Factory</code></li>
<li>当然你也可以不使用这两个默认值，都可以在创建<code>Retrofit</code>过程中自定义配置自己需要的相关实例</li>
</ol>
<h2 id="Retrofit创建流程-gt-gt-ExecutorCallAdapterFactory"><a href="#Retrofit创建流程-gt-gt-ExecutorCallAdapterFactory" class="headerlink" title="Retrofit创建流程 &gt;&gt; ExecutorCallAdapterFactory"></a>Retrofit创建流程 &gt;&gt; ExecutorCallAdapterFactory</h2><p>看完<code>Platform</code>之后紧接着我们再来看看<code>Android</code>平台下默认的<code>CallAdapter.Factory</code>实现<code>ExecutorCallAdapterFactory</code>都做了些什么，这里只贴关键代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallAdapter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">	    <span class="keyword">public</span> <span class="keyword">abstract</span> CallAdapter&lt;?&gt; get(Type returnType, Annotation[] annotations,</div><div class="line">	        Retrofit retrofit);</div><div class="line">	    ...</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorCallAdapterFactory</span> <span class="keyword">extends</span> <span class="title">CallAdapter</span>.<span class="title">Factory</span> </span>&#123;</div><div class="line">  <span class="keyword">final</span> Executor callbackExecutor;<span class="comment">//对应默认的MainThreadExecutor</span></div><div class="line"></div><div class="line">  ExecutorCallAdapterFactory(Executor callbackExecutor) &#123;</div><div class="line">    <span class="keyword">this</span>.callbackExecutor = callbackExecutor;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="keyword">public</span> CallAdapter&lt;Call&lt;?&gt;&gt; get(Type returnType, Annotation[] annotations, Retrofit retrofit) &#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CallAdapter&lt;Call&lt;?&gt;&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Type <span class="title">responseType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> responseType;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> &lt;R&gt; <span class="function">Call&lt;R&gt; <span class="title">adapt</span><span class="params">(Call&lt;R&gt; call)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, call);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>大家看源码可以发现<code>CallAdapter.Factory</code>工厂是通过<code>get()</code>方法来创建<code>CallAdapter</code>的，所以<code>ExecutorCallAdapterFactory</code>关键代码也是在<code>get()</code>方法的实现上，上面的代码中我们可以看到<code>get()</code>方法返回一个<code>CallAdapter</code>实例，这就是我前面介绍关键类作用时说到的<code>CallAdapter.Factory</code>主要负责生成<code>CallAdapter</code>的实现。</p>
<p>该类中，我们从其类的命名以及代码实现结构上来看，<code>ExecutorCallAdapterFactory</code>其实也使用了一种设计模式，那就是<code>工厂方法模式</code>，其实<code>Retrofit</code>中还有一个地方也使用了<code>工厂方法模式</code>，那就是<code>Converter &amp; Converter.Factory</code>它的实现方式和<code>CallAdapter &amp; CallAdapter.Factory</code>是一样样的。</p>
<h2 id="工厂方式模式-创建CallAdapter-amp-Converter"><a href="#工厂方式模式-创建CallAdapter-amp-Converter" class="headerlink" title="工厂方式模式(创建CallAdapter &amp; Converter)"></a>工厂方式模式(创建CallAdapter &amp; Converter)</h2><p>本文我就已<code>CallAdapter</code>进行举例，看懂<code>CallAdapter</code>的创建原理之后，再看<code>Converter</code>的创建也就比较简单，都是一样的道理。</p>
<h3 id="Retrofit场景-1"><a href="#Retrofit场景-1" class="headerlink" title="Retrofit场景"></a>Retrofit场景</h3><p><code>Retrofit</code>中使用工厂方式模式的场景我在前面讲<code>ExecutorCallAdapterFactory</code>实现的时候已经讲过了，这里就不重复举例了，大家可以对照着源码看下。</p>
<h3 id="工厂方法模式定义"><a href="#工厂方法模式定义" class="headerlink" title="工厂方法模式定义"></a>工厂方法模式定义</h3><p>一个用于创建对象的接口，让子类决定实例化哪个类</p>
<h3 id="工厂方法模式使用场景"><a href="#工厂方法模式使用场景" class="headerlink" title="工厂方法模式使用场景"></a>工厂方法模式使用场景</h3><ol>
<li>不需要知道其具体的类名，只需要知道生成它的工厂</li>
<li>一个类通过其子类来决定创建哪个对象</li>
</ol>
<h3 id="工厂方法模式类图"><a href="#工厂方法模式类图" class="headerlink" title="工厂方法模式类图"></a>工厂方法模式类图</h3><p><img src="/img/design_factory.bmp" alt=""></p>
<h3 id="Retrofit中的工厂方法"><a href="#Retrofit中的工厂方法" class="headerlink" title="Retrofit中的工厂方法"></a>Retrofit中的工厂方法</h3><ol>
<li><code>Retrofit</code>中使用工厂方法模式可以讲<code>CallAdapter</code>的创建与具体实现充分解耦，对于创建我们只需要知道其工厂即可，不需要关注是如何实现</li>
<li>所以我们可以通过<code>addCallAdapterFactory()</code>和<code>addConverterFactory()</code>很方便的自定义我们自己所需要的适配器工厂和数据转换工厂</li>
<li>通过<code>addCallAdapterFactory()</code>可以很方便的让<code>Retrofit</code>支持<code>RxJava</code>特性，而通过<code>addConverterFactory()</code>可以自定义配置们想要的转换器，让我们可以将请求数据结果转换成我们想要的任意类型。</li>
</ol>
<p>这些就是<code>Retrofit</code>使用工厂方法模式带来的好处。</p>
<h3 id="工厂方法模式优缺点"><a href="#工厂方法模式优缺点" class="headerlink" title="工厂方法模式优缺点"></a>工厂方法模式优缺点</h3><ul>
<li>优点<ol>
<li>只关注产品工厂即可，不需要关注产品如何创建，由工厂确定如何创建</li>
<li>扩展性好，新增产品时，只需要新增一个具体工厂和具体产品</li>
</ol>
</li>
<li>缺点<ol>
<li>新增产品时，需要新增具体工厂和具体产品类，使系统变得庞大</li>
<li>系统中加入抽象层，增加了系统的抽象性和理解难度</li>
</ol>
</li>
</ul>
<h2 id="适配器模式-gt-gt-CallAdapter"><a href="#适配器模式-gt-gt-CallAdapter" class="headerlink" title="适配器模式 &gt;&gt; CallAdapter"></a>适配器模式 &gt;&gt; CallAdapter</h2><h3 id="Retrofit场景-2"><a href="#Retrofit场景-2" class="headerlink" title="Retrofit场景"></a>Retrofit场景</h3><p>先来看看<code>CallAdapter</code>在<code>Retrofit</code>中的使用场景<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallAdapter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Type <span class="title">responseType</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;R&gt; <span class="function">Call&lt;R&gt; <span class="title">adapt</span><span class="params">(Call&lt;R&gt; call)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//ExecutorCallAdapterFactory中生成CallAdapter实例</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> CallAdapter&lt;Call&lt;?&gt;&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Type <span class="title">responseType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> responseType;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> &lt;R&gt; <span class="function">Call&lt;R&gt; <span class="title">adapt</span><span class="params">(Call&lt;R&gt; call)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, call);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p>前面讲到<code>ExecutorCallAdapterFactory</code>会生成一个<code>CallAdapter</code>实例。而<code>CallAdapter</code>这个名字看着是不是也很眼熟，也有种似曾相识的感觉，没错，<code>CallAdapter</code>与我们在<code>Android</code>中使用<code>ListView</code>或<code>RecyclerView</code>时经常用到的各种<code>Adapter</code>一样也是一个适配器。</p>
<p>那<code>CallAdapter</code>是来适配什么的呢？</p>
<p>还记得前面介绍关键类的时候说到的<code>OkHttpCall</code>吗？<code>CallAdapter</code>就是来适配<code>OkHttpCall</code>实例的，结合上面的代码来说的话在调用<code>CallAdapter.adapt</code>方法时<code>OkHttpCall</code>实例会作为参数传递给<code>adapt</code>方法从而交给<code>CallAdapter</code>去进行适配。</p>
<p>在我前面举的登录示例中，我们调用<code>login()</code>方法得到的<code>Call</code>实例就是<code>CallAdapter</code>适配<code>OkHttpCall</code>之后得到的一个新<code>Call</code>实例对象，至于为什么是这样，我后面会一一讲解，各位看官不要离开  </p>
<p>所以<code>Retrofit</code>在这个地方又使用了一种设计模式：<code>适配器模式</code></p>
<h3 id="适配器模式定义"><a href="#适配器模式定义" class="headerlink" title="适配器模式定义"></a>适配器模式定义</h3><p>将一个类的接口变成客户端所需要的另一个接口，从而使原本因接口不匹配而无法一起工作的两个类可以在一起工作</p>
<h3 id="适配器模式使用场景"><a href="#适配器模式使用场景" class="headerlink" title="适配器模式使用场景"></a>适配器模式使用场景</h3><ol>
<li>需要复用现有类，而现有类不符合系统需求</li>
<li>需要一个统一的输出接口，而输入端类型不可预知</li>
</ol>
<h3 id="适配器模式类图"><a href="#适配器模式类图" class="headerlink" title="适配器模式类图"></a>适配器模式类图</h3><p><img src="/img/design_adapter.bmp" alt=""></p>
<h3 id="Retrofit中的适配器模式"><a href="#Retrofit中的适配器模式" class="headerlink" title="Retrofit中的适配器模式"></a>Retrofit中的适配器模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ExecutorCallAdapterFactory中生成CallAdapter实例</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> CallAdapter&lt;Call&lt;?&gt;&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Type <span class="title">responseType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> responseType;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> &lt;R&gt; <span class="function">Call&lt;R&gt; <span class="title">adapt</span><span class="params">(Call&lt;R&gt; call)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, call);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p><code>Android</code>平台下默认的<code>CallAdapter</code>会将<code>OkHttpCall</code> 和 <code>MainThreadExecutor</code>两个实例对象适配成一个新的<code>Call</code>实例，这个新的<code>Call</code>实例在执行过程中就具备了切换到UI线程的功能。</p>
<p>那<code>Retrofit</code>在这个地方为什么要使用适配器模式将<code>OkHttpCall</code>进行适配了，直接拿过来用不就可以了吗？</p>
<p>前面讲过<code>OkHttpCall</code>仅仅只是对<code>OkHttp.Call</code>执行网络请求操作的封装，没有其他功能，也就是说<code>OkHttpCall</code>也只有网络请求的功能，而<code>Retrofit</code>是支持多个平台的（安卓，Java8，IOS，甚至包括支持RxJava特性），而不同的平台可能具有不同的特性。</p>
<p>如果在请求过程中需要用到这些特性的话，那么单靠<code>OkHttp.Call</code>是无法完成的，而如果在其他地方柔和进这些特性的支持可能就会使得框架结构不那么严谨平台解耦性比较差，甚至有可能会增加更多的接口。</p>
<p><code>Retrofit</code>通过使用适配器模式将平台特性与<code>OkHttpCall</code>适配成一个最终我们需要的<code>Call</code>实例，这样的话我们在使用过程中只需要关注最后拿到的<code>Call</code>对象，而不需要关注底层这个<code>Call</code>实例到底是什么样的，这也就为我们支持更多的特性提供了可能。比如对RxJava特性的支持，我们只需要提供一个支持<code>RxJava</code>特性的<code>CallAdapter</code>适配器即可，所以我们就可以通过<code>addCallAdapterFactory()</code>配置我们提供的支持<code>RxJava</code>特性的<code>CallAdapter.Factory</code></p>
<h3 id="适配器模式优缺点"><a href="#适配器模式优缺点" class="headerlink" title="适配器模式优缺点"></a>适配器模式优缺点</h3><ul>
<li>优点<ol>
<li>复用性好，引入适配器类来重用适配者类，无需修改原有代码</li>
<li>增加类的透明性，将适配过程封装在适配器类中，对使用者来说相对透明</li>
<li>灵活性扩展性好，通过配置可以随时更换适配器 </li>
</ol>
</li>
<li>缺点<ol>
<li>使用适配器会使系统整体不好把握，调的是A接口，却被适配成了B接口的实现</li>
</ol>
</li>
</ul>
<h2 id="静态代理模式-gt-gt-ExecutorCallbackCall"><a href="#静态代理模式-gt-gt-ExecutorCallbackCall" class="headerlink" title="静态代理模式 &gt;&gt;  ExecutorCallbackCall"></a>静态代理模式 &gt;&gt;  ExecutorCallbackCall</h2><h3 id="Retrofit场景-3"><a href="#Retrofit场景-3" class="headerlink" title="Retrofit场景"></a>Retrofit场景</h3><p>还是先来看看<code>Retrofit</code>中使用<code>ExecutorCallbackCall</code>的场景<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ExecutorCallAdapterFactory中生成CallAdapter实例</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> CallAdapter&lt;Call&lt;?&gt;&gt;() &#123;</div><div class="line">      ...</div><div class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> &lt;R&gt; <span class="function">Call&lt;R&gt; <span class="title">adapt</span><span class="params">(Call&lt;R&gt; call)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, call);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p>在上面<code>CallAdapter</code>实现中，可以发现它将<code>OkHttpCall</code>适配成了一个新的<code>Call</code>实例：<code>ExecutorCallbackCall</code>，所以我们接着看看<code>ExecutorCallbackCall</code>的具体实现代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorCallbackCall</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Call</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> Executor callbackExecutor;<span class="comment">//Android平台下的Executor：MainThreadExecutor</span></div><div class="line">    <span class="keyword">final</span> Call&lt;T&gt; delegate;<span class="comment">//网络实际执行者OkHttpCall实例</span></div><div class="line"></div><div class="line">    ExecutorCallbackCall(Executor callbackExecutor, Call&lt;T&gt; delegate) &#123;</div><div class="line">      <span class="keyword">this</span>.callbackExecutor = callbackExecutor;</div><div class="line">      <span class="keyword">this</span>.delegate = delegate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (callback == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"callback == null"</span>);</div><div class="line"></div><div class="line">      delegate.enqueue(<span class="keyword">new</span> Callback&lt;T&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;T&gt; call, <span class="keyword">final</span> Response&lt;T&gt; response)</span> </span>&#123;</div><div class="line">          <span class="comment">//Android平台下此处进行了线程切换</span></div><div class="line">          callbackExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">              <span class="keyword">if</span> (delegate.isCanceled()) &#123;</div><div class="line">                callback.onFailure(ExecutorCallbackCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>));</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                callback.onResponse(ExecutorCallbackCall.<span class="keyword">this</span>, response);</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;T&gt; call, <span class="keyword">final</span> Throwable t)</span> </span>&#123;</div><div class="line">          <span class="comment">//Android平台下此处进行了线程切换</span></div><div class="line">          callbackExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">              callback.onFailure(ExecutorCallbackCall.<span class="keyword">this</span>, t);</div><div class="line">            &#125;</div><div class="line">          &#125;);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExecuted</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> delegate.isExecuted();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response&lt;T&gt; <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      <span class="keyword">return</span> delegate.execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">      delegate.cancel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCanceled</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> delegate.isCanceled();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"CloneDoesntCallSuperClone"</span>) <span class="comment">// Performing deep clone.</span></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Call&lt;T&gt; <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, delegate.clone());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Request <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> delegate.request();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到我们通过<code>login()</code>方法拿到<code>Call</code>实例(也就是<code>ExecutorCallbackCall</code>)之后，在执行网络请求时，在<code>ExecutorCallbackCall</code>的实现中其实都是将具体操作委托给<code>OkHttpCall</code>在执行。所以<code>Retrofit</code>在<code>ExecutorCallbackCall</code>中又使用了一种设计模式：<code>静态代理模式</code></p>
<h3 id="静态代理模式定义"><a href="#静态代理模式定义" class="headerlink" title="静态代理模式定义"></a>静态代理模式定义</h3><p>为其他对象提供一种代理以控制对这个对象的访问</p>
<h3 id="静态代理模式使用场景"><a href="#静态代理模式使用场景" class="headerlink" title="静态代理模式使用场景"></a>静态代理模式使用场景</h3><p>无法访问或不想直接访问某个对象</p>
<h3 id="静态代理模式类图"><a href="#静态代理模式类图" class="headerlink" title="静态代理模式类图"></a>静态代理模式类图</h3><p><img src="/img/design_proxy.bmp" alt=""></p>
<h3 id="Retrofit中的静态代理"><a href="#Retrofit中的静态代理" class="headerlink" title="Retrofit中的静态代理"></a>Retrofit中的静态代理</h3><p><code>Retrofit</code>中使用<code>ExecutorCallbackCall</code>代理<code>OkHttpCall</code>具体请求操作，可以将<code>Call</code>的使用与底层实现进行解耦，不用关心底层具体请求接口的实现，所以如果将来出现了一个比<code>OkHttp</code>更好的网络请求库，我们完全可以将<code>OkHttp</code>替换掉，即便这样也不会影响外部API接口在项目中的使用。</p>
<h3 id="静态代理的优缺点"><a href="#静态代理的优缺点" class="headerlink" title="静态代理的优缺点"></a>静态代理的优缺点</h3><ul>
<li>优点<ol>
<li>协调调用者与被调用者，降低系统耦合度</li>
<li>减小外部接口与内部接口实现的关联，降低耦合</li>
</ol>
</li>
<li>缺点<ol>
<li>委托对象与代理对象需要实现相同的接口，当接口类增加方法时，除了所有实现类需要增加该方法外，所有代理类也需要实现此方法，增加了维护难度</li>
<li>一个代理类只能代理一种类型的对象</li>
</ol>
</li>
</ul>
<h2 id="动态代理-gt-gt-Retrofit-create"><a href="#动态代理-gt-gt-Retrofit-create" class="headerlink" title="动态代理 &gt;&gt; Retrofit.create()"></a>动态代理 &gt;&gt; Retrofit.create()</h2><p>先看下<code>Retrofit.create()</code>方法的具体实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; service)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), </div><div class="line">        <span class="keyword">new</span> Class&lt;?&gt;[] &#123; service &#125;, <span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line">      <span class="keyword">private</span> <span class="keyword">final</span> Platform platform = Platform.get();</div><div class="line">      <span class="meta">@Override</span> </div><div class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object... args)</span></span></div><div class="line">          <span class="keyword">throws</span> Throwable &#123;</div><div class="line">        ...</div><div class="line">        ServiceMethod serviceMethod = loadServiceMethod(method);</div><div class="line">        OkHttpCall okHttpCall = <span class="keyword">new</span> OkHttpCall&lt;&gt;(serviceMethod, args);</div><div class="line">        <span class="keyword">return</span> serviceMethod.callAdapter.adapt(okHttpCall);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相信很多人在刚开始用<code>Retrofit</code>时都会有一点疑问，我们明明声明的是接口，为什么通过<code>create()</code>方法就能创建出一个对象实例呢？<br>通过上面的实现源码我们找到了答案，那就是使用了JDK中提供的动态代理机制，它会在运行过程中为我们声明的服务接口动态的创建出一个代理对象，以便实现我们的请求操作。我个人认为这是<code>Retrofit</code>框架得以实现的一个核心之处，另外一个核心之处就是其完善的注解机制，关于其注解本文就不说，主要就是一些注解的声明和解析，比较简单，感兴趣的可以去看看。</p>
<p>上面的源码中我们可以看到，运行过程中得到服务接口的代理对象之后，当我们调用<code>login()</code>这样的接口方法时，其实真实执行的是上面源码中写的<code>invoke()</code>方法，所以我们调用<code>login()</code>方法时其实是执行了如下三步：</p>
<ol>
<li>根据反射得到接口方法<code>Method</code>对象生成对应的<code>ServiceMethod</code>对象，该对象会对该声明方法上的所有方法注解、参数注解进行解析以得到一个请求所需要的所有信息</li>
<li>得到<code>ServiceMethod</code>对象之后，会根据该对象和方法调用时传递的参数生成<code>OkHttpCall</code>对象，也就是具体的网络实施者</li>
<li>将<code>OkHttpCall</code>作为<code>CallAdapter</code>适配器中<code>adapt()</code>方法的参数传递给<code>CallAdapter</code>进行适配，最后得到我们所需要的<code>ExecutorCallbackCall</code>对象，也就是调用<code>login()</code>方法得到的<code>Call</code>实例对象</li>
</ol>
<h3 id="动态代理使用场景"><a href="#动态代理使用场景" class="headerlink" title="动态代理使用场景"></a>动态代理使用场景</h3><p>静态代理特点一个代理对应一种类型，如果有多个类需要代理则需要多个代理，而且维护成本高，而动态代理就是来解决此类问题</p>
<h3 id="动态代理特点"><a href="#动态代理特点" class="headerlink" title="动态代理特点"></a>动态代理特点</h3><p>运行期由JVM通过反射机制动态生成，可以代理多种类型，代码复用性高。但是只能代理Java接口，不能代理Java实现类。</p>
<h2 id="Call-enqueue-amp-Call-execute-实现"><a href="#Call-enqueue-amp-Call-execute-实现" class="headerlink" title="Call.enqueue() &amp; Call.execute()实现"></a>Call.enqueue() &amp; Call.execute()实现</h2><p>前面从<code>Retrofit</code>的配置、创建、调用接口方法得到<code>Call</code>实例，基本用法都已经讲的差不多了，现在我们来看基本用法的最后一步<code>Call.enqueue() &amp; Call.execute()</code></p>
<p>前面讲过调用接口方法比如<code>login()</code>时，<code>Android</code>平台下默认得到的是<code>ExecutorCallbackCall</code>实例，而<code>ExecutorCallbackCall</code>实例中执行网络请求的实际上又是<code>OkHttpCall</code>，所以我们来看<code>OkHttpCall</code>中的<code>Call.enqueue() &amp; Call.execute()</code>两个方法的实现，我以<code>Call.enqueue()</code>为例，另外一个大家可以自己去看看</p>
<p>下面是该方法实现的关键代码：</p>
<h3 id="OkHttpCall-enqueue"><a href="#OkHttpCall-enqueue" class="headerlink" title="OkHttpCall.enqueue()"></a>OkHttpCall.enqueue()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    okhttp3.Call call;</div><div class="line">    Throwable failure;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already executed."</span>);</div><div class="line">      executed = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">      call = rawCall;</div><div class="line">      failure = creationFailure;</div><div class="line">      <span class="keyword">if</span> (call == <span class="keyword">null</span> &amp;&amp; failure == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">	      <span class="comment">//如果okhttp3.Call为空，则先创建该实例</span></div><div class="line">          call = rawCall = createRawCall();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">          failure = creationFailure = t;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">	...</div><div class="line">	<span class="comment">//又讲网络执行转交给okhttp3.Call实例来执行</span></div><div class="line">    call.enqueue(<span class="keyword">new</span> okhttp3.Callback() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(okhttp3.Call call, okhttp3.Response rawResponse)</span></span></div><div class="line">          <span class="keyword">throws</span> IOException &#123;</div><div class="line">        Response&lt;T&gt; response;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">	      <span class="comment">//将okhttp3.Response结果包装成Retrofit中的结果对象Response</span></div><div class="line">          response = parseResponse(rawResponse);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">          callFailure(e);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        callSuccess(response);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(okhttp3.Call call, IOException e)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callFailure</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callSuccess</span><span class="params">(Response&lt;T&gt; response)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>前面介绍关键类时说过<code>OkHttpCall</code>底层网络执行其实是<code>OkHttp.Call</code>在执行，从上面的代码我们就可以看出来(代码关键地方我加了注释)，上面代码关键第一步是先创建一个<code>okhttp3.call</code>实例，所以我们同样看看创建<code>okhttp3.call</code>实例的代码是怎么实现的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> okhttp3.<span class="function">Call <span class="title">createRawCall</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Request request = serviceMethod.toRequest(args);</div><div class="line">    okhttp3.Call call = serviceMethod.callFactory.newCall(request);</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> call;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>通过上面的<code>createRawCall()</code>方法实现我们可以发现，它会首先通过<code>ServiceMethod.toRequest()</code>方法生成一个<code>OkHttp.Request</code>对象(这部分代码比较简单，我就不细说了)，然后根据<code>ServiceMethod</code>中的成员变量<code>CallFactory</code>创建一个<code>okhttp3.Call</code>实例。但是这个<code>CallFactory</code>是怎么来的呢？其实我们可以猜到这个<code>CallFactory</code>实例就是<code>OkHttpClient</code>实例。但是我们还是看看<code>ServiceMethod</code>的创建过程</p>
<h3 id="ServiceMethod创建"><a href="#ServiceMethod创建" class="headerlink" title="ServiceMethod创建"></a>ServiceMethod创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在Retrofit.create()方法实现的第一步就是通过loadServiceMethod()方法创建ServiceMethod，这是其实现</span></div><div class="line"><span class="function">ServiceMethod <span class="title">loadServiceMethod</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">    ServiceMethod result;</div><div class="line">    <span class="keyword">synchronized</span> (serviceMethodCache) &#123;</div><div class="line">      result = serviceMethodCache.get(method);</div><div class="line">      <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">        result = <span class="keyword">new</span> ServiceMethod.Builder(<span class="keyword">this</span>, method).build();</div><div class="line">        serviceMethodCache.put(method, result);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">//下面是ServiceMethod相关关键代码</span></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceMethod</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">final</span> okhttp3.Call.Factory callFactory;</div><div class="line">	ServiceMethod(Builder&lt;T&gt; builder) &#123;</div><div class="line">	    <span class="keyword">this</span>.callFactory = builder.retrofit.callFactory();</div><div class="line">	    <span class="keyword">this</span>.callAdapter = builder.callAdapter;</div><div class="line">	    <span class="keyword">this</span>.baseUrl = builder.retrofit.baseUrl();</div><div class="line">	    <span class="keyword">this</span>.responseConverter = builder.responseConverter;</div><div class="line">	    ...</div><div class="line">	  &#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Retrofit retrofit, Method method)</span> </span>&#123;</div><div class="line">	      <span class="keyword">this</span>.retrofit = retrofit;</div><div class="line">	      <span class="keyword">this</span>.method = method;</div><div class="line">	      ...</div><div class="line">	    &#125;</div><div class="line">		<span class="function"><span class="keyword">public</span> ServiceMethod <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">			  <span class="comment">//创建CallAdapter</span></div><div class="line">		      callAdapter = createCallAdapter();</div><div class="line">		      <span class="comment">//得到请求结果返回类型，接口方法声明</span></div><div class="line">		      responseType = callAdapter.responseType();</div><div class="line">		      ...</div><div class="line">		      <span class="comment">//创建得到Converter结果转换器</span></div><div class="line">		      responseConverter = createResponseConverter();</div><div class="line">		      ...</div><div class="line">		      <span class="keyword">return</span> <span class="keyword">new</span> ServiceMethod&lt;&gt;(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的<code>ServiceMethod</code>创建过程的相关代码可以看出，<code>ServiceMethod</code>中的实例变量<code>callFactory</code>其实是调用<code>Retrofit.callFactory()</code>方法所得，大家也可以看看上面我注释的<code>CallAdapter</code>和<code>Converter</code>的创建过程，所以我们再来看看这个方法的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> okhttp3.Call.<span class="function">Factory <span class="title">callFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> callFactory;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到该方法只是返回了<code>Retrofit</code>中的<code>callFactory</code>实例，同样，我们再来看看<code>Retrofit</code>中的<code>callFactory</code>实例是怎么来的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Retrofit</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> okhttp3.Call.Factory callFactory;</div><div class="line">	...</div><div class="line">	</div><div class="line">	Retrofit(okhttp3.Call.Factory callFactory, ...) &#123;</div><div class="line">	    <span class="keyword">this</span>.callFactory = callFactory;</div><div class="line">	    ...</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> okhttp3.Call.Factory callFactory;</div><div class="line">		...</div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">client</span><span class="params">(OkHttpClient client)</span> </span>&#123;</div><div class="line">	      <span class="keyword">return</span> callFactory(checkNotNull(client, <span class="string">"client == null"</span>));</div><div class="line">	    &#125;</div><div class="line">	    </div><div class="line">	    <span class="function"><span class="keyword">public</span> Builder <span class="title">callFactory</span><span class="params">(okhttp3.Call.Factory factory)</span> </span>&#123;</div><div class="line">	      <span class="keyword">this</span>.callFactory = checkNotNull(factory, <span class="string">"factory == null"</span>);</div><div class="line">	      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	    &#125;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> Retrofit <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">	      ...</div><div class="line">	      okhttp3.Call.Factory callFactory = <span class="keyword">this</span>.callFactory;</div><div class="line">	      <span class="keyword">if</span> (callFactory == <span class="keyword">null</span>) &#123;</div><div class="line">	        callFactory = <span class="keyword">new</span> OkHttpClient();</div><div class="line">	      &#125;</div><div class="line">		  ...</div><div class="line">	      <span class="keyword">return</span> <span class="keyword">new</span> Retrofit(callFactory, ...);</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过上面的代码，我们可以看出<code>Retrofit</code>中的<code>callFactory</code>实例就是我们使用的<code>OkHttpClient</code>实例，所以这就验证了我们前面猜测的<code>serviceMethod.callFactory</code>就是<code>OkHttpClient</code>实例的猜想。</p>
<p>Ok，回到我们前面将的<code>OkHttpCall.equeue()</code>方法的实现流程上来。</p>
<h3 id="请求结果解析"><a href="#请求结果解析" class="headerlink" title="请求结果解析"></a>请求结果解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">call.enqueue(<span class="keyword">new</span> okhttp3.Callback() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(okhttp3.Call call, okhttp3.Response rawResponse)</span></span></div><div class="line">          <span class="keyword">throws</span> IOException &#123;</div><div class="line">        Response&lt;T&gt; response;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">	      <span class="comment">//将okhttp3.Response结果包装成Retrofit中的结果对象Response</span></div><div class="line">          response = parseResponse(rawResponse);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">          callFailure(e);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        callSuccess(response);</div><div class="line">      &#125;</div><div class="line">      ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建完<code>okhttp3.call</code>实例之后，调用该实现的<code>equeue()</code>方法开始执行网络请求，请求执行完成之后，会调用<code>parseResponse</code>方法，我们来看看这个方法实现的关键代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function">Response&lt;T&gt; <span class="title">parseResponse</span><span class="params">(okhttp3.Response rawResponse)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    ResponseBody rawBody = rawResponse.body();</div><div class="line">	...</div><div class="line">	<span class="comment">//上面省略的这段代码是对请求失败时的结果处理，大家可以自行查看源码</span></div><div class="line">	</div><div class="line">    ExceptionCatchingRequestBody catchingBody = <span class="keyword">new</span> ExceptionCatchingRequestBody(rawBody);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      T body = serviceMethod.toResponse(catchingBody);</div><div class="line">      <span class="keyword">return</span> Response.success(body, rawResponse);</div><div class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</div><div class="line">      catchingBody.throwIfCaught();</div><div class="line">      <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>这个方法中，当请求成功时，会调用<code>serviceMethod.toResponse()</code>这个方法，我们来看看这个方法又做了哪些事情：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">T <span class="title">toResponse</span><span class="params">(ResponseBody body)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">return</span> responseConverter.convert(body);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很明显，上面方法中就直接调用了<code>ServiceMethod</code>中的<code>Converter</code>实例进行结果转换，也就是说在这个地方<code>Retrofit</code>会帮我们把网络请求结果转换成我们所需要的类型，转换成功之后会调用<code>Response.success(body, rawResponse)</code>将转换后的结果包装成<code>Retrofit</code>中的<code>Response</code>对象。</p>
<h3 id="获取配置的Converter"><a href="#获取配置的Converter" class="headerlink" title="获取配置的Converter"></a>获取配置的Converter</h3><p>问题又来了，上面的<code>Converter</code>是怎么来的呢？</p>
<p>在前面给出的<code>ServiceMethod</code>创建过程的代码块中，我对<code>ServiceMethod</code>中创建<code>Converter</code>实例的代码进行了注释，我们再回过头来看看这段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ServiceMethod.Buibler中的方法</span></div><div class="line"><span class="function"><span class="keyword">private</span> Converter&lt;ResponseBody, T&gt; <span class="title">createResponseConverter</span><span class="params">()</span> </span>&#123;</div><div class="line">	  ...</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> retrofit.responseBodyConverter(responseType, annotations);</div><div class="line">      &#125; <span class="keyword">catch</span> (RuntimeException e) &#123; <span class="comment">// Wide exception range because factories are user code.</span></div><div class="line">        <span class="keyword">throw</span> methodError(e, <span class="string">"Unable to create converter for %s"</span>, responseType);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//Retrofit中的方法</span></div><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Converter&lt;ResponseBody, T&gt; <span class="title">responseBodyConverter</span><span class="params">(Type type, Annotation[] annotations)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> nextResponseBodyConverter(<span class="keyword">null</span>, type, annotations);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Converter&lt;ResponseBody, T&gt; <span class="title">nextResponseBodyConverter</span><span class="params">(Converter.Factory skipPast,</span></span></div><div class="line">      Type type, Annotation[] annotations) &#123;</div><div class="line">	...</div><div class="line">    <span class="keyword">int</span> start = converterFactories.indexOf(skipPast) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start, count = converterFactories.size(); i &lt; count; i++) &#123;</div><div class="line">      Converter&lt;ResponseBody, ?&gt; converter =</div><div class="line">          converterFactories.get(i).responseBodyConverter(type, annotations, <span class="keyword">this</span>);</div><div class="line">      <span class="keyword">if</span> (converter != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> (Converter&lt;ResponseBody, T&gt;) converter;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(builder.toString());</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>通过上面的代码我们可以看到会从<code>Retrofit</code>的<code>converterFactories</code>转换器工厂集合中去查找当前接口方法对应的转换器工厂。其实这也告诉我们可以在创建<code>Retrofit</code>时配置多个<code>Converter.Factory</code>转换器工厂，也就是说我们一个接口服务中如果声明的多个接口方法的返回值不一样时，我们可以针对性的配置多个不一样的结果转换器工厂去进行结果解析，而不用为了保持结果类型一致对接口进行其他处理。</p>
<p>上面创建<code>ServiceMethod</code>时得到<code>CallAdapter</code>的过程与得到<code>Converter</code>的过程基本一样，我就不赘述了。</p>
<p>到这里，<code>Retrofit</code>的实现原理、实现流程以及其源码实现过程中用到的设计模式就介绍完了。</p>
<p>内容好长，时间好长~~~~</p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章我将从Retrofit的基本用法出发，透过其使用步骤，一步步的探究Retrofit的实现原理及其源码的设计模式。这篇文章可能会将Retrofit中用到的设计模式和其实现原理穿插着写，所以各位同学也可以选择性的阅读。而对于Retrofit具体使用还不太清楚的同学可以去看的另一篇文章&lt;a href=&quot;http://ittiger.cn/2016/08/29/Retrofit2%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/&quot;&gt;Retrofit2的使用介绍&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="Retrofit" scheme="http://ittiger.cn/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>在线视频播放App的实现</title>
    <link href="http://ittiger.cn/%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BEApp%E7%9A%84%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://ittiger.cn/在线视频播放App的实现.html</id>
    <published>2016-09-28T03:56:22.000Z</published>
    <updated>2016-10-12T02:19:27.592Z</updated>
    
    <content type="html"><![CDATA[<p>前一段时间在公司项目上做了一个视频播放的功能，当时时间紧，做完之后感觉有些地方处理的不好，所以就基于当时实现的思路进行了一些改进，加上自己平时喜欢看新闻客户端里面的一些短视频，所以就用网易等客户端的视频数据完成了一个独立的视频播放APP，顺便巩固下其他的技术。</p>
<h2 id="主要使用的开源库"><a href="#主要使用的开源库" class="headerlink" title="主要使用的开源库"></a>主要使用的开源库</h2><p>Mosby(一个MVP框架)、RxJava、Retrofit2、ButterKnife、Glide、Systembartint、TigerDB、Material Design相关控件</p>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ol>
<li>列表中播放视频</li>
<li>列表滑动时如果正在播放视频，则列表中播放的视频自动切换为小窗口浮动播放</li>
<li>列表播放切换到全屏播放模式</li>
<li>视频播放时也添加了完整的暂停、播放等控制操作，也添加了视频播放进度，视频缓冲进度等显示功能</li>
<li>视频全屏播放时支持左右滑动实现视频的快进和后退，支持右边上下滑动调整播放音量，左边上下滑动调整播放器的亮度等手势控制操作  </li>
</ol>
<a id="more"></a>
<h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2><ol>
<li>播放器采用<code>Android</code>中自带的<code>TextureView + MediaPlayer</code>实现，同时视频播放过程中因为涉及到列表、小窗口、全屏续播等问题，所以整个视频播放过程中，播放器采用的是全局单例模式实现，这样就可以达到无缝切换续播的问题</li>
<li>切换到全屏播放时，是直接重新开启一个横向的<code>Activity</code>来实现全屏播放</li>
</ol>
<h2 id="APP实现效果图"><a href="#APP实现效果图" class="headerlink" title="APP实现效果图"></a>APP实现效果图</h2><p><img src="/img/TigerVideo-1.jpg" width="360" height="640" alt=""><br><img src="/img/TigerVideo-2.jpg" width="360" height="640" alt=""><br><img src="/img/TigerVideo-3.jpg" width="360" height="640" alt=""><br><img src="/img/TigerVideo-4.jpg" width="360" height="640" alt=""><br><img src="/img/TigerVideo-5.jpg" width="640" height="360" alt=""><br><img src="/img/TigerVideo-6.jpg" width="360" height="640" alt="">  </p>
<h2 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h2><p><a href="https://github.com/huyongli/TigerVideo" target="_blank" rel="external">猛戳这里</a></p>
<p>感兴趣的朋友欢迎去我的<a href="https://github.com/huyongli/TigerVideo" target="_blank" rel="external">github</a>上<code>star</code>和<code>fork</code></p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一段时间在公司项目上做了一个视频播放的功能，当时时间紧，做完之后感觉有些地方处理的不好，所以就基于当时实现的思路进行了一些改进，加上自己平时喜欢看新闻客户端里面的一些短视频，所以就用网易等客户端的视频数据完成了一个独立的视频播放APP，顺便巩固下其他的技术。&lt;/p&gt;
&lt;h2 id=&quot;主要使用的开源库&quot;&gt;&lt;a href=&quot;#主要使用的开源库&quot; class=&quot;headerlink&quot; title=&quot;主要使用的开源库&quot;&gt;&lt;/a&gt;主要使用的开源库&lt;/h2&gt;&lt;p&gt;Mosby(一个MVP框架)、RxJava、Retrofit2、ButterKnife、Glide、Systembartint、TigerDB、Material Design相关控件&lt;/p&gt;
&lt;h2 id=&quot;主要功能&quot;&gt;&lt;a href=&quot;#主要功能&quot; class=&quot;headerlink&quot; title=&quot;主要功能&quot;&gt;&lt;/a&gt;主要功能&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;列表中播放视频&lt;/li&gt;
&lt;li&gt;列表滑动时如果正在播放视频，则列表中播放的视频自动切换为小窗口浮动播放&lt;/li&gt;
&lt;li&gt;列表播放切换到全屏播放模式&lt;/li&gt;
&lt;li&gt;视频播放时也添加了完整的暂停、播放等控制操作，也添加了视频播放进度，视频缓冲进度等显示功能&lt;/li&gt;
&lt;li&gt;视频全屏播放时支持左右滑动实现视频的快进和后退，支持右边上下滑动调整播放音量，左边上下滑动调整播放器的亮度等手势控制操作  &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建静态博客</title>
    <link href="http://ittiger.cn/create-hexo-blog.html"/>
    <id>http://ittiger.cn/create-hexo-blog.html</id>
    <published>2016-09-22T12:41:09.000Z</published>
    <updated>2016-09-29T02:00:44.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前段时间因为我的WordPress博客进入后台非常慢，严重影响操作使用，再加上服务器时间的限制，所以就讲博客从WordPress迁移到了Hexo上，这篇文章记录下我创建Hexo博客的一些流程步骤。</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Hexo是一个简单地、轻量地、基于NodeJS的一个静态博客框架，可以方便的生成静态网页托管在github或者是国内的coding.net上</p>
<a id="more"></a>
<h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>GitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。因为Github的空间免费稳定， 因此可以用于将自己的静态站点托管在github上来搭建自己的个人博客站点。另外国内的coding.net也支持Pages服务，同样可以进行托管静态网页。</p>
<p>Github上生成的网站的默认域名一般都是<code>username.github.io</code>，这里的username是指你在github上注册的用户名，当然github的网站也支持自定义绑定域名。</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>因为我们要将最终的静态网页文件推送到github上，所以第一步我们需要先在机器上安装Git，Git下载地址：<a href="https://git-for-windows.github.io/，安装完成之后配置好相关全局参数，如user，email等" target="_blank" rel="external">https://git-for-windows.github.io/，安装完成之后配置好相关全局参数，如user，email等</a></p>
<h3 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h3><p>因为Hexo是基于NodeJS的，所以还需要安装NodeJS，下载地址：<a href="http://nodejs.org/" target="_blank" rel="external">http://nodejs.org/</a></p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在磁盘上任意目录下右键鼠标选择Git Bash，使用如下命令进行Hexo的安装<br><code>npm install -g hexo</code></p>
<h3 id="创建Hexo项目"><a href="#创建Hexo项目" class="headerlink" title="创建Hexo项目"></a>创建Hexo项目</h3><h4 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h4><p>在磁盘上新建一个文件夹作为自己Hexo项目的根目录，如：<code>D:\Hexo</code>，在此目录下右键鼠标选择Git Bash，然后执行如下命令进行Hexo项目的初始化<br><code>hexo init</code></p>
<h4 id="安装Hexo项目依赖"><a href="#安装Hexo项目依赖" class="headerlink" title="安装Hexo项目依赖"></a>安装Hexo项目依赖</h4><p><code>npm install</code></p>
<h4 id="本地查看Hexo站点"><a href="#本地查看Hexo站点" class="headerlink" title="本地查看Hexo站点"></a>本地查看Hexo站点</h4><p>依赖安装完成之后，Hexo项目就算建好了，接下来我们使用如下命令检查项目是否成功创建：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate		//此命令表示生成静态文件</div><div class="line">hexo server       //比命令表示启动服务，启动之后在本地可以查看站点</div></pre></td></tr></table></figure></p>
<p>执行上述两个命令之后，可以在命令行上看到提示，在浏览器中访问<code>http://localhost:4000</code>，可以成功访问则表示你的Hexo项目创建成功了。</p>
<h3 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h3><p>在github上创建一个与自己账户名一致的仓库：账号名.github.io，当然没有github账号的赶紧先去注册一个账号。</p>
<h3 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h3><p>执行如下命令生成SSH密钥<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C “你的邮箱地址”，按3个回车，密码为空</div></pre></td></tr></table></figure></p>
<p>执行完成之后，在<code>C:\Users\Administrator\.ssh</code>下会生成两个文件<code>id_rsa</code>和<code>id_rsa.pub</code></p>
<p>打开<code>id_rsa.pub</code>，复制全文，打开<a href="https://github.com/settings/ssh，Add" target="_blank" rel="external">https://github.com/settings/ssh，Add</a> SSH key，粘贴复制的文本内容</p>
<p>这样设置之后，将静态文件从本地推送到github上时就不要输入用户名和密码了，当然也可以不设置github的ssh，这样的话在推送文件到github上时会提示你输入用户名和密码</p>
<h3 id="配置Hexo项目"><a href="#配置Hexo项目" class="headerlink" title="配置Hexo项目"></a>配置Hexo项目</h3><h4 id="Hexo目录结构"><a href="#Hexo目录结构" class="headerlink" title="Hexo目录结构"></a>Hexo目录结构</h4><p>Hexo项目创建成功之后，我们在项目根目录下会发现这样几个我们经常用到的目录</p>
<ol>
<li><code>source</code> 这个目录是用来存放我们写的博客文件</li>
<li><code>themes</code> 这个目录里是所有hexo安装的主题</li>
<li><code>_config.yml</code> 这个文件是Hexo项目的主配置文件</li>
</ol>
<h4 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h4><p>使用文本编辑器打开上面介绍的<code>_config.yml</code>文件，按照<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">官网https://hexo.io/docs/configuration.html</a>上的提示配置好相关配置，具体配置细节我就不多介绍了，自己在官网上看吧</p>
<p>我只介绍一个配置项<code>deploy</code>配置，这个配置就是用来配置你的静态站点是要部署到哪个上面，一般都是用github，以我的配置为例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: https://github.com/huyongli/huyongli.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>注意配置参数与值之间是需要有一个空格的，不然配置是无法生效的，<code>type</code>表示我们使用的是<code>git</code>，<code>repo</code>表示你<code>github</code>上的仓库地址，<code>branch</code>表示你仓库的分支，一般默认都是<code>master</code></p>
<h4 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h4><p>配置完Hexo之后，就可以将Hexo站点部署到github上了，执行如下命令进行部署：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>如果在部署的过程中出现如下错误：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ERROR Deployer not found: git</div><div class="line"></div><div class="line">执行如下命令：</div><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>在创建Hexo或是部署的过程中可能会多次出现类似的错误，一般都是使用<code>npm install hexo-deployer-XXX --save</code>类似的命令进行插件安装</p>
<p>上述命令执行成功后，重新部署，部署成功后，命令行上会提示<code>Deploy done: git</code></p>
<p>成功部署后，过个几分钟就可以在浏览器上通过你的仓库地址访问你的博客了，还是以我的为例：<code>http://huyongli.github.io</code></p>
<h3 id="安装Hexo主题"><a href="#安装Hexo主题" class="headerlink" title="安装Hexo主题"></a>安装Hexo主题</h3><p>Hexo默认的主题很丑，如果想自己的博客看着舒服的话，需要安装另外的主题插件，我使用主题的是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next</a></p>
<p>进入<code>next</code>主题主页<code>https://github.com/iissnan/hexo-theme-next</code><br>将此主题代码完整下下来，然后解压放到<code>Hexo</code>根目录下的<code>themes</code>目录下，然后将hexo项目的主题配置修改为next：<code>theme: next</code></p>
<p>至于<code>next</code>主题的具体配置参考该主题的详细使用介绍吧<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a></p>
<p>到此，整个Hexo的安装部署就结束了</p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;前段时间因为我的WordPress博客进入后台非常慢，严重影响操作使用，再加上服务器时间的限制，所以就讲博客从WordPress迁移到了Hexo上，这篇文章记录下我创建Hexo博客的一些流程步骤。&lt;/p&gt;
&lt;h3 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;Hexo&lt;/h3&gt;&lt;p&gt;Hexo是一个简单地、轻量地、基于NodeJS的一个静态博客框架，可以方便的生成静态网页托管在github或者是国内的coding.net上&lt;/p&gt;
    
    </summary>
    
      <category term="Blog" scheme="http://ittiger.cn/categories/Blog/"/>
    
    
      <category term="Hexo" scheme="http://ittiger.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2文件上传下载及其进度显示</title>
    <link href="http://ittiger.cn/Retrofit2%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E5%8F%8A%E5%85%B6%E8%BF%9B%E5%BA%A6%E6%98%BE%E7%A4%BA.html"/>
    <id>http://ittiger.cn/Retrofit2文件上传下载及其进度显示.html</id>
    <published>2016-09-21T12:30:39.000Z</published>
    <updated>2016-09-22T01:59:32.651Z</updated>
    
    <content type="html"><![CDATA[<h4 id="序"><a href="#序" class="headerlink" title="序"></a>序</h4><p>前面一篇文章介绍了<a href="http://ittiger.cn/2016/08/29/Retrofit2%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/">Retrofit2的基本使用</a>，这篇文章接着介绍使用Retrofit2实现文件上传和文件下载，以及上传下载过程中如何实现进度的显示。</p>
<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><h5 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Multipart</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"fileService"</span>)</div><div class="line"><span class="function">Call&lt;User&gt; <span class="title">uploadFile</span><span class="params">(@Part MultipartBody.Part file)</span></span>;</div></pre></td></tr></table></figure>
<h5 id="构造请求体上传"><a href="#构造请求体上传" class="headerlink" title="构造请求体上传"></a>构造请求体上传</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">File file = <span class="keyword">new</span> File(filePath);</div><div class="line">RequestBody body = RequestBody.create(MediaType.parse(<span class="string">"application/otcet-stream"</span>), file);</div><div class="line">MultipartBody.Part part = MultipartBody.Part.createFormData(<span class="string">"file"</span>, file.getName(), body);</div><div class="line">Call&lt;User&gt; call = getRetrofitService().uploadOneFile(part);</div><div class="line">call.enqueue(callback);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这样就可以将这个文件上传到服务器，但就这样上传操作不够友好，最好加上文件上传进度。而Retrofit本身是不支持文件上传进度显示的，所以就需要我们自己扩展OkHttp来实现文件上传进度。</p>
<p>我的做法是直接扩展一个RequestBody来实现进度显示，实现完成之后只需要将上面body进行包装转换即可</p>
<h5 id="上传进度显示"><a href="#上传进度显示" class="headerlink" title="上传进度显示"></a>上传进度显示</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">RetrofitCallback&lt;User&gt; callback = <span class="keyword">new</span> RetrofitCallback&lt;User&gt;() &#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Call&lt;User&gt; call, Response&lt;User&gt; response)</span> </span>&#123;</div><div class="line"></div><div class="line">        runOnUIThread(activity, response.body().toString());</div><div class="line">        <span class="comment">//进度更新结束</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;User&gt; call, Throwable t)</span> </span>&#123;</div><div class="line"></div><div class="line">        runOnUIThread(activity, t.getMessage());</div><div class="line">        <span class="comment">//进度更新结束</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoading</span><span class="params">(<span class="keyword">long</span> total, <span class="keyword">long</span> progress)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.onLoading(total, progress);</div><div class="line">        <span class="comment">//此处进行进度更新</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">RequestBody body1 = RequestBody.create(MediaType.parse(<span class="string">"application/otcet-stream"</span>), file);</div><div class="line"></div><div class="line"><span class="comment">//通过该行代码将RequestBody转换成特定的FileRequestBody</span></div><div class="line">FileRequestBody body = <span class="keyword">new</span> FileRequestBody(body1, callback);</div><div class="line"></div><div class="line">MultipartBody.Part part = MultipartBody.Part.createFormData(<span class="string">"file"</span>, file.getName(), body);</div><div class="line">Call&lt;User&gt; call = getRetrofitService().uploadOneFile(part);</div><div class="line">call.enqueue(callback);</div></pre></td></tr></table></figure>
<h5 id="回调RetrofitCallback"><a href="#回调RetrofitCallback" class="headerlink" title="回调RetrofitCallback"></a>回调RetrofitCallback</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RetrofitCallback</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Callback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;T&gt; call, Response&lt;T&gt; response)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(response.isSuccessful()) &#123;</div><div class="line">            onSuccess(call, response);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            onFailure(call, <span class="keyword">new</span> Throwable(response.message()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Call&lt;T&gt; call, Response&lt;T&gt; response)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoading</span><span class="params">(<span class="keyword">long</span> total, <span class="keyword">long</span> progress)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="FileRequestBody"><a href="#FileRequestBody" class="headerlink" title="FileRequestBody"></a>FileRequestBody</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 扩展OkHttp的请求体，实现上传时的进度提示</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FileRequestBody</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">RequestBody</span> </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 实际请求体</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> RequestBody requestBody;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 上传回调接口</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> RetrofitCallback&lt;T&gt; callback;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 包装完成的BufferedSink</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> BufferedSink bufferedSink;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FileRequestBody</span><span class="params">(RequestBody requestBody, RetrofitCallback&lt;T&gt; callback)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.requestBody = requestBody;</div><div class="line">    <span class="keyword">this</span>.callback = callback;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">return</span> requestBody.contentLength();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> requestBody.contentType();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bufferedSink == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">//包装</span></div><div class="line">      bufferedSink = Okio.buffer(sink(sink));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//写入</span></div><div class="line">    requestBody.writeTo(bufferedSink);</div><div class="line">    <span class="comment">//必须调用flush，否则最后一部分数据可能不会被写入</span></div><div class="line">    bufferedSink.flush();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 写入，回调进度接口</div><div class="line">   * <span class="doctag">@param</span> sink Sink</div><div class="line">   * <span class="doctag">@return</span> Sink</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> Sink <span class="title">sink</span><span class="params">(Sink sink)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ForwardingSink(sink) &#123;</div><div class="line">      <span class="comment">//当前写入字节数</span></div><div class="line">      <span class="keyword">long</span> bytesWritten = <span class="number">0L</span>;</div><div class="line">      <span class="comment">//总字节长度，避免多次调用contentLength()方法</span></div><div class="line">      <span class="keyword">long</span> contentLength = <span class="number">0L</span>;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Buffer source, <span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">super</span>.write(source, byteCount);</div><div class="line">        <span class="keyword">if</span> (contentLength == <span class="number">0</span>) &#123;</div><div class="line">          <span class="comment">//获得contentLength的值，后续不再调用</span></div><div class="line">          contentLength = contentLength();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//增加当前写入的字节数</span></div><div class="line">        bytesWritten += byteCount;</div><div class="line">        <span class="comment">//回调</span></div><div class="line">        callback.onLoading(contentLength, bytesWritten);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><h5 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h5><p>文件下载请求与普通的Get和Post请求是一样的，只是他们的返回值不一样而已，文件下载请求的返回值一般定义成<code>ResponseBody</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这里只举例POST方式进行文件下载</span></div><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"fileService"</span>)</div><div class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">downloadFile</span><span class="params">(@Field(<span class="string">"param"</span>)</span> String param)</span>;</div></pre></td></tr></table></figure></p>
<h5 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">RetrofitCallback&lt;ResponseBody&gt; callback = <span class="keyword">new</span> RetrofitCallback&lt;ResponseBody&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            InputStream is = response.body().byteStream();</div><div class="line">            String path = Util.getSdCardPath();</div><div class="line">            File file = <span class="keyword">new</span> File(path, <span class="string">"download.jpg"</span>);</div><div class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">            BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(is);</div><div class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="keyword">int</span> len;</div><div class="line">            <span class="keyword">while</span> ((len = bis.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">                fos.write(buffer, <span class="number">0</span>, len);</div><div class="line">            &#125;</div><div class="line">            fos.flush();</div><div class="line">            fos.close();</div><div class="line">            bis.close();</div><div class="line">            is.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</div><div class="line"></div><div class="line">        runOnUIThread(activity, t.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">        </div><div class="line">Call&lt;ResponseBody&gt; call = getRetrofitService(callback).downloadFile(param);</div><div class="line">call.enqueue(callback);</div></pre></td></tr></table></figure>
<h5 id="下载进度显示"><a href="#下载进度显示" class="headerlink" title="下载进度显示"></a>下载进度显示</h5><p>下载进度显示有两种方式实现，一种是通过OkHttp设置拦截器将ResponseBody进行转换成我们扩展后的ResponseBody（稍后介绍），另外一种则是在上面的回调Callback中将ResponseBody的流写入到文件时进行进度处理，下面分别进行介绍。</p>
<h6 id="扩展ResponseBody设置OkHttp拦截器"><a href="#扩展ResponseBody设置OkHttp拦截器" class="headerlink" title="扩展ResponseBody设置OkHttp拦截器"></a>扩展ResponseBody设置OkHttp拦截器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">RetrofitService <span class="title">getRetrofitService</span><span class="params">(<span class="keyword">final</span> RetrofitCallback&lt;T&gt; callback)</span> </span>&#123;</div><div class="line">    OkHttpClient.Builder clientBuilder = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line">    clientBuilder.addInterceptor(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> okhttp3.<span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">            okhttp3.Response response = chain.proceed(chain.request());</div><div class="line">            <span class="comment">//将ResponseBody转换成我们需要的FileResponseBody</span></div><div class="line">            <span class="keyword">return</span> response.newBuilder().body(<span class="keyword">new</span> FileResponseBody&lt;T&gt;(response.body(), callback)).build();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">            .baseUrl(BASE_URL)</div><div class="line">            .client(clientBuilder.build())</div><div class="line">            .addConverterFactory(GsonConverterFactory.create())</div><div class="line">            .build();</div><div class="line"></div><div class="line">    RetrofitService service = retrofit.create(RetrofitService.class);</div><div class="line">    <span class="keyword">return</span> service ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//通过上面的设置后，我们需要在回调RetrofitCallback中实现onLoading方法来进行进度的更新操作，与上传文件的方法相同</span></div></pre></td></tr></table></figure>
<h6 id="FileResponseBody"><a href="#FileResponseBody" class="headerlink" title="FileResponseBody"></a>FileResponseBody</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 扩展OkHttp的请求体，实现上传时的进度提示</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FileResponseBody</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ResponseBody</span> </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 实际请求体</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> ResponseBody mResponseBody;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 下载回调接口</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> RetrofitCallback&lt;T&gt; mCallback;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * BufferedSource</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> BufferedSource mBufferedSource;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FileResponseBody</span><span class="params">(ResponseBody responseBody, RetrofitCallback&lt;T&gt; callback)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.mResponseBody = responseBody;</div><div class="line">    <span class="keyword">this</span>.mCallback = callback;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> BufferedSource <span class="title">source</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mBufferedSource == <span class="keyword">null</span>) &#123;</div><div class="line">      mBufferedSource = Okio.buffer(source(mResponseBody.source()));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mBufferedSource;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mResponseBody.contentLength();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mResponseBody.contentType();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 回调进度接口</div><div class="line">   * <span class="doctag">@param</span> source</div><div class="line">   * <span class="doctag">@return</span> Source</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> Source <span class="title">source</span><span class="params">(Source source)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ForwardingSource(source) &#123;</div><div class="line">      <span class="keyword">long</span> totalBytesRead = <span class="number">0L</span>;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">(Buffer sink, <span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">long</span> bytesRead = <span class="keyword">super</span>.read(sink, byteCount);</div><div class="line">        totalBytesRead += bytesRead != -<span class="number">1</span> ? bytesRead : <span class="number">0</span>;</div><div class="line">        mCallback.onLoading(mResponseBody.contentLength(), totalBytesRead);</div><div class="line">        <span class="keyword">return</span> bytesRead;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="直接在回调中进行进度更新"><a href="#直接在回调中进行进度更新" class="headerlink" title="直接在回调中进行进度更新"></a>直接在回调中进行进度更新</h6><p>上面介绍了通过扩展ResponseBody同时设置OkHttp拦截器来实现进度条更新显示，另外也可以直接在请求回调onSuccess中将流转换成文件时实现进度更新，下面给出大致实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">RetrofitCallback&lt;ResponseBody&gt; callback = <span class="keyword">new</span> RetrofitCallback&lt;ResponseBody&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            InputStream is = response.body().byteStream();</div><div class="line">			<span class="comment">//获取文件总长度</span></div><div class="line">            <span class="keyword">long</span> totalLength = is.available();</div><div class="line">            </div><div class="line">            String path = Util.getSdCardPath();</div><div class="line">            File file = <span class="keyword">new</span> File(path, <span class="string">"download.jpg"</span>);</div><div class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">            BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(is);</div><div class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="keyword">int</span> len;</div><div class="line">            <span class="keyword">while</span> ((len = bis.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">                fos.write(buffer, <span class="number">0</span>, len);</div><div class="line">                <span class="comment">//此处进行更新操作</span></div><div class="line">                <span class="comment">//len即可理解为已下载的字节数</span></div><div class="line">                <span class="comment">//onLoading(len, totalLength);</span></div><div class="line">            &#125;</div><div class="line">            fos.flush();</div><div class="line">            fos.close();</div><div class="line">            bis.close();</div><div class="line">            is.close();</div><div class="line">            <span class="comment">//此处就代表更新结束</span></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</div><div class="line"></div><div class="line">        runOnUIThread(activity, t.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>以上就是Retrofit中文件上传下载及其进度更新显示的实现，有疑问的可以加我微信和QQ与我联系，联系方式在这<a href="http://ittiger.cn/about/">关于</a></p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h4&gt;&lt;p&gt;前面一篇文章介绍了&lt;a href=&quot;http://ittiger.cn/2016/08/29/Retrofit2%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/&quot;&gt;Retrofit2的基本使用&lt;/a&gt;，这篇文章接着介绍使用Retrofit2实现文件上传和文件下载，以及上传下载过程中如何实现进度的显示。&lt;/p&gt;
&lt;h4 id=&quot;文件上传&quot;&gt;&lt;a href=&quot;#文件上传&quot; class=&quot;headerlink&quot; title=&quot;文件上传&quot;&gt;&lt;/a&gt;文件上传&lt;/h4&gt;&lt;h5 id=&quot;定义接口&quot;&gt;&lt;a href=&quot;#定义接口&quot; class=&quot;headerlink&quot; title=&quot;定义接口&quot;&gt;&lt;/a&gt;定义接口&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Multipart&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@POST&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fileService&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Call&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;uploadFile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Part MultipartBody.Part file)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;构造请求体上传&quot;&gt;&lt;a href=&quot;#构造请求体上传&quot; class=&quot;headerlink&quot; title=&quot;构造请求体上传&quot;&gt;&lt;/a&gt;构造请求体上传&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;File file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(filePath);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RequestBody body = RequestBody.create(MediaType.parse(&lt;span class=&quot;string&quot;&gt;&quot;application/otcet-stream&quot;&lt;/span&gt;), file);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MultipartBody.Part part = MultipartBody.Part.createFormData(&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt;, file.getName(), body);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Call&amp;lt;User&amp;gt; call = getRetrofitService().uploadOneFile(part);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;call.enqueue(callback);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="Retrofit" scheme="http://ittiger.cn/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2使用介绍</title>
    <link href="http://ittiger.cn/Retrofit2%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D.html"/>
    <id>http://ittiger.cn/Retrofit2使用介绍.html</id>
    <published>2016-08-29T12:50:13.000Z</published>
    <updated>2016-08-30T09:26:33.706Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>对于还不知道Refrofit是什么的同学，我只能说你们太out了，赶紧去Google下，本文是针对Retrofit2.0的使用介绍，当然大家也可以直接去<a href="http://square.github.io/retrofit/" target="_blank" rel="external">官网</a>上去看使用介绍</p>
<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>要使用Retrofit首先得添加gradle依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.retrofit2:retrofit:2.0.2&apos;</div><div class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.0.0&apos;</div></pre></td></tr></table></figure></p>
<h4 id="声明服务接口"><a href="#声明服务接口" class="headerlink" title="声明服务接口"></a>声明服务接口</h4><p>依赖添加完成之后，就可以开始撸代码了，首先我们要新建一个Interface，这个接口就是你要请求的接口服务类，就像这个样子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RetrofitService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"getModelService"</span>)</div><div class="line">    <span class="function">Call&lt;User&gt; <span class="title">getModelService</span><span class="params">()</span></span>;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个接口中暂时只声明了一个方法，而在Retrofit中想这样声明的一个方法就代表了一个具体的Http请求接口。Retrofit中方法上添加<code>@GET</code>注解就表示当前方法代表一个Get请求，我们声明的这个请求方法不带任何参数，且返回结果是User对象。<br><code>@GET</code>注解括号中的值<code>getModelService</code>就代表http请求地址的具体指向，这个值与下面baseUrl中配置的URL一起组成一个完整的请求地址<br>Retrofit就是这么任性，它可以帮我们把http的请求结果自动转换成Javabean对象，这将为我们减少不少编码工作。</p>
<h4 id="构造Retrofit对象"><a href="#构造Retrofit对象" class="headerlink" title="构造Retrofit对象"></a>构造Retrofit对象</h4><p>接口服务声明完成之后，我们接着需要新建一个Retrofit对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">         .baseUrl(<span class="string">"http://localhost:8080/AndroidService/"</span>)</div><div class="line">         .addConverterFactory(GsonConverterFactory.create())</div><div class="line">         .build();</div><div class="line">RetrofitService service = retrofit.create(RetrofitService.class);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>通过上面的代码我们就创建了一个Retrofit对象，同时通过这个Retrofit对象将我们前面声明的服务接口进行了实例化，有了这个服务接口实例化对象，我们就可以调用接口里面声明的方法进行http请求了。</p>
<ol>
<li>另外需要说明是我们在设置baseUrl的时候一般在都是以/结尾，而不是在接口方法中的url以/开头</li>
<li>前面说的Retrofit会将请求结果自动转换成Javabean对象，其实这个是需要配置结果转换器的，就像上面我配置的<code>addConverterFactory(GsonConverterFactory.create())</code>，配置了这个转换器工厂之后，就会将请求得到的JSON数据自动转换成Javabean对象。同样如果请求得到的数据是xml类型的话，转换成Javabean对象则需要配置成其他类型的转换器</li>
<li>Retrofit其实已经为我们提供了多种转换器供我们选择：<blockquote>
<p>Gson: com.squareup.retrofit2:converter-gson<br>Jackson: com.squareup.retrofit2:converter-jackson<br>Moshi: com.squareup.retrofit2:converter-moshi<br>Protobuf: com.squareup.retrofit2:converter-protobuf<br>Wire: com.squareup.retrofit2:converter-wire<br>Simple XML: com.squareup.retrofit2:converter-simplexml<br>Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars</p>
</blockquote>
</li>
</ol>
<h4 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h4><p>前面准备工作都完成了，ok，可以开始发起请求了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Call&lt;User&gt; call = service.getModelServiceSync();</div><div class="line">Response&lt;User&gt; response = call.execute();</div><div class="line"><span class="keyword">if</span>(response.isSuccessful()) &#123;</div><div class="line">    User user = response.body();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是Retrofit的基本使用流程：添加依赖–&gt;声明接口–&gt;创建Retrofit和接口对象–&gt;选择执行同步异步请求</p>
<h4 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h4><p>同步请求执行<code>call.execute()</code>即可，异步请求则是这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">call.enqueue(<span class="keyword">new</span> Callback&lt;User&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;User&gt; call, Response&lt;User&gt; response)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(response.isSuccessful()) &#123;</div><div class="line">            User user = response.body();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;User&gt; call, Throwable t)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="带参Get请求"><a href="#带参Get请求" class="headerlink" title="带参Get请求"></a>带参Get请求</h4><p>如果要实现带参数的Get请求，则需要将我们上面的方法声明改成如下形式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"getModelService"</span>)</div><div class="line"><span class="function">Call&lt;User&gt; <span class="title">getModelService</span><span class="params">(@Query(<span class="string">"param1"</span>)</span> <span class="keyword">boolean</span> param1, @<span class="title">Query</span><span class="params">(<span class="string">"param2"</span>)</span> <span class="keyword">boolean</span> param2)</span>;</div></pre></td></tr></table></figure></p>
<p>Retrofit中我们只需要将要传输到服务端的参数添加<code>@Query</code>注解即可，而<code>@Query</code>注解括号中的值<code>param1</code>和<code>param2</code>则是对应的参数名</p>
<p>Retrofit也为我们提供了另外一种形式，使用<code>@QueryMap</code>注解来声明一个集合作为请求参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"getModelService"</span>)</div><div class="line"><span class="function">Call&lt;User&gt; <span class="title">getModelService</span><span class="params">(@QueryMap Map&lt;String, String&gt; parmas)</span></span>;</div></pre></td></tr></table></figure></p>
<h4 id="动态URL"><a href="#动态URL" class="headerlink" title="动态URL"></a>动态URL</h4><p>如果我们有两个这样的请求地址<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:8080/AndroidService/user/zhangsan</span></div><div class="line">http:<span class="comment">//localhost:8080/AndroidService/user/lisi</span></div></pre></td></tr></table></figure></p>
<p>这两个请求地址很明显，除了最后的一段不一样其他的都一样。因此如果按照上面的做法的话，我们要请求这两个服务就需要声明两个接口方法，如果这两个请求地址没有其他参数的话声明两个接口方法不是感觉很累赘，所以Retrofit为我们提供了动态构造URL的方式来声明类似请求地址的接口方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"user/&#123;path&#125;"</span>)</div><div class="line"><span class="function">Call&lt;User&gt; <span class="title">getModelService</span><span class="params">(@Path(path)</span> String path, @<span class="title">Query</span><span class="params">(<span class="string">"param1"</span>)</span> <span class="keyword">boolean</span> param1, @<span class="title">Query</span><span class="params">(<span class="string">"param2"</span>)</span> <span class="keyword">boolean</span> param2)</span>;</div></pre></td></tr></table></figure></p>
<p>上面的方法中，<code>@GET</code>注解中<code>{path}</code>就代表URL可以动态变化的那一部分，<code>@Path</code>注解则表示该方法参数的值就是<code>{path}</code>中的动态值</p>
<h4 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"postService"</span>)</div><div class="line"><span class="function">Call&lt;String&gt; <span class="title">postModelService</span><span class="params">(@Field(<span class="string">"msg"</span>)</span> String msg, @<span class="title">Field</span><span class="params">(<span class="string">"string"</span>)</span> <span class="keyword">boolean</span> isString)</span>;</div></pre></td></tr></table></figure>
<p>Retrofit中的Post请求则需要将前面的<code>@GET</code>注解换成<code>@POST</code>注解，而Post请求的文本参数则用注解<code>@Field</code>来声明，同时还必须给方法添加注解<code>@FormUrlEncoded</code>来告知Retrofit参数为表单参数，如果只为参数增加<code>@Field</code>注解，而不给方法添加<code>@FormUrlEncoded</code>注解运行时会抛异常。</p>
<p>如果Post请求有很多参数同样也可以使用集合的方式进行声明<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"&#123;path&#125;"</span>)</div><div class="line"><span class="function">Call&lt;User&gt; <span class="title">postModelService</span><span class="params">(@Path(<span class="string">"path"</span>)</span> String path, @FieldMap Map&lt;String, String&gt; map)</span>;</div></pre></td></tr></table></figure></p>
<p>Retrofit中提供了注解<code>@FieldMap</code>用来声明一个Map类型的集合作为Post请求的表单参数</p>
<p>Post请求的服务接口声明完成之后，讲得到的<code>Call</code>对象调用<code>execute</code>或者<code>enqueue</code>即可发起同步或异步的Post请求</p>
<p>以上就是Retrofit2的基本使用，下一篇文章我讲接着介绍Retrofit2中的文件上传和文件下载，以及如何实现文件上传和下载过程中的进度条</p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;对于还不知道Refrofit是什么的同学，我只能说你们太out了，赶紧去Google下，本文是针对Retrofit2.0的使用介绍，当然大家也可以直接去&lt;a href=&quot;http://square.github.io/retrofit/&quot;&gt;官网&lt;/a&gt;上去看使用介绍&lt;/p&gt;
&lt;h4 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h4&gt;&lt;p&gt;要使用Retrofit首先得添加gradle依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;compile &amp;apos;com.squareup.retrofit2:retrofit:2.0.2&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;compile &amp;apos;com.squareup.retrofit2:converter-gson:2.0.0&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;声明服务接口&quot;&gt;&lt;a href=&quot;#声明服务接口&quot; class=&quot;headerlink&quot; title=&quot;声明服务接口&quot;&gt;&lt;/a&gt;声明服务接口&lt;/h4&gt;&lt;p&gt;依赖添加完成之后，就可以开始撸代码了，首先我们要新建一个Interface，这个接口就是你要请求的接口服务类，就像这个样子&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RetrofitService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;getModelService&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Call&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;getModelService&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面这个接口中暂时只声明了一个方法，而在Retrofit中想这样声明的一个方法就代表了一个具体的Http请求接口。Retrofit中方法上添加&lt;code&gt;@GET&lt;/code&gt;注解就表示当前方法代表一个Get请求，我们声明的这个请求方法不带任何参数，且返回结果是User对象。&lt;br&gt;&lt;code&gt;@GET&lt;/code&gt;注解括号中的值&lt;code&gt;getModelService&lt;/code&gt;就代表http请求地址的具体指向，这个值与下面baseUrl中配置的URL一起组成一个完整的请求地址&lt;br&gt;Retrofit就是这么任性，它可以帮我们把http的请求结果自动转换成Javabean对象，这将为我们减少不少编码工作。&lt;/p&gt;
&lt;h4 id=&quot;构造Retrofit对象&quot;&gt;&lt;a href=&quot;#构造Retrofit对象&quot; class=&quot;headerlink&quot; title=&quot;构造Retrofit对象&quot;&gt;&lt;/a&gt;构造Retrofit对象&lt;/h4&gt;&lt;p&gt;接口服务声明完成之后，我们接着需要新建一个Retrofit对象&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Retrofit retrofit = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Retrofit.Builder()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         .baseUrl(&lt;span class=&quot;string&quot;&gt;&quot;http://localhost:8080/AndroidService/&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         .addConverterFactory(GsonConverterFactory.create())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         .build();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RetrofitService service = retrofit.create(RetrofitService.class);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="Retrofit" scheme="http://ittiger.cn/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>让RecyclerView更通用</title>
    <link href="http://ittiger.cn/%E8%AE%A9RecyclerView%E6%9B%B4%E9%80%9A%E7%94%A8.html"/>
    <id>http://ittiger.cn/让RecyclerView更通用.html</id>
    <published>2016-07-27T13:48:15.000Z</published>
    <updated>2016-08-04T07:50:08.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="何为通用"><a href="#何为通用" class="headerlink" title="何为通用"></a>何为通用</h3><p>用过<code>RecyclerView</code>的都知道它没有为我们提供像<code>ListView</code>中类似<code>addHeaderView，addFooterView，setOnItemClickListener，setOnItemLongClickListener</code>的接口，另外还有底部自动加载更多，这些都是列表使用中很常见的功能，所以如果我们使用<code>RecyclerView</code>来实现列表的话就需要自己实现这些功能。本文主要介绍这些通用功能的实现方式，使得<code>RecyclerView</code>使用起来和<code>ListView</code>一样方便。</p>
<a id="more"></a>
<h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><h4 id="setOnItemClickListener，setOnItemLongClickListener"><a href="#setOnItemClickListener，setOnItemLongClickListener" class="headerlink" title="setOnItemClickListener，setOnItemLongClickListener"></a>setOnItemClickListener，setOnItemLongClickListener</h4><p><code>RecyclerView</code>中虽然没有提供上面这两个接口，但是给我们提供了另外一个接口：<code>OnItemTouchListener</code>看这个接口的文档描述我们知道此接口可以对<code>RecyclerView</code>中的手势进行监听处理，因此我们可以采用<code>OnItemTouchListener+GestureDetector</code>来实现<code>RecyclerView</code>的<code>OnItemClick</code>和<code>OnItemLongClick</code>。实现方式也比较简单，还是上代码吧…<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> OnItemClickListener mOnItemClickListener;</div><div class="line"><span class="keyword">private</span> OnItemLongClickListener mItemLongClickListener;</div><div class="line"> </div><div class="line">mGestureDetector = <span class="keyword">new</span> GestureDetector(context, <span class="keyword">new</span> GestureDetector.SimpleOnGestureListener() &#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLongPress</span><span class="params">(MotionEvent e)</span> </span>&#123;</div><div class="line"> </div><div class="line">        <span class="keyword">super</span>.onLongPress(e);</div><div class="line">        <span class="keyword">if</span>(mItemLongClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">            View childView = findChildViewUnder(e.getX(), e.getY());</div><div class="line">            <span class="keyword">if</span>(childView != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">int</span> position = getChildLayoutPosition(childView);</div><div class="line">                mItemLongClickListener.onItemLongClick(position, childView);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSingleTapUp</span><span class="params">(MotionEvent e)</span> </span>&#123;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(mOnItemClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">            View childView = findChildViewUnder(e.getX(),e.getY());</div><div class="line">            <span class="keyword">if</span>(childView != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">int</span> position = getChildLayoutPosition(childView);</div><div class="line">                mOnItemClickListener.onItemClick(position, childView);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onSingleTapUp(e);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">addOnItemTouchListener(<span class="keyword">new</span> SimpleOnItemTouchListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(RecyclerView rv, MotionEvent e)</span> </span>&#123;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (mGestureDetector.onTouchEvent(e)) &#123;<span class="comment">//交由手势处理</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Item项点击事件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> position, View itemView)</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * Item项长按点击事件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemLongClickListener</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemLongClick</span><span class="params">(<span class="keyword">int</span> position, View itemView)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="addHeaderView，addFooterView"><a href="#addHeaderView，addFooterView" class="headerlink" title="addHeaderView，addFooterView"></a>addHeaderView，addFooterView</h3><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>前面写过一篇文章<code>RecyclerView</code>下拉刷新上拉加载 介绍过<code>RecyclerView</code>的上拉加载的实现方式，里面的上拉加载进度条其实也是<code>RecyclerView</code>的一个<code>FooterView</code>，其实现方式就是为<code>LoadMoreView</code>设置了一个特殊的<code>ItemViewType</code>来进行区分展示，因此我这里的<code>HeaderView</code>和<code>FooterView</code>也是通过为它们设置不同的<code>ItemViewType</code>来进行区分展示。</p>
<p>我们知道<code>ListView</code>中的<code>addHeaderView</code>和<code>addFooterView</code>都是可以添加多个View的，也就是说<code>RecyclerView</code>中也会出现添加多个完全不同的<code>HeaderView</code>或<code>FooterView</code>，所以我们必须为添加的每个<code>HeaderView</code>和<code>FooterView</code>都设置一个<code>ItemViewType</code>从而达到添加多个不同的<code>HeaderView</code>或<code>FooterView</code>的目的(如果所有的<code>HeaderView</code>或<code>FooterView</code>都设置同一个<code>ItemViewType</code>的话只能显示一种<code>View</code>的<code>HeaderView</code>或<code>FooterView</code>)。</p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>知道了实现原理，我们再来理一下实现步骤：</p>
<ol>
<li>因为每个<code>HeaderView</code>或<code>FooterView</code>都需要对应一个<code>ItemViewType</code>，所以我们需要分别为它们建立一个映射关系，我采用<code>SparseArray</code>实现映射</li>
<li>我们需要在添加<code>HeaderView</code>或<code>FooterView</code>的时候生成对应的<code>ItemViewType</code>值，也就是我们需要定义一个<code>ItemViewType</code>的生成规则，我采用了基准值+视图个数的方式生成<code>ItemViewType</code></li>
<li>自定义一个<code>Adapter</code>继承自<code>RecyclerView.Adapter</code>，重写里面的几个方法：<code>onCreateViewHolder，onBindViewHolder，getItemViewType，getItemCount</code></li>
<li><code>getItemCount</code>方法中返回的数据总数显然是：<code>HeaderView总数</code>+<code>FooterView总数</code>+<code>List列表展示的数据总数</code></li>
<li>重写<code>onBindViewHolder</code>，<code>getItemViewType</code>这两个方法时，显然需要根据<code>position</code>判断当前位置是否为<code>HeaderView</code>或是<code>FooterView</code>，而根据展示顺序来看当<code>0&lt;=position&lt;HeaderView总数</code>  时是<code>HeaderView</code>，而当<code>position&gt;=(HeaderView总数+List总数)</code>时则是<code>FooterView</code>，其余位置则是<code>List</code>数据对应的<code>View</code></li>
<li>而重写<code>onCreateViewHolder</code>方法时，则可用直接根据其方法参数<code>viewType</code>在SparseArray映射中查找是否存在该类型的<code>HeaderView</code>或是<code>FooterView</code>，有则返回，没有则返回List数据展示的<code>View</code><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3>分析完实现的步骤开始撸代码，下面是我实现的关键代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//HeaderView的ItemViewType的生成基准值，生成规则为基准值+当前HeaderView的个数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_HEADER = <span class="number">100000</span>;</div><div class="line"><span class="comment">//FooterView的ItemViewType的生成基准值，生成规则为基准值+当前的FooterView的个数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_FOOTER = <span class="number">200000</span>;</div><div class="line"> </div><div class="line"><span class="comment">//存储HeaderView，key值作为对应HeaderView的ItemViewType</span></div><div class="line"><span class="keyword">private</span> SparseArray&lt;View&gt; mHeaderViews = <span class="keyword">new</span> SparseArray&lt;&gt;(<span class="number">0</span>);</div><div class="line"><span class="comment">//存储FooterView，key值作为对应HeaderView的ItemViewType</span></div><div class="line"><span class="keyword">private</span> SparseArray&lt;View&gt; mFooterViews = <span class="keyword">new</span> SparseArray&lt;&gt;(<span class="number">0</span>);</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(isHeaderViewEnable() &amp;&amp; mHeaderViews.get(viewType) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(mHeaderViews.get(viewType));</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(isFooterViewEnable() &amp;&amp; mFooterViews.get(viewType) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(mFooterViews.get(viewType));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> onCreateItemViewHolder(parent, viewType);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(isFooterView(position) || isHeaderView(position)) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    T item = getItem(position - getHeaderViewCount());</div><div class="line">    onBindItemViewHolder(holder, position, item);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(isHeaderView(position)) &#123;<span class="comment">//FooterView</span></div><div class="line">        <span class="keyword">return</span> mHeaderViews.keyAt(position);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(isFooterView(position))&#123;<span class="comment">//HeaderView</span></div><div class="line">        <span class="keyword">return</span> mFooterViews.keyAt(position - getHeaderViewCount() - getItemDataCount());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> getItemViewTypeForData(position);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 展示的总数据数(包括HeaderView和FooterView)</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//从写此方法，数据总数需要包括HeaderView总数和FooterView总数</span></div><div class="line">    <span class="keyword">return</span> getItemDataCount() + getHeaderViewCount() + getFooterViewCount();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 要展示的有效数据数(不包括HeaderView和FooterView)</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemDataCount</span><span class="params">()</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> mList == <span class="keyword">null</span> ? <span class="number">0</span> : mList.size();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 获取HeaderView的总数</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeaderViewCount</span><span class="params">()</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> isHeaderViewEnable() ? mHeaderViews.size() : <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 获取FooterView的总数</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFooterViewCount</span><span class="params">()</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> isFooterViewEnable() ? mFooterViews.size() : <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 判断position位置是否为FooterView</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> position</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFooterView</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> isFooterViewEnable() &amp;&amp; isFooterViewPosition(position);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 判断position位置是否为HeaderView</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> position</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHeaderView</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> isHeaderViewEnable() &amp;&amp; isHeaderViewPosition(position);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 判断position位置是否为FooterView的索引</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> position</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFooterViewPosition</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> position &gt;= getItemDataCount() + getHeaderViewCount();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 判断position位置是否为HeaderView的索引</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> position</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHeaderViewPosition</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> position &lt; getHeaderViewCount();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加一个HeaderView</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> headerView</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHeaderView</span><span class="params">(View headerView)</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(headerView == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"headerView is null"</span>);</div><div class="line">    &#125;</div><div class="line">    mHeaderViews.put(TYPE_HEADER + getHeaderViewCount(), headerView);</div><div class="line">    notifyItemInserted(getHeaderViewCount() - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加一个FooterView</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> footerView</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFooterView</span><span class="params">(View footerView)</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(footerView == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"footerView is null"</span>);</div><div class="line">    &#125;</div><div class="line">    mFooterViews.put(TYPE_FOOTER + getFooterViewCount(), footerView);</div><div class="line">    notifyItemInserted(getHeaderViewCount() + getItemDataCount() + getFooterViewCount() - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="RecyclerView使用注意"><a href="#RecyclerView使用注意" class="headerlink" title="RecyclerView使用注意"></a>RecyclerView使用注意</h3><ol>
<li><p>这里需要注明一点<code>RecyclerView</code>使用中的坑，如果<code>RecyclerView</code>为<code>LinearLayoutManager</code>时在<code>onCreatViewHolder</code>中生成的View都必须关联上其<code>parent</code>，也就是关联到<code>RecyclerView</code>本身。我前面的一片文章记录了我遇到的这个问题<code>RecyclerView</code>子<code>View</code>宽度不充满父容器，所以在<code>addHeaderView</code>和<code>addFooterView</code>时也需要注意这个问题</p>
</li>
<li><p>如果你的<code>RecyclerView</code>的<code>LayoutManager</code>是<code>GridLayoutManager</code>或<code>StaggeredGridLayoutManager</code>时，如果就这样添加<code>HeaderView</code>或<code>FooterView</code>，会发现<code>HeaderView</code>或<code>FooterView</code>不会独立的占据一行。这是因为设置了<code>SpanSize</code>的缘故，所以我们需要针对这两种<code>LayoutManager</code>进行处理，处理方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttachedToRecyclerView</span><span class="params">(RecyclerView recyclerView)</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">super</span>.onAttachedToRecyclerView(recyclerView);</div><div class="line">    <span class="keyword">final</span> RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();</div><div class="line">    <span class="keyword">if</span>(layoutManager <span class="keyword">instanceof</span> GridLayoutManager) &#123;</div><div class="line">        ((GridLayoutManager) layoutManager).setSpanSizeLookup(<span class="keyword">new</span> GridLayoutManager.SpanSizeLookup() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpanSize</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"> </div><div class="line">                <span class="keyword">return</span> getNewSpanSize(((GridLayoutManager) layoutManager).getSpanCount(), position);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(ViewHolder holder)</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">super</span>.onViewAttachedToWindow(holder);</div><div class="line">    <span class="keyword">int</span> position = holder.getLayoutPosition();</div><div class="line">    <span class="keyword">if</span>(isHeaderView(position) || isFooterView(position)) &#123;</div><div class="line">        <span class="keyword">final</span> ViewGroup.LayoutParams layoutParams = holder.itemView.getLayoutParams();</div><div class="line">        <span class="keyword">if</span>(layoutParams != <span class="keyword">null</span> &amp;&amp; layoutParams <span class="keyword">instanceof</span> StaggeredGridLayoutManager.LayoutParams) &#123;</div><div class="line">            StaggeredGridLayoutManager.LayoutParams lp = (StaggeredGridLayoutManager.LayoutParams) layoutParams;</div><div class="line">            lp.setFullSpan(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNewSpanSize</span><span class="params">(<span class="keyword">int</span> spanCount, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(isHeaderView(position) || isFooterView(position)) &#123;</div><div class="line">        <span class="keyword">return</span> spanCount;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="自动加载更多"><a href="#自动加载更多" class="headerlink" title="自动加载更多"></a>自动加载更多</h3><p>自动加载更多也是列表显示中比较常见的一个功能，我们可以为<code>RecyclerView</code>设置<code>ScrollListener</code>监听来进行实现，具体实现的关键代码如下；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">super</span>.setOnScrollListener(<span class="keyword">new</span> OnScrollListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</div><div class="line"> </div><div class="line">        <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState);</div><div class="line">        <span class="keyword">if</span>(newState == SCROLL_STATE_IDLE &amp;&amp; mIsAutoLoadMore &amp;&amp; mLoadMoreListener != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(mLastVisiblePosition + <span class="number">1</span> == getAdapter().getItemCount()) &#123;</div><div class="line">                mLoadMoreListener.onLoadMore();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(mOnScrollListener != <span class="keyword">null</span>) &#123;</div><div class="line">            mOnScrollListener.onScrollStateChanged(recyclerView, newState);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line"> </div><div class="line">        <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</div><div class="line">        <span class="keyword">if</span>(mIsAutoLoadMore &amp;&amp; mLoadMoreListener != <span class="keyword">null</span>) &#123;</div><div class="line">            mLastVisiblePosition = getLastVisiblePosition();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(mOnScrollListener != <span class="keyword">null</span>) &#123;</div><div class="line">            mOnScrollListener.onScrolled(recyclerView, dx, dy);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>文章相关的完整代码和Demo：<a href="https://github.com/huyongli/AndroidDemo" target="_blank" rel="external">https://github.com/huyongli/AndroidDemo</a></p>
<hr>
<p>原创文章，本文采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5(中国大陆许可协议)</a>进行许可，欢迎转载，但转载请注明来自<a href="ittiger.cn">ittiger.cn</a>，并保证转载后文章内容的完整性。本人(laohu)保留所有版权相关权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;何为通用&quot;&gt;&lt;a href=&quot;#何为通用&quot; class=&quot;headerlink&quot; title=&quot;何为通用&quot;&gt;&lt;/a&gt;何为通用&lt;/h3&gt;&lt;p&gt;用过&lt;code&gt;RecyclerView&lt;/code&gt;的都知道它没有为我们提供像&lt;code&gt;ListView&lt;/code&gt;中类似&lt;code&gt;addHeaderView，addFooterView，setOnItemClickListener，setOnItemLongClickListener&lt;/code&gt;的接口，另外还有底部自动加载更多，这些都是列表使用中很常见的功能，所以如果我们使用&lt;code&gt;RecyclerView&lt;/code&gt;来实现列表的话就需要自己实现这些功能。本文主要介绍这些通用功能的实现方式，使得&lt;code&gt;RecyclerView&lt;/code&gt;使用起来和&lt;code&gt;ListView&lt;/code&gt;一样方便。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ittiger.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ittiger.cn/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://ittiger.cn/tags/RecyclerView/"/>
    
  </entry>
  
</feed>
